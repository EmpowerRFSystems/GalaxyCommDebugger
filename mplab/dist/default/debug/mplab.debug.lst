

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 12 14:50:41 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F26K22 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	mediumconst
    73  00FDFE                     __pmediumconst:
    74                           	opt stack 0
    75  00FDFE  00                 	db	0
    76  00FDFF                     _table_crc:
    77                           	opt stack 0
    78  00FDFF  0000               	dw	0
    79  00FE01  C0C1               	dw	49345
    80  00FE03  C181               	dw	49537
    81  00FE05  0140               	dw	320
    82  00FE07  C301               	dw	49921
    83  00FE09  03C0               	dw	960
    84  00FE0B  0280               	dw	640
    85  00FE0D  C241               	dw	49729
    86  00FE0F  C601               	dw	50689
    87  00FE11  06C0               	dw	1728
    88  00FE13  0780               	dw	1920
    89  00FE15  C741               	dw	51009
    90  00FE17  0500               	dw	1280
    91  00FE19  C5C1               	dw	50625
    92  00FE1B  C481               	dw	50305
    93  00FE1D  0440               	dw	1088
    94  00FE1F  CC01               	dw	52225
    95  00FE21  0CC0               	dw	3264
    96  00FE23  0D80               	dw	3456
    97  00FE25  CD41               	dw	52545
    98  00FE27  0F00               	dw	3840
    99  00FE29  CFC1               	dw	53185
   100  00FE2B  CE81               	dw	52865
   101  00FE2D  0E40               	dw	3648
   102  00FE2F  0A00               	dw	2560
   103  00FE31  CAC1               	dw	51905
   104  00FE33  CB81               	dw	52097
   105  00FE35  0B40               	dw	2880
   106  00FE37  C901               	dw	51457
   107  00FE39  09C0               	dw	2496
   108  00FE3B  0880               	dw	2176
   109  00FE3D  C841               	dw	51265
   110  00FE3F  D801               	dw	55297
   111  00FE41  18C0               	dw	6336
   112  00FE43  1980               	dw	6528
   113  00FE45  D941               	dw	55617
   114  00FE47  1B00               	dw	6912
   115  00FE49  DBC1               	dw	56257
   116  00FE4B  DA81               	dw	55937
   117  00FE4D  1A40               	dw	6720
   118  00FE4F  1E00               	dw	7680
   119  00FE51  DEC1               	dw	57025
   120  00FE53  DF81               	dw	57217
   121  00FE55  1F40               	dw	8000
   122  00FE57  DD01               	dw	56577
   123  00FE59  1DC0               	dw	7616
   124  00FE5B  1C80               	dw	7296
   125  00FE5D  DC41               	dw	56385
   126  00FE5F  1400               	dw	5120
   127  00FE61  D4C1               	dw	54465
   128  00FE63  D581               	dw	54657
   129  00FE65  1540               	dw	5440
   130  00FE67  D701               	dw	55041
   131  00FE69  17C0               	dw	6080
   132  00FE6B  1680               	dw	5760
   133  00FE6D  D641               	dw	54849
   134  00FE6F  D201               	dw	53761
   135  00FE71  12C0               	dw	4800
   136  00FE73  1380               	dw	4992
   137  00FE75  D341               	dw	54081
   138  00FE77  1100               	dw	4352
   139  00FE79  D1C1               	dw	53697
   140  00FE7B  D081               	dw	53377
   141  00FE7D  1040               	dw	4160
   142  00FE7F  F001               	dw	61441
   143  00FE81  30C0               	dw	12480
   144  00FE83  3180               	dw	12672
   145  00FE85  F141               	dw	61761
   146  00FE87  3300               	dw	13056
   147  00FE89  F3C1               	dw	62401
   148  00FE8B  F281               	dw	62081
   149  00FE8D  3240               	dw	12864
   150  00FE8F  3600               	dw	13824
   151  00FE91  F6C1               	dw	63169
   152  00FE93  F781               	dw	63361
   153  00FE95  3740               	dw	14144
   154  00FE97  F501               	dw	62721
   155  00FE99  35C0               	dw	13760
   156  00FE9B  3480               	dw	13440
   157  00FE9D  F441               	dw	62529
   158  00FE9F  3C00               	dw	15360
   159  00FEA1  FCC1               	dw	64705
   160  00FEA3  FD81               	dw	64897
   161  00FEA5  3D40               	dw	15680
   162  00FEA7  FF01               	dw	65281
   163  00FEA9  3FC0               	dw	16320
   164  00FEAB  3E80               	dw	16000
   165  00FEAD  FE41               	dw	65089
   166  00FEAF  FA01               	dw	64001
   167  00FEB1  3AC0               	dw	15040
   168  00FEB3  3B80               	dw	15232
   169  00FEB5  FB41               	dw	64321
   170  00FEB7  3900               	dw	14592
   171  00FEB9  F9C1               	dw	63937
   172  00FEBB  F881               	dw	63617
   173  00FEBD  3840               	dw	14400
   174  00FEBF  2800               	dw	10240
   175  00FEC1  E8C1               	dw	59585
   176  00FEC3  E981               	dw	59777
   177  00FEC5  2940               	dw	10560
   178  00FEC7  EB01               	dw	60161
   179  00FEC9  2BC0               	dw	11200
   180  00FECB  2A80               	dw	10880
   181  00FECD  EA41               	dw	59969
   182  00FECF  EE01               	dw	60929
   183  00FED1  2EC0               	dw	11968
   184  00FED3  2F80               	dw	12160
   185  00FED5  EF41               	dw	61249
   186  00FED7  2D00               	dw	11520
   187  00FED9  EDC1               	dw	60865
   188  00FEDB  EC81               	dw	60545
   189  00FEDD  2C40               	dw	11328
   190  00FEDF  E401               	dw	58369
   191  00FEE1  24C0               	dw	9408
   192  00FEE3  2580               	dw	9600
   193  00FEE5  E541               	dw	58689
   194  00FEE7  2700               	dw	9984
   195  00FEE9  E7C1               	dw	59329
   196  00FEEB  E681               	dw	59009
   197  00FEED  2640               	dw	9792
   198  00FEEF  2200               	dw	8704
   199  00FEF1  E2C1               	dw	58049
   200  00FEF3  E381               	dw	58241
   201  00FEF5  2340               	dw	9024
   202  00FEF7  E101               	dw	57601
   203  00FEF9  21C0               	dw	8640
   204  00FEFB  2080               	dw	8320
   205  00FEFD  E041               	dw	57409
   206  00FEFF  A001               	dw	40961
   207  00FF01  60C0               	dw	24768
   208  00FF03  6180               	dw	24960
   209  00FF05  A141               	dw	41281
   210  00FF07  6300               	dw	25344
   211  00FF09  A3C1               	dw	41921
   212  00FF0B  A281               	dw	41601
   213  00FF0D  6240               	dw	25152
   214  00FF0F  6600               	dw	26112
   215  00FF11  A6C1               	dw	42689
   216  00FF13  A781               	dw	42881
   217  00FF15  6740               	dw	26432
   218  00FF17  A501               	dw	42241
   219  00FF19  65C0               	dw	26048
   220  00FF1B  6480               	dw	25728
   221  00FF1D  A441               	dw	42049
   222  00FF1F  6C00               	dw	27648
   223  00FF21  ACC1               	dw	44225
   224  00FF23  AD81               	dw	44417
   225  00FF25  6D40               	dw	27968
   226  00FF27  AF01               	dw	44801
   227  00FF29  6FC0               	dw	28608
   228  00FF2B  6E80               	dw	28288
   229  00FF2D  AE41               	dw	44609
   230  00FF2F  AA01               	dw	43521
   231  00FF31  6AC0               	dw	27328
   232  00FF33  6B80               	dw	27520
   233  00FF35  AB41               	dw	43841
   234  00FF37  6900               	dw	26880
   235  00FF39  A9C1               	dw	43457
   236  00FF3B  A881               	dw	43137
   237  00FF3D  6840               	dw	26688
   238  00FF3F  7800               	dw	30720
   239  00FF41  B8C1               	dw	47297
   240  00FF43  B981               	dw	47489
   241  00FF45  7940               	dw	31040
   242  00FF47  BB01               	dw	47873
   243  00FF49  7BC0               	dw	31680
   244  00FF4B  7A80               	dw	31360
   245  00FF4D  BA41               	dw	47681
   246  00FF4F  BE01               	dw	48641
   247  00FF51  7EC0               	dw	32448
   248  00FF53  7F80               	dw	32640
   249  00FF55  BF41               	dw	48961
   250  00FF57  7D00               	dw	32000
   251  00FF59  BDC1               	dw	48577
   252  00FF5B  BC81               	dw	48257
   253  00FF5D  7C40               	dw	31808
   254  00FF5F  B401               	dw	46081
   255  00FF61  74C0               	dw	29888
   256  00FF63  7580               	dw	30080
   257  00FF65  B541               	dw	46401
   258  00FF67  7700               	dw	30464
   259  00FF69  B7C1               	dw	47041
   260  00FF6B  B681               	dw	46721
   261  00FF6D  7640               	dw	30272
   262  00FF6F  7200               	dw	29184
   263  00FF71  B2C1               	dw	45761
   264  00FF73  B381               	dw	45953
   265  00FF75  7340               	dw	29504
   266  00FF77  B101               	dw	45313
   267  00FF79  71C0               	dw	29120
   268  00FF7B  7080               	dw	28800
   269  00FF7D  B041               	dw	45121
   270  00FF7F  5000               	dw	20480
   271  00FF81  90C1               	dw	37057
   272  00FF83  9181               	dw	37249
   273  00FF85  5140               	dw	20800
   274  00FF87  9301               	dw	37633
   275  00FF89  53C0               	dw	21440
   276  00FF8B  5280               	dw	21120
   277  00FF8D  9241               	dw	37441
   278  00FF8F  9601               	dw	38401
   279  00FF91  56C0               	dw	22208
   280  00FF93  5780               	dw	22400
   281  00FF95  9741               	dw	38721
   282  00FF97  5500               	dw	21760
   283  00FF99  95C1               	dw	38337
   284  00FF9B  9481               	dw	38017
   285  00FF9D  5440               	dw	21568
   286  00FF9F  9C01               	dw	39937
   287  00FFA1  5CC0               	dw	23744
   288  00FFA3  5D80               	dw	23936
   289  00FFA5  9D41               	dw	40257
   290  00FFA7  5F00               	dw	24320
   291  00FFA9  9FC1               	dw	40897
   292  00FFAB  9E81               	dw	40577
   293  00FFAD  5E40               	dw	24128
   294  00FFAF  5A00               	dw	23040
   295  00FFB1  9AC1               	dw	39617
   296  00FFB3  9B81               	dw	39809
   297  00FFB5  5B40               	dw	23360
   298  00FFB7  9901               	dw	39169
   299  00FFB9  59C0               	dw	22976
   300  00FFBB  5880               	dw	22656
   301  00FFBD  9841               	dw	38977
   302  00FFBF  8801               	dw	34817
   303  00FFC1  48C0               	dw	18624
   304  00FFC3  4980               	dw	18816
   305  00FFC5  8941               	dw	35137
   306  00FFC7  4B00               	dw	19200
   307  00FFC9  8BC1               	dw	35777
   308  00FFCB  8A81               	dw	35457
   309  00FFCD  4A40               	dw	19008
   310  00FFCF  4E00               	dw	19968
   311  00FFD1  8EC1               	dw	36545
   312  00FFD3  8F81               	dw	36737
   313  00FFD5  4F40               	dw	20288
   314  00FFD7  8D01               	dw	36097
   315  00FFD9  4DC0               	dw	19904
   316  00FFDB  4C80               	dw	19584
   317  00FFDD  8C41               	dw	35905
   318  00FFDF  4400               	dw	17408
   319  00FFE1  84C1               	dw	33985
   320  00FFE3  8581               	dw	34177
   321  00FFE5  4540               	dw	17728
   322  00FFE7  8701               	dw	34561
   323  00FFE9  47C0               	dw	18368
   324  00FFEB  4680               	dw	18048
   325  00FFED  8641               	dw	34369
   326  00FFEF  8201               	dw	33281
   327  00FFF1  42C0               	dw	17088
   328  00FFF3  4380               	dw	17280
   329  00FFF5  8341               	dw	33601
   330  00FFF7  4100               	dw	16640
   331  00FFF9  81C1               	dw	33217
   332  00FFFB  8081               	dw	32897
   333  00FFFD  4040               	dw	16448
   334  00FFFF                     __end_of_table_crc:
   335                           	opt stack 0
   336  0000                     _ANSELC	set	3898
   337  0000                     _ANSELB	set	3897
   338  0000                     _ANSELA	set	3896
   339  0000                     _RCREG2	set	3956
   340  0000                     _RCREG1	set	4014
   341  0000                     _TXREG2	set	3955
   342  0000                     _TXREG1	set	4013
   343  0000                     _PIE3bits	set	4003
   344  0000                     _INTCONbits	set	4082
   345  0000                     _PIE1bits	set	3997
   346  0000                     _IPR3bits	set	4005
   347  0000                     _IPR1bits	set	3999
   348  0000                     _PIR3bits	set	4004
   349  0000                     _RC1REG	set	4014
   350  0000                     _PIR1bits	set	3998
   351  0000                     _RCSTA2bits	set	3953
   352  0000                     _RCSTA1bits	set	4011
   353  0000                     _SPBRG2	set	3957
   354  0000                     _SPBRGH2	set	3958
   355  0000                     _SPBRG1	set	4015
   356  0000                     _SPBRGH1	set	4016
   357  0000                     _TXSTA2bits	set	3954
   358  0000                     _BAUDCON2bits	set	3952
   359  0000                     _TXSTA1bits	set	4012
   360  0000                     _BAUDCON1bits	set	4024
   361  0000                     _OSCCON2bits	set	4050
   362  0000                     _OSCTUNEbits	set	3995
   363  0000                     _OSCCONbits	set	4051
   364  0000                     _OSCCON	set	4051
   365  0000                     _LATCbits	set	3979
   366  0000                     _TRISCbits	set	3988
   367  0000                     _LATAbits	set	3977
   368  0000                     _TRISAbits	set	3986
   369  0000                     _LATBbits	set	3978
   370  0000                     _TRISBbits	set	3987
   371                           
   372                           ; #config settings
   373  00FFFF  00                 	db	0	; dummy byte at the end
   374  0000                     
   375                           	psect	cinit
   376  00EB96                     __pcinit:
   377                           	opt stack 0
   378  00EB96                     start_initialization:
   379                           	opt stack 0
   380  00EB96                     __initialization:
   381                           	opt stack 0
   382                           
   383                           ; Clear objects allocated to BIGRAM (272 bytes)
   384  00EB96  EE00  F0E1         	lfsr	0,__pbssBIGRAM
   385  00EB9A  EE11 F010          	lfsr	1,272
   386  00EB9E                     clear_0:
   387  00EB9E  6AEE               	clrf	postinc0,c
   388  00EBA0  50E5               	movf	postdec1,w,c
   389  00EBA2  50E1               	movf	fsr1l,w,c
   390  00EBA4  E1FC               	bnz	clear_0
   391  00EBA6  50E2               	movf	fsr1h,w,c
   392  00EBA8  E1FA               	bnz	clear_0
   393                           
   394                           ; Clear objects allocated to BANK0 (129 bytes)
   395  00EBAA  EE00  F060         	lfsr	0,__pbssBANK0
   396  00EBAE  0E81               	movlw	129
   397  00EBB0                     clear_1:
   398  00EBB0  6AEE               	clrf	postinc0,c
   399  00EBB2  06E8               	decf	wreg,f,c
   400  00EBB4  E1FD               	bnz	clear_1
   401                           
   402                           ; Clear objects allocated to COMRAM (13 bytes)
   403  00EBB6  EE00  F039         	lfsr	0,__pbssCOMRAM
   404  00EBBA  0E0D               	movlw	13
   405  00EBBC                     clear_2:
   406  00EBBC  6AEE               	clrf	postinc0,c
   407  00EBBE  06E8               	decf	wreg,f,c
   408  00EBC0  E1FD               	bnz	clear_2
   409  00EBC2                     end_of_initialization:
   410                           	opt stack 0
   411  00EBC2                     __end_of__initialization:
   412                           	opt stack 0
   413  00EBC2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   414  00EBC4  6EF8               	movwf	tblptru,c
   415  00EBC6  0100               	movlb	0
   416  00EBC8  EF94  F07A         	goto	_main	;jump to C main() function
   417                           tblptru	equ	0xFF8
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           postdec1	equ	0xFE5
   421                           fsr1h	equ	0xFE2
   422                           fsr1l	equ	0xFE1
   423                           
   424                           	psect	bssCOMRAM
   425  000039                     __pbssCOMRAM:
   426                           	opt stack 0
   427  000039                     _digitalOutHyst:
   428                           	opt stack 0
   429  000039                     	ds	8
   430  000041                     _led_red_delay:
   431                           	opt stack 0
   432  000041                     	ds	2
   433  000043                     _led_green_delay:
   434                           	opt stack 0
   435  000043                     	ds	2
   436  000045                     _addressDatagramCount:
   437                           	opt stack 0
   438  000045                     	ds	1
   439                           tblptru	equ	0xFF8
   440                           postinc0	equ	0xFEE
   441                           wreg	equ	0xFE8
   442                           postdec1	equ	0xFE5
   443                           fsr1h	equ	0xFE2
   444                           fsr1l	equ	0xFE1
   445                           
   446                           	psect	bssBANK0
   447  000060                     __pbssBANK0:
   448                           	opt stack 0
   449  000060                     _galaxyCommands:
   450                           	opt stack 0
   451  000060                     	ds	129
   452                           tblptru	equ	0xFF8
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           postdec1	equ	0xFE5
   456                           fsr1h	equ	0xFE2
   457                           fsr1l	equ	0xFE1
   458                           
   459                           	psect	bssBIGRAM
   460  0000E1                     __pbssBIGRAM:
   461                           	opt stack 0
   462  0000E1                     _buffers:
   463                           	opt stack 0
   464  0000E1                     	ds	272
   465                           tblptru	equ	0xFF8
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           postdec1	equ	0xFE5
   469                           fsr1h	equ	0xFE2
   470                           fsr1l	equ	0xFE1
   471                           
   472                           	psect	cstackCOMRAM
   473  000001                     __pcstackCOMRAM:
   474                           	opt stack 0
   475  000001                     ?_compute_crc:
   476                           	opt stack 0
   477  000001                     ?___lldiv:
   478                           	opt stack 0
   479  000001                     EnableTransmitter@uart_index:
   480                           	opt stack 0
   481  000001                     IsTransmitterEnabled@uart_index:
   482                           	opt stack 0
   483  000001                     EnableTransceiverTX@uart_index:
   484                           	opt stack 0
   485  000001                     DisableTransceiverTX@uart_index:
   486                           	opt stack 0
   487  000001                     EnableTransceiverRX@uart_index:
   488                           	opt stack 0
   489  000001                     __GetTxInterruptFlag@uart_index:
   490                           	opt stack 0
   491  000001                     IsRxDataAvailable@uart_index:
   492                           	opt stack 0
   493  000001                     FifoInitialize@buffer:
   494                           	opt stack 0
   495  000001                     IsFifoFull@buffer:
   496                           	opt stack 0
   497  000001                     IsFifoEmpty@buffer:
   498                           	opt stack 0
   499  000001                     compute_crc@ptr_msg_body:
   500                           	opt stack 0
   501  000001                     ___lldiv@dividend:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x0
   505  000001                     	ds	1
   506  000002                     ?_GetChar9:
   507                           	opt stack 0
   508  000002                     IsTransmitterReady@uart_index:
   509                           	opt stack 0
   510  000002                     PutChar9@data:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x1
   514  000002                     	ds	1
   515  000003                     ?_FifoDequeue:
   516                           	opt stack 0
   517  000003                     FifoDequeue@buffer:
   518                           	opt stack 0
   519  000003                     compute_crc@len_body:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x2
   523  000003                     	ds	1
   524  000004                     PutChar9@uart_index:
   525                           	opt stack 0
   526  000004                     GetChar9@uart_index:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x3
   530  000004                     	ds	1
   531  000005                     ??_compute_crc:
   532  000005                     ??_FifoDequeue:
   533  000005                     GetChar9@data:
   534                           	opt stack 0
   535  000005                     FifoEnqueue@buffer:
   536                           	opt stack 0
   537  000005                     ___lldiv@divisor:
   538                           	opt stack 0
   539                           
   540                           ; 4 bytes @ 0x4
   541  000005                     	ds	1
   542  000006                     FifoDequeue@data:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x5
   546  000006                     	ds	1
   547  000007                     FifoEnqueue@data:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x6
   551  000007                     	ds	1
   552  000008                     DigitalBreakout@newData:
   553                           	opt stack 0
   554  000008                     PutChar9Default@data:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x7
   558  000008                     	ds	1
   559  000009                     ??_FifoEnqueue:
   560  000009                     ___lldiv@quotient:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0x8
   564  000009                     	ds	1
   565  00000A                     ??_DigitalBreakout:
   566  00000A                     
   567                           ; 1 bytes @ 0x9
   568  00000A                     	ds	2
   569  00000C                     DigitalBreakout@x:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0xB
   573  00000C                     	ds	1
   574  00000D                     ___lldiv@counter:
   575                           	opt stack 0
   576  00000D                     DigitalBreakout@output:
   577                           	opt stack 0
   578  00000D                     compute_crc@i:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0xC
   582  00000D                     	ds	1
   583  00000E                     UART_Initialize@baud:
   584                           	opt stack 0
   585                           
   586                           ; 4 bytes @ 0xD
   587  00000E                     	ds	1
   588  00000F                     DigitalBreakout@mask:
   589                           	opt stack 0
   590  00000F                     compute_crc@crc:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0xE
   594  00000F                     	ds	2
   595  000011                     TinyDelay@data:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x10
   599  000011                     	ds	1
   600  000012                     UART_Initialize@mode_9bit:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x11
   604  000012                     	ds	1
   605  000013                     UART_Initialize@interrupt_control:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x12
   609  000013                     	ds	1
   610  000014                     ??_UART_Initialize:
   611                           
   612                           ; 1 bytes @ 0x13
   613  000014                     	ds	4
   614  000018                     UART_Initialize@clock_freq:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x17
   618  000018                     	ds	4
   619  00001C                     UART_Initialize@temp:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0x1B
   623  00001C                     	ds	4
   624  000020                     UART_Initialize@uart_index:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x1F
   628  000020                     	ds	1
   629  000021                     ??_main:
   630                           
   631                           ; 1 bytes @ 0x20
   632  000021                     	ds	5
   633  000026                     main@m:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x25
   637  000026                     	ds	4
   638  00002A                     main@i:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x29
   642  00002A                     	ds	2
   643  00002C                     main@j:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x2B
   647  00002C                     	ds	2
   648  00002E                     main@tf:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x2D
   652  00002E                     	ds	1
   653  00002F                     main@l:
   654                           	opt stack 0
   655                           
   656                           ; 4 bytes @ 0x2E
   657  00002F                     	ds	4
   658  000033                     main@k:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x32
   662  000033                     	ds	1
   663  000034                     main@x:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x33
   667  000034                     	ds	1
   668  000035                     main@slot:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x34
   672  000035                     	ds	1
   673  000036                     main@x_378:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x35
   677  000036                     	ds	1
   678  000037                     main@commandNumber:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x36
   682  000037                     	ds	1
   683  000038                     main@c:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x37
   687  000038                     	ds	1
   688                           tblptru	equ	0xFF8
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           postdec1	equ	0xFE5
   692                           fsr1h	equ	0xFE2
   693                           fsr1l	equ	0xFE1
   694                           
   695 ;;
   696 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   697 ;;
   698 ;; *************** function _main *****************
   699 ;; Defined at:
   700 ;;		line 86 in file "main.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;		None
   703 ;; Auto vars:     Size  Location     Type
   704 ;;  k               1   50[COMRAM] unsigned char 
   705 ;;  x               1   53[COMRAM] unsigned char 
   706 ;;  slot            1   52[COMRAM] unsigned char 
   707 ;;  x               1   51[COMRAM] unsigned char 
   708 ;;  l               4   46[COMRAM] unsigned long 
   709 ;;  m               4   37[COMRAM] unsigned long 
   710 ;;  j               2   43[COMRAM] unsigned int 
   711 ;;  i               2   41[COMRAM] unsigned int 
   712 ;;  crc             2    0        unsigned short 
   713 ;;  data            2    0        unsigned int 
   714 ;;  c               1   55[COMRAM] unsigned char 
   715 ;;  commandNumbe    1   54[COMRAM] unsigned char 
   716 ;;  tf              1   45[COMRAM] unsigned char 
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   727 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   728 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   729 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   730 ;;Total ram usage:       24 bytes
   731 ;; Hardware stack levels required when called:    4
   732 ;; This function calls:
   733 ;;		_ConfigureOscillator
   734 ;;		_EnableTransceiverRX
   735 ;;		_FifoEnqueue
   736 ;;		_FifoInitialize
   737 ;;		_IsFifoEmpty
   738 ;;		_TinyDelay
   739 ;;		_UART_Initialize
   740 ;;		_compute_crc
   741 ;; This function is called by:
   742 ;;		Startup code after reset
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746                           	psect	text0
   747  00F528                     __ptext0:
   748                           	opt stack 0
   749  00F528                     _main:
   750                           	opt stack 27
   751                           
   752                           ;main.c: 88: unsigned long l = 0;
   753                           
   754                           ;incstack = 0
   755  00F528  0E00               	movlw	0
   756  00F52A  6E2F               	movwf	main@l,c
   757  00F52C  0E00               	movlw	0
   758  00F52E  6E30               	movwf	main@l+1,c
   759  00F530  0E00               	movlw	0
   760  00F532  6E31               	movwf	main@l+2,c
   761  00F534  0E00               	movlw	0
   762  00F536  6E32               	movwf	main@l+3,c
   763                           
   764                           ;main.c: 89: unsigned long m = 0;
   765  00F538  0E00               	movlw	0
   766  00F53A  6E26               	movwf	main@m,c
   767  00F53C  0E00               	movlw	0
   768  00F53E  6E27               	movwf	main@m+1,c
   769  00F540  0E00               	movlw	0
   770  00F542  6E28               	movwf	main@m+2,c
   771  00F544  0E00               	movlw	0
   772  00F546  6E29               	movwf	main@m+3,c
   773                           
   774                           ;main.c: 90: unsigned int data;
   775                           ;main.c: 91: unsigned char commandNumber = 0;
   776  00F548  0E00               	movlw	0
   777  00F54A  6E37               	movwf	main@commandNumber,c
   778                           
   779                           ;main.c: 92: unsigned int i = 0;
   780  00F54C  0E00               	movlw	0
   781  00F54E  6E2B               	movwf	main@i+1,c
   782  00F550  0E00               	movlw	0
   783  00F552  6E2A               	movwf	main@i,c
   784                           
   785                           ;main.c: 93: unsigned int j = 0;
   786  00F554  0E00               	movlw	0
   787  00F556  6E2D               	movwf	main@j+1,c
   788  00F558  0E00               	movlw	0
   789  00F55A  6E2C               	movwf	main@j,c
   790                           
   791                           ;main.c: 94: unsigned char tf = 0;
   792  00F55C  0E00               	movlw	0
   793  00F55E  6E2E               	movwf	main@tf,c
   794                           
   795                           ;main.c: 95: unsigned char c = 0;
   796  00F560  0E00               	movlw	0
   797  00F562  6E38               	movwf	main@c,c
   798                           
   799                           ;main.c: 96: unsigned short crc;
   800                           ;main.c: 98: ANSELA = 0;
   801  00F564  0E00               	movlw	0
   802  00F566  010F               	movlb	15	; () banked
   803  00F568  6F38               	movwf	56,b	;volatile
   804                           
   805                           ;main.c: 99: ANSELB = 0;
   806  00F56A  0E00               	movlw	0
   807  00F56C  6F39               	movwf	57,b	;volatile
   808                           
   809                           ;main.c: 100: ANSELC = 0;
   810  00F56E  0E00               	movlw	0
   811  00F570  6F3A               	movwf	58,b	;volatile
   812                           
   813                           ; BSR set to: 15
   814                           ;main.c: 102: ConfigureOscillator();
   815  00F572  EC52  F075         	call	_ConfigureOscillator	;wreg free
   816                           
   817                           ;main.c: 103: UART_Initialize(
   818                           ;main.c: 104: 1,
   819                           ;main.c: 105: 19200,
   820                           ;main.c: 106: 1,
   821                           ;main.c: 107: 0
   822                           ;main.c: 108: );
   823  00F576  0E00               	movlw	0
   824  00F578  6E0E               	movwf	UART_Initialize@baud,c
   825  00F57A  0E4B               	movlw	75
   826  00F57C  6E0F               	movwf	UART_Initialize@baud+1,c
   827  00F57E  0E00               	movlw	0
   828  00F580  6E10               	movwf	UART_Initialize@baud+2,c
   829  00F582  0E00               	movlw	0
   830  00F584  6E11               	movwf	UART_Initialize@baud+3,c
   831  00F586  0E01               	movlw	1
   832  00F588  6E12               	movwf	UART_Initialize@mode_9bit,c
   833  00F58A  0E00               	movlw	0
   834  00F58C  6E13               	movwf	UART_Initialize@interrupt_control,c
   835  00F58E  0E01               	movlw	1
   836  00F590  EC0A  F078         	call	_UART_Initialize
   837                           
   838                           ;main.c: 109: UART_Initialize(
   839                           ;main.c: 110: 2,
   840                           ;main.c: 111: 19200,
   841                           ;main.c: 112: 1,
   842                           ;main.c: 113: 0
   843                           ;main.c: 114: );
   844  00F594  0E00               	movlw	0
   845  00F596  6E0E               	movwf	UART_Initialize@baud,c
   846  00F598  0E4B               	movlw	75
   847  00F59A  6E0F               	movwf	UART_Initialize@baud+1,c
   848  00F59C  0E00               	movlw	0
   849  00F59E  6E10               	movwf	UART_Initialize@baud+2,c
   850  00F5A0  0E00               	movlw	0
   851  00F5A2  6E11               	movwf	UART_Initialize@baud+3,c
   852  00F5A4  0E01               	movlw	1
   853  00F5A6  6E12               	movwf	UART_Initialize@mode_9bit,c
   854  00F5A8  0E00               	movlw	0
   855  00F5AA  6E13               	movwf	UART_Initialize@interrupt_control,c
   856  00F5AC  0E02               	movlw	2
   857  00F5AE  EC0A  F078         	call	_UART_Initialize
   858                           
   859                           ;main.c: 115: EnableTransceiverRX(1);
   860  00F5B2  0E01               	movlw	1
   861  00F5B4  EC35  F075         	call	_EnableTransceiverRX
   862                           
   863                           ;main.c: 116: EnableTransceiverRX(2);
   864  00F5B8  0E02               	movlw	2
   865  00F5BA  EC35  F075         	call	_EnableTransceiverRX
   866                           
   867                           ;main.c: 119: for (unsigned char x=0; x < 4; x++) {
   868  00F5BE  0E00               	movlw	0
   869  00F5C0  6E34               	movwf	main@x,c
   870  00F5C2                     l2144:
   871  00F5C2  0E03               	movlw	3
   872  00F5C4  6434               	cpfsgt	main@x,c
   873  00F5C6  D001               	goto	l67
   874  00F5C8  D00E               	goto	u2090
   875  00F5CA                     l67:
   876                           
   877                           ;main.c: 120: digitalOutHyst[x] = 0x0000;
   878  00F5CA  5034               	movf	main@x,w,c
   879  00F5CC  0D02               	mullw	2
   880  00F5CE  0E39               	movlw	low _digitalOutHyst
   881  00F5D0  24F3               	addwf	prodl,w,c
   882  00F5D2  6ED9               	movwf	fsr2l,c
   883  00F5D4  0E00               	movlw	high _digitalOutHyst
   884  00F5D6  20F4               	addwfc	prodh,w,c
   885  00F5D8  6EDA               	movwf	fsr2h,c
   886  00F5DA  0E00               	movlw	0
   887  00F5DC  6EDE               	movwf	postinc2,c
   888  00F5DE  0E00               	movlw	0
   889  00F5E0  6EDD               	movwf	postdec2,c
   890  00F5E2  2A34               	incf	main@x,f,c
   891  00F5E4  D7EE               	goto	l2144
   892  00F5E6                     u2090:
   893                           
   894                           ;main.c: 121: }
   895                           ;main.c: 124: c=0;
   896  00F5E6  0E00               	movlw	0
   897  00F5E8  6E38               	movwf	main@c,c
   898                           
   899                           ;main.c: 125: galaxyCommands[c].word_count = 0;
   900  00F5EA  5038               	movf	main@c,w,c
   901  00F5EC  0D2B               	mullw	43
   902  00F5EE  0E28               	movlw	40
   903  00F5F0  26F3               	addwf	prodl,f,c
   904  00F5F2  0E00               	movlw	0
   905  00F5F4  22F4               	addwfc	prodh,f,c
   906  00F5F6  0E60               	movlw	low _galaxyCommands
   907  00F5F8  24F3               	addwf	prodl,w,c
   908  00F5FA  6ED9               	movwf	fsr2l,c
   909  00F5FC  0E00               	movlw	high _galaxyCommands
   910  00F5FE  20F4               	addwfc	prodh,w,c
   911  00F600  6EDA               	movwf	fsr2h,c
   912  00F602  0E00               	movlw	0
   913  00F604  6EDF               	movwf	indf2,c
   914                           
   915                           ;main.c: 126: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x01FF;
   916  00F606  5038               	movf	main@c,w,c
   917  00F608  0D2B               	mullw	43
   918  00F60A  0E60               	movlw	low _galaxyCommands
   919  00F60C  6E21               	movwf	??_main& (0+255),c
   920  00F60E  0E00               	movlw	high _galaxyCommands
   921  00F610  6E22               	movwf	(??_main+1)& (0+255),c
   922  00F612  50F3               	movf	prodl,w,c
   923  00F614  2621               	addwf	??_main,f,c
   924  00F616  50F4               	movf	prodh,w,c
   925  00F618  2222               	addwfc	??_main+1,f,c
   926  00F61A  5038               	movf	main@c,w,c
   927  00F61C  0D2B               	mullw	43
   928  00F61E  0E28               	movlw	40
   929  00F620  26F3               	addwf	prodl,f,c
   930  00F622  0E00               	movlw	0
   931  00F624  22F4               	addwfc	prodh,f,c
   932  00F626  0E60               	movlw	low _galaxyCommands
   933  00F628  24F3               	addwf	prodl,w,c
   934  00F62A  6ED9               	movwf	fsr2l,c
   935  00F62C  0E00               	movlw	high _galaxyCommands
   936  00F62E  20F4               	addwfc	prodh,w,c
   937  00F630  6EDA               	movwf	fsr2h,c
   938  00F632  50DF               	movf	indf2,w,c
   939  00F634  6E23               	movwf	(??_main+2)& (0+255),c
   940  00F636  5023               	movf	??_main+2,w,c
   941  00F638  0D02               	mullw	2
   942  00F63A  50F3               	movf	prodl,w,c
   943  00F63C  2421               	addwf	??_main,w,c
   944  00F63E  6ED9               	movwf	fsr2l,c
   945  00F640  50F4               	movf	prodh,w,c
   946  00F642  2022               	addwfc	??_main+1,w,c
   947  00F644  6EDA               	movwf	fsr2h,c
   948  00F646  0EFF               	movlw	255
   949  00F648  6EDE               	movwf	postinc2,c
   950  00F64A  0E01               	movlw	1
   951  00F64C  6EDD               	movwf	postdec2,c
   952  00F64E  5038               	movf	main@c,w,c
   953  00F650  0D2B               	mullw	43
   954  00F652  0E28               	movlw	40
   955  00F654  26F3               	addwf	prodl,f,c
   956  00F656  0E00               	movlw	0
   957  00F658  22F4               	addwfc	prodh,f,c
   958  00F65A  0E60               	movlw	low _galaxyCommands
   959  00F65C  24F3               	addwf	prodl,w,c
   960  00F65E  6ED9               	movwf	fsr2l,c
   961  00F660  0E00               	movlw	high _galaxyCommands
   962  00F662  20F4               	addwfc	prodh,w,c
   963  00F664  6EDA               	movwf	fsr2h,c
   964  00F666  2ADF               	incf	indf2,f,c
   965                           
   966                           ;main.c: 127: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x0007;
   967  00F668  5038               	movf	main@c,w,c
   968  00F66A  0D2B               	mullw	43
   969  00F66C  0E60               	movlw	low _galaxyCommands
   970  00F66E  6E21               	movwf	??_main& (0+255),c
   971  00F670  0E00               	movlw	high _galaxyCommands
   972  00F672  6E22               	movwf	(??_main+1)& (0+255),c
   973  00F674  50F3               	movf	prodl,w,c
   974  00F676  2621               	addwf	??_main,f,c
   975  00F678  50F4               	movf	prodh,w,c
   976  00F67A  2222               	addwfc	??_main+1,f,c
   977  00F67C  5038               	movf	main@c,w,c
   978  00F67E  0D2B               	mullw	43
   979  00F680  0E28               	movlw	40
   980  00F682  26F3               	addwf	prodl,f,c
   981  00F684  0E00               	movlw	0
   982  00F686  22F4               	addwfc	prodh,f,c
   983  00F688  0E60               	movlw	low _galaxyCommands
   984  00F68A  24F3               	addwf	prodl,w,c
   985  00F68C  6ED9               	movwf	fsr2l,c
   986  00F68E  0E00               	movlw	high _galaxyCommands
   987  00F690  20F4               	addwfc	prodh,w,c
   988  00F692  6EDA               	movwf	fsr2h,c
   989  00F694  50DF               	movf	indf2,w,c
   990  00F696  6E23               	movwf	(??_main+2)& (0+255),c
   991  00F698  5023               	movf	??_main+2,w,c
   992  00F69A  0D02               	mullw	2
   993  00F69C  50F3               	movf	prodl,w,c
   994  00F69E  2421               	addwf	??_main,w,c
   995  00F6A0  6ED9               	movwf	fsr2l,c
   996  00F6A2  50F4               	movf	prodh,w,c
   997  00F6A4  2022               	addwfc	??_main+1,w,c
   998  00F6A6  6EDA               	movwf	fsr2h,c
   999  00F6A8  0E07               	movlw	7
  1000  00F6AA  6EDE               	movwf	postinc2,c
  1001  00F6AC  0E00               	movlw	0
  1002  00F6AE  6EDD               	movwf	postdec2,c
  1003  00F6B0  5038               	movf	main@c,w,c
  1004  00F6B2  0D2B               	mullw	43
  1005  00F6B4  0E28               	movlw	40
  1006  00F6B6  26F3               	addwf	prodl,f,c
  1007  00F6B8  0E00               	movlw	0
  1008  00F6BA  22F4               	addwfc	prodh,f,c
  1009  00F6BC  0E60               	movlw	low _galaxyCommands
  1010  00F6BE  24F3               	addwf	prodl,w,c
  1011  00F6C0  6ED9               	movwf	fsr2l,c
  1012  00F6C2  0E00               	movlw	high _galaxyCommands
  1013  00F6C4  20F4               	addwfc	prodh,w,c
  1014  00F6C6  6EDA               	movwf	fsr2h,c
  1015  00F6C8  2ADF               	incf	indf2,f,c
  1016                           
  1017                           ;main.c: 128: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x0057;
  1018  00F6CA  5038               	movf	main@c,w,c
  1019  00F6CC  0D2B               	mullw	43
  1020  00F6CE  0E60               	movlw	low _galaxyCommands
  1021  00F6D0  6E21               	movwf	??_main& (0+255),c
  1022  00F6D2  0E00               	movlw	high _galaxyCommands
  1023  00F6D4  6E22               	movwf	(??_main+1)& (0+255),c
  1024  00F6D6  50F3               	movf	prodl,w,c
  1025  00F6D8  2621               	addwf	??_main,f,c
  1026  00F6DA  50F4               	movf	prodh,w,c
  1027  00F6DC  2222               	addwfc	??_main+1,f,c
  1028  00F6DE  5038               	movf	main@c,w,c
  1029  00F6E0  0D2B               	mullw	43
  1030  00F6E2  0E28               	movlw	40
  1031  00F6E4  26F3               	addwf	prodl,f,c
  1032  00F6E6  0E00               	movlw	0
  1033  00F6E8  22F4               	addwfc	prodh,f,c
  1034  00F6EA  0E60               	movlw	low _galaxyCommands
  1035  00F6EC  24F3               	addwf	prodl,w,c
  1036  00F6EE  6ED9               	movwf	fsr2l,c
  1037  00F6F0  0E00               	movlw	high _galaxyCommands
  1038  00F6F2  20F4               	addwfc	prodh,w,c
  1039  00F6F4  6EDA               	movwf	fsr2h,c
  1040  00F6F6  50DF               	movf	indf2,w,c
  1041  00F6F8  6E23               	movwf	(??_main+2)& (0+255),c
  1042  00F6FA  5023               	movf	??_main+2,w,c
  1043  00F6FC  0D02               	mullw	2
  1044  00F6FE  50F3               	movf	prodl,w,c
  1045  00F700  2421               	addwf	??_main,w,c
  1046  00F702  6ED9               	movwf	fsr2l,c
  1047  00F704  50F4               	movf	prodh,w,c
  1048  00F706  2022               	addwfc	??_main+1,w,c
  1049  00F708  6EDA               	movwf	fsr2h,c
  1050  00F70A  0E57               	movlw	87
  1051  00F70C  6EDE               	movwf	postinc2,c
  1052  00F70E  0E00               	movlw	0
  1053  00F710  6EDD               	movwf	postdec2,c
  1054  00F712  5038               	movf	main@c,w,c
  1055  00F714  0D2B               	mullw	43
  1056  00F716  0E28               	movlw	40
  1057  00F718  26F3               	addwf	prodl,f,c
  1058  00F71A  0E00               	movlw	0
  1059  00F71C  22F4               	addwfc	prodh,f,c
  1060  00F71E  0E60               	movlw	low _galaxyCommands
  1061  00F720  24F3               	addwf	prodl,w,c
  1062  00F722  6ED9               	movwf	fsr2l,c
  1063  00F724  0E00               	movlw	high _galaxyCommands
  1064  00F726  20F4               	addwfc	prodh,w,c
  1065  00F728  6EDA               	movwf	fsr2h,c
  1066  00F72A  2ADF               	incf	indf2,f,c
  1067                           
  1068                           ;main.c: 129: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x0004;
  1069  00F72C  5038               	movf	main@c,w,c
  1070  00F72E  0D2B               	mullw	43
  1071  00F730  0E60               	movlw	low _galaxyCommands
  1072  00F732  6E21               	movwf	??_main& (0+255),c
  1073  00F734  0E00               	movlw	high _galaxyCommands
  1074  00F736  6E22               	movwf	(??_main+1)& (0+255),c
  1075  00F738  50F3               	movf	prodl,w,c
  1076  00F73A  2621               	addwf	??_main,f,c
  1077  00F73C  50F4               	movf	prodh,w,c
  1078  00F73E  2222               	addwfc	??_main+1,f,c
  1079  00F740  5038               	movf	main@c,w,c
  1080  00F742  0D2B               	mullw	43
  1081  00F744  0E28               	movlw	40
  1082  00F746  26F3               	addwf	prodl,f,c
  1083  00F748  0E00               	movlw	0
  1084  00F74A  22F4               	addwfc	prodh,f,c
  1085  00F74C  0E60               	movlw	low _galaxyCommands
  1086  00F74E  24F3               	addwf	prodl,w,c
  1087  00F750  6ED9               	movwf	fsr2l,c
  1088  00F752  0E00               	movlw	high _galaxyCommands
  1089  00F754  20F4               	addwfc	prodh,w,c
  1090  00F756  6EDA               	movwf	fsr2h,c
  1091  00F758  50DF               	movf	indf2,w,c
  1092  00F75A  6E23               	movwf	(??_main+2)& (0+255),c
  1093  00F75C  5023               	movf	??_main+2,w,c
  1094  00F75E  0D02               	mullw	2
  1095  00F760  50F3               	movf	prodl,w,c
  1096  00F762  2421               	addwf	??_main,w,c
  1097  00F764  6ED9               	movwf	fsr2l,c
  1098  00F766  50F4               	movf	prodh,w,c
  1099  00F768  2022               	addwfc	??_main+1,w,c
  1100  00F76A  6EDA               	movwf	fsr2h,c
  1101  00F76C  0E04               	movlw	4
  1102  00F76E  6EDE               	movwf	postinc2,c
  1103  00F770  0E00               	movlw	0
  1104  00F772  6EDD               	movwf	postdec2,c
  1105  00F774  5038               	movf	main@c,w,c
  1106  00F776  0D2B               	mullw	43
  1107  00F778  0E28               	movlw	40
  1108  00F77A  26F3               	addwf	prodl,f,c
  1109  00F77C  0E00               	movlw	0
  1110  00F77E  22F4               	addwfc	prodh,f,c
  1111  00F780  0E60               	movlw	low _galaxyCommands
  1112  00F782  24F3               	addwf	prodl,w,c
  1113  00F784  6ED9               	movwf	fsr2l,c
  1114  00F786  0E00               	movlw	high _galaxyCommands
  1115  00F788  20F4               	addwfc	prodh,w,c
  1116  00F78A  6EDA               	movwf	fsr2h,c
  1117  00F78C  2ADF               	incf	indf2,f,c
  1118                           
  1119                           ;main.c: 130: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x0001;
  1120  00F78E  5038               	movf	main@c,w,c
  1121  00F790  0D2B               	mullw	43
  1122  00F792  0E60               	movlw	low _galaxyCommands
  1123  00F794  6E21               	movwf	??_main& (0+255),c
  1124  00F796  0E00               	movlw	high _galaxyCommands
  1125  00F798  6E22               	movwf	(??_main+1)& (0+255),c
  1126  00F79A  50F3               	movf	prodl,w,c
  1127  00F79C  2621               	addwf	??_main,f,c
  1128  00F79E  50F4               	movf	prodh,w,c
  1129  00F7A0  2222               	addwfc	??_main+1,f,c
  1130  00F7A2  5038               	movf	main@c,w,c
  1131  00F7A4  0D2B               	mullw	43
  1132  00F7A6  0E28               	movlw	40
  1133  00F7A8  26F3               	addwf	prodl,f,c
  1134  00F7AA  0E00               	movlw	0
  1135  00F7AC  22F4               	addwfc	prodh,f,c
  1136  00F7AE  0E60               	movlw	low _galaxyCommands
  1137  00F7B0  24F3               	addwf	prodl,w,c
  1138  00F7B2  6ED9               	movwf	fsr2l,c
  1139  00F7B4  0E00               	movlw	high _galaxyCommands
  1140  00F7B6  20F4               	addwfc	prodh,w,c
  1141  00F7B8  6EDA               	movwf	fsr2h,c
  1142  00F7BA  50DF               	movf	indf2,w,c
  1143  00F7BC  6E23               	movwf	(??_main+2)& (0+255),c
  1144  00F7BE  5023               	movf	??_main+2,w,c
  1145  00F7C0  0D02               	mullw	2
  1146  00F7C2  50F3               	movf	prodl,w,c
  1147  00F7C4  2421               	addwf	??_main,w,c
  1148  00F7C6  6ED9               	movwf	fsr2l,c
  1149  00F7C8  50F4               	movf	prodh,w,c
  1150  00F7CA  2022               	addwfc	??_main+1,w,c
  1151  00F7CC  6EDA               	movwf	fsr2h,c
  1152  00F7CE  0E01               	movlw	1
  1153  00F7D0  6EDE               	movwf	postinc2,c
  1154  00F7D2  0E00               	movlw	0
  1155  00F7D4  6EDD               	movwf	postdec2,c
  1156  00F7D6  5038               	movf	main@c,w,c
  1157  00F7D8  0D2B               	mullw	43
  1158  00F7DA  0E28               	movlw	40
  1159  00F7DC  26F3               	addwf	prodl,f,c
  1160  00F7DE  0E00               	movlw	0
  1161  00F7E0  22F4               	addwfc	prodh,f,c
  1162  00F7E2  0E60               	movlw	low _galaxyCommands
  1163  00F7E4  24F3               	addwf	prodl,w,c
  1164  00F7E6  6ED9               	movwf	fsr2l,c
  1165  00F7E8  0E00               	movlw	high _galaxyCommands
  1166  00F7EA  20F4               	addwfc	prodh,w,c
  1167  00F7EC  6EDA               	movwf	fsr2h,c
  1168  00F7EE  2ADF               	incf	indf2,f,c
  1169                           
  1170                           ;main.c: 131: galaxyCommands[c].crc = compute_crc(&galaxyCommands[c].buffer[0], galaxyCo
      +                          mmands[c].word_count);
  1171  00F7F0  5038               	movf	main@c,w,c
  1172  00F7F2  0D2B               	mullw	43
  1173  00F7F4  0E60               	movlw	low _galaxyCommands
  1174  00F7F6  24F3               	addwf	prodl,w,c
  1175  00F7F8  6E01               	movwf	compute_crc@ptr_msg_body,c
  1176  00F7FA  0E00               	movlw	high _galaxyCommands
  1177  00F7FC  20F4               	addwfc	prodh,w,c
  1178  00F7FE  6E02               	movwf	compute_crc@ptr_msg_body+1,c
  1179  00F800  5038               	movf	main@c,w,c
  1180  00F802  0D2B               	mullw	43
  1181  00F804  0E28               	movlw	40
  1182  00F806  26F3               	addwf	prodl,f,c
  1183  00F808  0E00               	movlw	0
  1184  00F80A  22F4               	addwfc	prodh,f,c
  1185  00F80C  0E60               	movlw	low _galaxyCommands
  1186  00F80E  24F3               	addwf	prodl,w,c
  1187  00F810  6ED9               	movwf	fsr2l,c
  1188  00F812  0E00               	movlw	high _galaxyCommands
  1189  00F814  20F4               	addwfc	prodh,w,c
  1190  00F816  6EDA               	movwf	fsr2h,c
  1191  00F818  50DF               	movf	indf2,w,c
  1192  00F81A  6E21               	movwf	??_main& (0+255),c
  1193  00F81C  5021               	movf	??_main,w,c
  1194  00F81E  6E03               	movwf	compute_crc@len_body,c
  1195  00F820  6A04               	clrf	compute_crc@len_body+1,c
  1196  00F822  EC06  F077         	call	_compute_crc	;wreg free
  1197  00F826  5038               	movf	main@c,w,c
  1198  00F828  0D2B               	mullw	43
  1199  00F82A  0E29               	movlw	41
  1200  00F82C  26F3               	addwf	prodl,f,c
  1201  00F82E  0E00               	movlw	0
  1202  00F830  22F4               	addwfc	prodh,f,c
  1203  00F832  0E60               	movlw	low _galaxyCommands
  1204  00F834  24F3               	addwf	prodl,w,c
  1205  00F836  6ED9               	movwf	fsr2l,c
  1206  00F838  0E00               	movlw	high _galaxyCommands
  1207  00F83A  20F4               	addwfc	prodh,w,c
  1208  00F83C  6EDA               	movwf	fsr2h,c
  1209  00F83E  C001  FFDE         	movff	?_compute_crc,postinc2
  1210  00F842  C002  FFDD         	movff	?_compute_crc+1,postdec2
  1211                           
  1212                           ;main.c: 134: c=1;
  1213  00F846  0E01               	movlw	1
  1214  00F848  6E38               	movwf	main@c,c
  1215                           
  1216                           ;main.c: 135: galaxyCommands[c].word_count = 0;
  1217  00F84A  5038               	movf	main@c,w,c
  1218  00F84C  0D2B               	mullw	43
  1219  00F84E  0E28               	movlw	40
  1220  00F850  26F3               	addwf	prodl,f,c
  1221  00F852  0E00               	movlw	0
  1222  00F854  22F4               	addwfc	prodh,f,c
  1223  00F856  0E60               	movlw	low _galaxyCommands
  1224  00F858  24F3               	addwf	prodl,w,c
  1225  00F85A  6ED9               	movwf	fsr2l,c
  1226  00F85C  0E00               	movlw	high _galaxyCommands
  1227  00F85E  20F4               	addwfc	prodh,w,c
  1228  00F860  6EDA               	movwf	fsr2h,c
  1229  00F862  0E00               	movlw	0
  1230  00F864  6EDF               	movwf	indf2,c
  1231                           
  1232                           ;main.c: 136: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x01FF;
  1233  00F866  5038               	movf	main@c,w,c
  1234  00F868  0D2B               	mullw	43
  1235  00F86A  0E60               	movlw	low _galaxyCommands
  1236  00F86C  6E21               	movwf	??_main& (0+255),c
  1237  00F86E  0E00               	movlw	high _galaxyCommands
  1238  00F870  6E22               	movwf	(??_main+1)& (0+255),c
  1239  00F872  50F3               	movf	prodl,w,c
  1240  00F874  2621               	addwf	??_main,f,c
  1241  00F876  50F4               	movf	prodh,w,c
  1242  00F878  2222               	addwfc	??_main+1,f,c
  1243  00F87A  5038               	movf	main@c,w,c
  1244  00F87C  0D2B               	mullw	43
  1245  00F87E  0E28               	movlw	40
  1246  00F880  26F3               	addwf	prodl,f,c
  1247  00F882  0E00               	movlw	0
  1248  00F884  22F4               	addwfc	prodh,f,c
  1249  00F886  0E60               	movlw	low _galaxyCommands
  1250  00F888  24F3               	addwf	prodl,w,c
  1251  00F88A  6ED9               	movwf	fsr2l,c
  1252  00F88C  0E00               	movlw	high _galaxyCommands
  1253  00F88E  20F4               	addwfc	prodh,w,c
  1254  00F890  6EDA               	movwf	fsr2h,c
  1255  00F892  50DF               	movf	indf2,w,c
  1256  00F894  6E23               	movwf	(??_main+2)& (0+255),c
  1257  00F896  5023               	movf	??_main+2,w,c
  1258  00F898  0D02               	mullw	2
  1259  00F89A  50F3               	movf	prodl,w,c
  1260  00F89C  2421               	addwf	??_main,w,c
  1261  00F89E  6ED9               	movwf	fsr2l,c
  1262  00F8A0  50F4               	movf	prodh,w,c
  1263  00F8A2  2022               	addwfc	??_main+1,w,c
  1264  00F8A4  6EDA               	movwf	fsr2h,c
  1265  00F8A6  0EFF               	movlw	255
  1266  00F8A8  6EDE               	movwf	postinc2,c
  1267  00F8AA  0E01               	movlw	1
  1268  00F8AC  6EDD               	movwf	postdec2,c
  1269  00F8AE  5038               	movf	main@c,w,c
  1270  00F8B0  0D2B               	mullw	43
  1271  00F8B2  0E28               	movlw	40
  1272  00F8B4  26F3               	addwf	prodl,f,c
  1273  00F8B6  0E00               	movlw	0
  1274  00F8B8  22F4               	addwfc	prodh,f,c
  1275  00F8BA  0E60               	movlw	low _galaxyCommands
  1276  00F8BC  24F3               	addwf	prodl,w,c
  1277  00F8BE  6ED9               	movwf	fsr2l,c
  1278  00F8C0  0E00               	movlw	high _galaxyCommands
  1279  00F8C2  20F4               	addwfc	prodh,w,c
  1280  00F8C4  6EDA               	movwf	fsr2h,c
  1281  00F8C6  2ADF               	incf	indf2,f,c
  1282                           
  1283                           ;main.c: 137: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x0006;
  1284  00F8C8  5038               	movf	main@c,w,c
  1285  00F8CA  0D2B               	mullw	43
  1286  00F8CC  0E60               	movlw	low _galaxyCommands
  1287  00F8CE  6E21               	movwf	??_main& (0+255),c
  1288  00F8D0  0E00               	movlw	high _galaxyCommands
  1289  00F8D2  6E22               	movwf	(??_main+1)& (0+255),c
  1290  00F8D4  50F3               	movf	prodl,w,c
  1291  00F8D6  2621               	addwf	??_main,f,c
  1292  00F8D8  50F4               	movf	prodh,w,c
  1293  00F8DA  2222               	addwfc	??_main+1,f,c
  1294  00F8DC  5038               	movf	main@c,w,c
  1295  00F8DE  0D2B               	mullw	43
  1296  00F8E0  0E28               	movlw	40
  1297  00F8E2  26F3               	addwf	prodl,f,c
  1298  00F8E4  0E00               	movlw	0
  1299  00F8E6  22F4               	addwfc	prodh,f,c
  1300  00F8E8  0E60               	movlw	low _galaxyCommands
  1301  00F8EA  24F3               	addwf	prodl,w,c
  1302  00F8EC  6ED9               	movwf	fsr2l,c
  1303  00F8EE  0E00               	movlw	high _galaxyCommands
  1304  00F8F0  20F4               	addwfc	prodh,w,c
  1305  00F8F2  6EDA               	movwf	fsr2h,c
  1306  00F8F4  50DF               	movf	indf2,w,c
  1307  00F8F6  6E23               	movwf	(??_main+2)& (0+255),c
  1308  00F8F8  5023               	movf	??_main+2,w,c
  1309  00F8FA  0D02               	mullw	2
  1310  00F8FC  50F3               	movf	prodl,w,c
  1311  00F8FE  2421               	addwf	??_main,w,c
  1312  00F900  6ED9               	movwf	fsr2l,c
  1313  00F902  50F4               	movf	prodh,w,c
  1314  00F904  2022               	addwfc	??_main+1,w,c
  1315  00F906  6EDA               	movwf	fsr2h,c
  1316  00F908  0E06               	movlw	6
  1317  00F90A  6EDE               	movwf	postinc2,c
  1318  00F90C  0E00               	movlw	0
  1319  00F90E  6EDD               	movwf	postdec2,c
  1320  00F910  5038               	movf	main@c,w,c
  1321  00F912  0D2B               	mullw	43
  1322  00F914  0E28               	movlw	40
  1323  00F916  26F3               	addwf	prodl,f,c
  1324  00F918  0E00               	movlw	0
  1325  00F91A  22F4               	addwfc	prodh,f,c
  1326  00F91C  0E60               	movlw	low _galaxyCommands
  1327  00F91E  24F3               	addwf	prodl,w,c
  1328  00F920  6ED9               	movwf	fsr2l,c
  1329  00F922  0E00               	movlw	high _galaxyCommands
  1330  00F924  20F4               	addwfc	prodh,w,c
  1331  00F926  6EDA               	movwf	fsr2h,c
  1332  00F928  2ADF               	incf	indf2,f,c
  1333                           
  1334                           ;main.c: 138: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x0043;
  1335  00F92A  5038               	movf	main@c,w,c
  1336  00F92C  0D2B               	mullw	43
  1337  00F92E  0E60               	movlw	low _galaxyCommands
  1338  00F930  6E21               	movwf	??_main& (0+255),c
  1339  00F932  0E00               	movlw	high _galaxyCommands
  1340  00F934  6E22               	movwf	(??_main+1)& (0+255),c
  1341  00F936  50F3               	movf	prodl,w,c
  1342  00F938  2621               	addwf	??_main,f,c
  1343  00F93A  50F4               	movf	prodh,w,c
  1344  00F93C  2222               	addwfc	??_main+1,f,c
  1345  00F93E  5038               	movf	main@c,w,c
  1346  00F940  0D2B               	mullw	43
  1347  00F942  0E28               	movlw	40
  1348  00F944  26F3               	addwf	prodl,f,c
  1349  00F946  0E00               	movlw	0
  1350  00F948  22F4               	addwfc	prodh,f,c
  1351  00F94A  0E60               	movlw	low _galaxyCommands
  1352  00F94C  24F3               	addwf	prodl,w,c
  1353  00F94E  6ED9               	movwf	fsr2l,c
  1354  00F950  0E00               	movlw	high _galaxyCommands
  1355  00F952  20F4               	addwfc	prodh,w,c
  1356  00F954  6EDA               	movwf	fsr2h,c
  1357  00F956  50DF               	movf	indf2,w,c
  1358  00F958  6E23               	movwf	(??_main+2)& (0+255),c
  1359  00F95A  5023               	movf	??_main+2,w,c
  1360  00F95C  0D02               	mullw	2
  1361  00F95E  50F3               	movf	prodl,w,c
  1362  00F960  2421               	addwf	??_main,w,c
  1363  00F962  6ED9               	movwf	fsr2l,c
  1364  00F964  50F4               	movf	prodh,w,c
  1365  00F966  2022               	addwfc	??_main+1,w,c
  1366  00F968  6EDA               	movwf	fsr2h,c
  1367  00F96A  0E43               	movlw	67
  1368  00F96C  6EDE               	movwf	postinc2,c
  1369  00F96E  0E00               	movlw	0
  1370  00F970  6EDD               	movwf	postdec2,c
  1371  00F972  5038               	movf	main@c,w,c
  1372  00F974  0D2B               	mullw	43
  1373  00F976  0E28               	movlw	40
  1374  00F978  26F3               	addwf	prodl,f,c
  1375  00F97A  0E00               	movlw	0
  1376  00F97C  22F4               	addwfc	prodh,f,c
  1377  00F97E  0E60               	movlw	low _galaxyCommands
  1378  00F980  24F3               	addwf	prodl,w,c
  1379  00F982  6ED9               	movwf	fsr2l,c
  1380  00F984  0E00               	movlw	high _galaxyCommands
  1381  00F986  20F4               	addwfc	prodh,w,c
  1382  00F988  6EDA               	movwf	fsr2h,c
  1383  00F98A  2ADF               	incf	indf2,f,c
  1384                           
  1385                           ;main.c: 139: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = (1 - 1);
  1386  00F98C  5038               	movf	main@c,w,c
  1387  00F98E  0D2B               	mullw	43
  1388  00F990  0E60               	movlw	low _galaxyCommands
  1389  00F992  6E21               	movwf	??_main& (0+255),c
  1390  00F994  0E00               	movlw	high _galaxyCommands
  1391  00F996  6E22               	movwf	(??_main+1)& (0+255),c
  1392  00F998  50F3               	movf	prodl,w,c
  1393  00F99A  2621               	addwf	??_main,f,c
  1394  00F99C  50F4               	movf	prodh,w,c
  1395  00F99E  2222               	addwfc	??_main+1,f,c
  1396  00F9A0  5038               	movf	main@c,w,c
  1397  00F9A2  0D2B               	mullw	43
  1398  00F9A4  0E28               	movlw	40
  1399  00F9A6  26F3               	addwf	prodl,f,c
  1400  00F9A8  0E00               	movlw	0
  1401  00F9AA  22F4               	addwfc	prodh,f,c
  1402  00F9AC  0E60               	movlw	low _galaxyCommands
  1403  00F9AE  24F3               	addwf	prodl,w,c
  1404  00F9B0  6ED9               	movwf	fsr2l,c
  1405  00F9B2  0E00               	movlw	high _galaxyCommands
  1406  00F9B4  20F4               	addwfc	prodh,w,c
  1407  00F9B6  6EDA               	movwf	fsr2h,c
  1408  00F9B8  50DF               	movf	indf2,w,c
  1409  00F9BA  6E23               	movwf	(??_main+2)& (0+255),c
  1410  00F9BC  5023               	movf	??_main+2,w,c
  1411  00F9BE  0D02               	mullw	2
  1412  00F9C0  50F3               	movf	prodl,w,c
  1413  00F9C2  2421               	addwf	??_main,w,c
  1414  00F9C4  6ED9               	movwf	fsr2l,c
  1415  00F9C6  50F4               	movf	prodh,w,c
  1416  00F9C8  2022               	addwfc	??_main+1,w,c
  1417  00F9CA  6EDA               	movwf	fsr2h,c
  1418  00F9CC  0E00               	movlw	0
  1419  00F9CE  6EDE               	movwf	postinc2,c
  1420  00F9D0  0E00               	movlw	0
  1421  00F9D2  6EDD               	movwf	postdec2,c
  1422  00F9D4  5038               	movf	main@c,w,c
  1423  00F9D6  0D2B               	mullw	43
  1424  00F9D8  0E28               	movlw	40
  1425  00F9DA  26F3               	addwf	prodl,f,c
  1426  00F9DC  0E00               	movlw	0
  1427  00F9DE  22F4               	addwfc	prodh,f,c
  1428  00F9E0  0E60               	movlw	low _galaxyCommands
  1429  00F9E2  24F3               	addwf	prodl,w,c
  1430  00F9E4  6ED9               	movwf	fsr2l,c
  1431  00F9E6  0E00               	movlw	high _galaxyCommands
  1432  00F9E8  20F4               	addwfc	prodh,w,c
  1433  00F9EA  6EDA               	movwf	fsr2h,c
  1434  00F9EC  2ADF               	incf	indf2,f,c
  1435                           
  1436                           ;main.c: 140: galaxyCommands[c].crc = compute_crc(&galaxyCommands[c].buffer[0], galaxyCo
      +                          mmands[c].word_count);
  1437  00F9EE  5038               	movf	main@c,w,c
  1438  00F9F0  0D2B               	mullw	43
  1439  00F9F2  0E60               	movlw	low _galaxyCommands
  1440  00F9F4  24F3               	addwf	prodl,w,c
  1441  00F9F6  6E01               	movwf	compute_crc@ptr_msg_body,c
  1442  00F9F8  0E00               	movlw	high _galaxyCommands
  1443  00F9FA  20F4               	addwfc	prodh,w,c
  1444  00F9FC  6E02               	movwf	compute_crc@ptr_msg_body+1,c
  1445  00F9FE  5038               	movf	main@c,w,c
  1446  00FA00  0D2B               	mullw	43
  1447  00FA02  0E28               	movlw	40
  1448  00FA04  26F3               	addwf	prodl,f,c
  1449  00FA06  0E00               	movlw	0
  1450  00FA08  22F4               	addwfc	prodh,f,c
  1451  00FA0A  0E60               	movlw	low _galaxyCommands
  1452  00FA0C  24F3               	addwf	prodl,w,c
  1453  00FA0E  6ED9               	movwf	fsr2l,c
  1454  00FA10  0E00               	movlw	high _galaxyCommands
  1455  00FA12  20F4               	addwfc	prodh,w,c
  1456  00FA14  6EDA               	movwf	fsr2h,c
  1457  00FA16  50DF               	movf	indf2,w,c
  1458  00FA18  6E21               	movwf	??_main& (0+255),c
  1459  00FA1A  5021               	movf	??_main,w,c
  1460  00FA1C  6E03               	movwf	compute_crc@len_body,c
  1461  00FA1E  6A04               	clrf	compute_crc@len_body+1,c
  1462  00FA20  EC06  F077         	call	_compute_crc	;wreg free
  1463  00FA24  5038               	movf	main@c,w,c
  1464  00FA26  0D2B               	mullw	43
  1465  00FA28  0E29               	movlw	41
  1466  00FA2A  26F3               	addwf	prodl,f,c
  1467  00FA2C  0E00               	movlw	0
  1468  00FA2E  22F4               	addwfc	prodh,f,c
  1469  00FA30  0E60               	movlw	low _galaxyCommands
  1470  00FA32  24F3               	addwf	prodl,w,c
  1471  00FA34  6ED9               	movwf	fsr2l,c
  1472  00FA36  0E00               	movlw	high _galaxyCommands
  1473  00FA38  20F4               	addwfc	prodh,w,c
  1474  00FA3A  6EDA               	movwf	fsr2h,c
  1475  00FA3C  C001  FFDE         	movff	?_compute_crc,postinc2
  1476  00FA40  C002  FFDD         	movff	?_compute_crc+1,postdec2
  1477                           
  1478                           ;main.c: 143: for (unsigned char slot=0; slot <= 1; slot++) {
  1479  00FA44  0E00               	movlw	0
  1480  00FA46  6E35               	movwf	main@slot,c
  1481  00FA48                     l2202:
  1482  00FA48  0E01               	movlw	1
  1483  00FA4A  6435               	cpfsgt	main@slot,c
  1484  00FA4C  D001               	goto	l69
  1485  00FA4E  D103               	goto	u2110
  1486  00FA50                     l69:
  1487                           
  1488                           ;main.c: 144: c++;
  1489  00FA50  2A38               	incf	main@c,f,c
  1490                           
  1491                           ;main.c: 145: galaxyCommands[c].word_count = 0;
  1492  00FA52  5038               	movf	main@c,w,c
  1493  00FA54  0D2B               	mullw	43
  1494  00FA56  0E28               	movlw	40
  1495  00FA58  26F3               	addwf	prodl,f,c
  1496  00FA5A  0E00               	movlw	0
  1497  00FA5C  22F4               	addwfc	prodh,f,c
  1498  00FA5E  0E60               	movlw	low _galaxyCommands
  1499  00FA60  24F3               	addwf	prodl,w,c
  1500  00FA62  6ED9               	movwf	fsr2l,c
  1501  00FA64  0E00               	movlw	high _galaxyCommands
  1502  00FA66  20F4               	addwfc	prodh,w,c
  1503  00FA68  6EDA               	movwf	fsr2h,c
  1504  00FA6A  0E00               	movlw	0
  1505  00FA6C  6EDF               	movwf	indf2,c
  1506                           
  1507                           ;main.c: 146: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x01FF;
  1508  00FA6E  5038               	movf	main@c,w,c
  1509  00FA70  0D2B               	mullw	43
  1510  00FA72  0E60               	movlw	low _galaxyCommands
  1511  00FA74  6E21               	movwf	??_main& (0+255),c
  1512  00FA76  0E00               	movlw	high _galaxyCommands
  1513  00FA78  6E22               	movwf	(??_main+1)& (0+255),c
  1514  00FA7A  50F3               	movf	prodl,w,c
  1515  00FA7C  2621               	addwf	??_main,f,c
  1516  00FA7E  50F4               	movf	prodh,w,c
  1517  00FA80  2222               	addwfc	??_main+1,f,c
  1518  00FA82  5038               	movf	main@c,w,c
  1519  00FA84  0D2B               	mullw	43
  1520  00FA86  0E28               	movlw	40
  1521  00FA88  26F3               	addwf	prodl,f,c
  1522  00FA8A  0E00               	movlw	0
  1523  00FA8C  22F4               	addwfc	prodh,f,c
  1524  00FA8E  0E60               	movlw	low _galaxyCommands
  1525  00FA90  24F3               	addwf	prodl,w,c
  1526  00FA92  6ED9               	movwf	fsr2l,c
  1527  00FA94  0E00               	movlw	high _galaxyCommands
  1528  00FA96  20F4               	addwfc	prodh,w,c
  1529  00FA98  6EDA               	movwf	fsr2h,c
  1530  00FA9A  50DF               	movf	indf2,w,c
  1531  00FA9C  6E23               	movwf	(??_main+2)& (0+255),c
  1532  00FA9E  5023               	movf	??_main+2,w,c
  1533  00FAA0  0D02               	mullw	2
  1534  00FAA2  50F3               	movf	prodl,w,c
  1535  00FAA4  2421               	addwf	??_main,w,c
  1536  00FAA6  6ED9               	movwf	fsr2l,c
  1537  00FAA8  50F4               	movf	prodh,w,c
  1538  00FAAA  2022               	addwfc	??_main+1,w,c
  1539  00FAAC  6EDA               	movwf	fsr2h,c
  1540  00FAAE  0EFF               	movlw	255
  1541  00FAB0  6EDE               	movwf	postinc2,c
  1542  00FAB2  0E01               	movlw	1
  1543  00FAB4  6EDD               	movwf	postdec2,c
  1544  00FAB6  5038               	movf	main@c,w,c
  1545  00FAB8  0D2B               	mullw	43
  1546  00FABA  0E28               	movlw	40
  1547  00FABC  26F3               	addwf	prodl,f,c
  1548  00FABE  0E00               	movlw	0
  1549  00FAC0  22F4               	addwfc	prodh,f,c
  1550  00FAC2  0E60               	movlw	low _galaxyCommands
  1551  00FAC4  24F3               	addwf	prodl,w,c
  1552  00FAC6  6ED9               	movwf	fsr2l,c
  1553  00FAC8  0E00               	movlw	high _galaxyCommands
  1554  00FACA  20F4               	addwfc	prodh,w,c
  1555  00FACC  6EDA               	movwf	fsr2h,c
  1556  00FACE  2ADF               	incf	indf2,f,c
  1557                           
  1558                           ;main.c: 147: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x0006;
  1559  00FAD0  5038               	movf	main@c,w,c
  1560  00FAD2  0D2B               	mullw	43
  1561  00FAD4  0E60               	movlw	low _galaxyCommands
  1562  00FAD6  6E21               	movwf	??_main& (0+255),c
  1563  00FAD8  0E00               	movlw	high _galaxyCommands
  1564  00FADA  6E22               	movwf	(??_main+1)& (0+255),c
  1565  00FADC  50F3               	movf	prodl,w,c
  1566  00FADE  2621               	addwf	??_main,f,c
  1567  00FAE0  50F4               	movf	prodh,w,c
  1568  00FAE2  2222               	addwfc	??_main+1,f,c
  1569  00FAE4  5038               	movf	main@c,w,c
  1570  00FAE6  0D2B               	mullw	43
  1571  00FAE8  0E28               	movlw	40
  1572  00FAEA  26F3               	addwf	prodl,f,c
  1573  00FAEC  0E00               	movlw	0
  1574  00FAEE  22F4               	addwfc	prodh,f,c
  1575  00FAF0  0E60               	movlw	low _galaxyCommands
  1576  00FAF2  24F3               	addwf	prodl,w,c
  1577  00FAF4  6ED9               	movwf	fsr2l,c
  1578  00FAF6  0E00               	movlw	high _galaxyCommands
  1579  00FAF8  20F4               	addwfc	prodh,w,c
  1580  00FAFA  6EDA               	movwf	fsr2h,c
  1581  00FAFC  50DF               	movf	indf2,w,c
  1582  00FAFE  6E23               	movwf	(??_main+2)& (0+255),c
  1583  00FB00  5023               	movf	??_main+2,w,c
  1584  00FB02  0D02               	mullw	2
  1585  00FB04  50F3               	movf	prodl,w,c
  1586  00FB06  2421               	addwf	??_main,w,c
  1587  00FB08  6ED9               	movwf	fsr2l,c
  1588  00FB0A  50F4               	movf	prodh,w,c
  1589  00FB0C  2022               	addwfc	??_main+1,w,c
  1590  00FB0E  6EDA               	movwf	fsr2h,c
  1591  00FB10  0E06               	movlw	6
  1592  00FB12  6EDE               	movwf	postinc2,c
  1593  00FB14  0E00               	movlw	0
  1594  00FB16  6EDD               	movwf	postdec2,c
  1595  00FB18  5038               	movf	main@c,w,c
  1596  00FB1A  0D2B               	mullw	43
  1597  00FB1C  0E28               	movlw	40
  1598  00FB1E  26F3               	addwf	prodl,f,c
  1599  00FB20  0E00               	movlw	0
  1600  00FB22  22F4               	addwfc	prodh,f,c
  1601  00FB24  0E60               	movlw	low _galaxyCommands
  1602  00FB26  24F3               	addwf	prodl,w,c
  1603  00FB28  6ED9               	movwf	fsr2l,c
  1604  00FB2A  0E00               	movlw	high _galaxyCommands
  1605  00FB2C  20F4               	addwfc	prodh,w,c
  1606  00FB2E  6EDA               	movwf	fsr2h,c
  1607  00FB30  2ADF               	incf	indf2,f,c
  1608                           
  1609                           ;main.c: 148: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = 0x0050;
  1610  00FB32  5038               	movf	main@c,w,c
  1611  00FB34  0D2B               	mullw	43
  1612  00FB36  0E60               	movlw	low _galaxyCommands
  1613  00FB38  6E21               	movwf	??_main& (0+255),c
  1614  00FB3A  0E00               	movlw	high _galaxyCommands
  1615  00FB3C  6E22               	movwf	(??_main+1)& (0+255),c
  1616  00FB3E  50F3               	movf	prodl,w,c
  1617  00FB40  2621               	addwf	??_main,f,c
  1618  00FB42  50F4               	movf	prodh,w,c
  1619  00FB44  2222               	addwfc	??_main+1,f,c
  1620  00FB46  5038               	movf	main@c,w,c
  1621  00FB48  0D2B               	mullw	43
  1622  00FB4A  0E28               	movlw	40
  1623  00FB4C  26F3               	addwf	prodl,f,c
  1624  00FB4E  0E00               	movlw	0
  1625  00FB50  22F4               	addwfc	prodh,f,c
  1626  00FB52  0E60               	movlw	low _galaxyCommands
  1627  00FB54  24F3               	addwf	prodl,w,c
  1628  00FB56  6ED9               	movwf	fsr2l,c
  1629  00FB58  0E00               	movlw	high _galaxyCommands
  1630  00FB5A  20F4               	addwfc	prodh,w,c
  1631  00FB5C  6EDA               	movwf	fsr2h,c
  1632  00FB5E  50DF               	movf	indf2,w,c
  1633  00FB60  6E23               	movwf	(??_main+2)& (0+255),c
  1634  00FB62  5023               	movf	??_main+2,w,c
  1635  00FB64  0D02               	mullw	2
  1636  00FB66  50F3               	movf	prodl,w,c
  1637  00FB68  2421               	addwf	??_main,w,c
  1638  00FB6A  6ED9               	movwf	fsr2l,c
  1639  00FB6C  50F4               	movf	prodh,w,c
  1640  00FB6E  2022               	addwfc	??_main+1,w,c
  1641  00FB70  6EDA               	movwf	fsr2h,c
  1642  00FB72  0E50               	movlw	80
  1643  00FB74  6EDE               	movwf	postinc2,c
  1644  00FB76  0E00               	movlw	0
  1645  00FB78  6EDD               	movwf	postdec2,c
  1646  00FB7A  5038               	movf	main@c,w,c
  1647  00FB7C  0D2B               	mullw	43
  1648  00FB7E  0E28               	movlw	40
  1649  00FB80  26F3               	addwf	prodl,f,c
  1650  00FB82  0E00               	movlw	0
  1651  00FB84  22F4               	addwfc	prodh,f,c
  1652  00FB86  0E60               	movlw	low _galaxyCommands
  1653  00FB88  24F3               	addwf	prodl,w,c
  1654  00FB8A  6ED9               	movwf	fsr2l,c
  1655  00FB8C  0E00               	movlw	high _galaxyCommands
  1656  00FB8E  20F4               	addwfc	prodh,w,c
  1657  00FB90  6EDA               	movwf	fsr2h,c
  1658  00FB92  2ADF               	incf	indf2,f,c
  1659                           
  1660                           ;main.c: 149: galaxyCommands[c].buffer[galaxyCommands[c].word_count++] = slot;
  1661  00FB94  5035               	movf	main@slot,w,c
  1662  00FB96  6E21               	movwf	??_main& (0+255),c
  1663  00FB98  6A22               	clrf	(??_main+1)& (0+255),c
  1664  00FB9A  5038               	movf	main@c,w,c
  1665  00FB9C  0D2B               	mullw	43
  1666  00FB9E  0E60               	movlw	low _galaxyCommands
  1667  00FBA0  6E23               	movwf	(??_main+2)& (0+255),c
  1668  00FBA2  0E00               	movlw	high _galaxyCommands
  1669  00FBA4  6E24               	movwf	(??_main+3)& (0+255),c
  1670  00FBA6  50F3               	movf	prodl,w,c
  1671  00FBA8  2623               	addwf	??_main+2,f,c
  1672  00FBAA  50F4               	movf	prodh,w,c
  1673  00FBAC  2224               	addwfc	??_main+3,f,c
  1674  00FBAE  5038               	movf	main@c,w,c
  1675  00FBB0  0D2B               	mullw	43
  1676  00FBB2  0E28               	movlw	40
  1677  00FBB4  26F3               	addwf	prodl,f,c
  1678  00FBB6  0E00               	movlw	0
  1679  00FBB8  22F4               	addwfc	prodh,f,c
  1680  00FBBA  0E60               	movlw	low _galaxyCommands
  1681  00FBBC  24F3               	addwf	prodl,w,c
  1682  00FBBE  6ED9               	movwf	fsr2l,c
  1683  00FBC0  0E00               	movlw	high _galaxyCommands
  1684  00FBC2  20F4               	addwfc	prodh,w,c
  1685  00FBC4  6EDA               	movwf	fsr2h,c
  1686  00FBC6  50DF               	movf	indf2,w,c
  1687  00FBC8  6E25               	movwf	(??_main+4)& (0+255),c
  1688  00FBCA  5025               	movf	??_main+4,w,c
  1689  00FBCC  0D02               	mullw	2
  1690  00FBCE  50F3               	movf	prodl,w,c
  1691  00FBD0  2423               	addwf	??_main+2,w,c
  1692  00FBD2  6ED9               	movwf	fsr2l,c
  1693  00FBD4  50F4               	movf	prodh,w,c
  1694  00FBD6  2024               	addwfc	??_main+3,w,c
  1695  00FBD8  6EDA               	movwf	fsr2h,c
  1696  00FBDA  C021  FFDE         	movff	??_main,postinc2
  1697  00FBDE  C022  FFDD         	movff	??_main+1,postdec2
  1698  00FBE2  5038               	movf	main@c,w,c
  1699  00FBE4  0D2B               	mullw	43
  1700  00FBE6  0E28               	movlw	40
  1701  00FBE8  26F3               	addwf	prodl,f,c
  1702  00FBEA  0E00               	movlw	0
  1703  00FBEC  22F4               	addwfc	prodh,f,c
  1704  00FBEE  0E60               	movlw	low _galaxyCommands
  1705  00FBF0  24F3               	addwf	prodl,w,c
  1706  00FBF2  6ED9               	movwf	fsr2l,c
  1707  00FBF4  0E00               	movlw	high _galaxyCommands
  1708  00FBF6  20F4               	addwfc	prodh,w,c
  1709  00FBF8  6EDA               	movwf	fsr2h,c
  1710  00FBFA  2ADF               	incf	indf2,f,c
  1711                           
  1712                           ;main.c: 150: galaxyCommands[c].crc = compute_crc(&galaxyCommands[c].buffer[0], galaxyCo
      +                          mmands[c].word_count);
  1713  00FBFC  5038               	movf	main@c,w,c
  1714  00FBFE  0D2B               	mullw	43
  1715  00FC00  0E60               	movlw	low _galaxyCommands
  1716  00FC02  24F3               	addwf	prodl,w,c
  1717  00FC04  6E01               	movwf	compute_crc@ptr_msg_body,c
  1718  00FC06  0E00               	movlw	high _galaxyCommands
  1719  00FC08  20F4               	addwfc	prodh,w,c
  1720  00FC0A  6E02               	movwf	compute_crc@ptr_msg_body+1,c
  1721  00FC0C  5038               	movf	main@c,w,c
  1722  00FC0E  0D2B               	mullw	43
  1723  00FC10  0E28               	movlw	40
  1724  00FC12  26F3               	addwf	prodl,f,c
  1725  00FC14  0E00               	movlw	0
  1726  00FC16  22F4               	addwfc	prodh,f,c
  1727  00FC18  0E60               	movlw	low _galaxyCommands
  1728  00FC1A  24F3               	addwf	prodl,w,c
  1729  00FC1C  6ED9               	movwf	fsr2l,c
  1730  00FC1E  0E00               	movlw	high _galaxyCommands
  1731  00FC20  20F4               	addwfc	prodh,w,c
  1732  00FC22  6EDA               	movwf	fsr2h,c
  1733  00FC24  50DF               	movf	indf2,w,c
  1734  00FC26  6E21               	movwf	??_main& (0+255),c
  1735  00FC28  5021               	movf	??_main,w,c
  1736  00FC2A  6E03               	movwf	compute_crc@len_body,c
  1737  00FC2C  6A04               	clrf	compute_crc@len_body+1,c
  1738  00FC2E  EC06  F077         	call	_compute_crc	;wreg free
  1739  00FC32  5038               	movf	main@c,w,c
  1740  00FC34  0D2B               	mullw	43
  1741  00FC36  0E29               	movlw	41
  1742  00FC38  26F3               	addwf	prodl,f,c
  1743  00FC3A  0E00               	movlw	0
  1744  00FC3C  22F4               	addwfc	prodh,f,c
  1745  00FC3E  0E60               	movlw	low _galaxyCommands
  1746  00FC40  24F3               	addwf	prodl,w,c
  1747  00FC42  6ED9               	movwf	fsr2l,c
  1748  00FC44  0E00               	movlw	high _galaxyCommands
  1749  00FC46  20F4               	addwfc	prodh,w,c
  1750  00FC48  6EDA               	movwf	fsr2h,c
  1751  00FC4A  C001  FFDE         	movff	?_compute_crc,postinc2
  1752  00FC4E  C002  FFDD         	movff	?_compute_crc+1,postdec2
  1753  00FC52  2A35               	incf	main@slot,f,c
  1754  00FC54  D6F9               	goto	l2202
  1755  00FC56                     u2110:
  1756                           
  1757                           ;main.c: 151: }
  1758                           ;main.c: 153: for (unsigned char x=0; x <= 4; x++) {
  1759  00FC56  0E00               	movlw	0
  1760  00FC58  6E36               	movwf	main@x_378,c
  1761  00FC5A                     l2234:
  1762  00FC5A  0E04               	movlw	4
  1763  00FC5C  6436               	cpfsgt	main@x_378,c
  1764  00FC5E  D001               	goto	l71
  1765  00FC60  D00C               	goto	u2130
  1766  00FC62                     l71:
  1767                           
  1768                           ;main.c: 154: FifoInitialize(&buffers[x]);
  1769  00FC62  5036               	movf	main@x_378,w,c
  1770  00FC64  0D44               	mullw	68
  1771  00FC66  0EE1               	movlw	low _buffers
  1772  00FC68  24F3               	addwf	prodl,w,c
  1773  00FC6A  6E01               	movwf	FifoInitialize@buffer,c
  1774  00FC6C  0E00               	movlw	high _buffers
  1775  00FC6E  20F4               	addwfc	prodh,w,c
  1776  00FC70  6E02               	movwf	FifoInitialize@buffer+1,c
  1777  00FC72  ECE6  F075         	call	_FifoInitialize	;wreg free
  1778  00FC76  2A36               	incf	main@x_378,f,c
  1779  00FC78  D7F0               	goto	l2234
  1780  00FC7A                     u2130:
  1781                           
  1782                           ;main.c: 158: TinyDelay();
  1783                           
  1784                           ;main.c: 155: };
  1785                           ;main.c: 157: while (1) {
  1786  00FC7A  EC54  F077         	call	_TinyDelay	;wreg free
  1787                           
  1788                           ;main.c: 161: if (l % 32768 == 0) {
  1789  00FC7E  0EFF               	movlw	255
  1790  00FC80  142F               	andwf	main@l,w,c
  1791  00FC82  6E21               	movwf	??_main& (0+255),c
  1792  00FC84  0E7F               	movlw	127
  1793  00FC86  1430               	andwf	main@l+1,w,c
  1794  00FC88  6E22               	movwf	(??_main+1)& (0+255),c
  1795  00FC8A  0E00               	movlw	0
  1796  00FC8C  1431               	andwf	main@l+2,w,c
  1797  00FC8E  6E23               	movwf	(??_main+2)& (0+255),c
  1798  00FC90  0E00               	movlw	0
  1799  00FC92  1432               	andwf	main@l+3,w,c
  1800  00FC94  6E24               	movwf	(??_main+3)& (0+255),c
  1801  00FC96  5021               	movf	??_main,w,c
  1802  00FC98  1022               	iorwf	??_main+1,w,c
  1803  00FC9A  1023               	iorwf	??_main+2,w,c
  1804  00FC9C  1024               	iorwf	??_main+3,w,c
  1805  00FC9E  A4D8               	btfss	status,2,c
  1806  00FCA0  D006               	goto	l76
  1807                           
  1808                           ;main.c: 162: TRISBbits.TRISB5 = 0;
  1809  00FCA2  9A93               	bcf	3987,5,c	;volatile
  1810                           
  1811                           ;main.c: 163: if (LATBbits.LATB5 == 1) {
  1812  00FCA4  AA8A               	btfss	3978,5,c	;volatile
  1813  00FCA6  D002               	goto	l75
  1814                           
  1815                           ;main.c: 164: LATBbits.LATB5 = 0;
  1816  00FCA8  9A8A               	bcf	3978,5,c	;volatile
  1817                           
  1818                           ;main.c: 165: } else {
  1819  00FCAA  D001               	goto	l76
  1820  00FCAC                     l75:
  1821                           
  1822                           ;main.c: 166: LATBbits.LATB5 = 1;
  1823  00FCAC  8A8A               	bsf	3978,5,c	;volatile
  1824  00FCAE                     l76:
  1825                           
  1826                           ;main.c: 167: }
  1827                           ;main.c: 168: }
  1828                           ;main.c: 169: if (led_red_delay > 0) {
  1829  00FCAE  5041               	movf	_led_red_delay,w,c
  1830  00FCB0  1042               	iorwf	_led_red_delay+1,w,c
  1831  00FCB2  B4D8               	btfsc	status,2,c
  1832  00FCB4  D006               	goto	l77
  1833                           
  1834                           ;main.c: 170: TRISAbits.TRISA6 = 0;
  1835  00FCB6  9C92               	bcf	3986,6,c	;volatile
  1836                           
  1837                           ;main.c: 171: LATAbits.LATA6 = 0;
  1838  00FCB8  9C89               	bcf	3977,6,c	;volatile
  1839                           
  1840                           ;main.c: 172: led_red_delay--;
  1841  00FCBA  0641               	decf	_led_red_delay,f,c
  1842  00FCBC  A0D8               	btfss	status,0,c
  1843  00FCBE  0642               	decf	_led_red_delay+1,f,c
  1844                           
  1845                           ;main.c: 173: } else {
  1846  00FCC0  D001               	goto	l78
  1847  00FCC2                     l77:
  1848                           
  1849                           ;main.c: 174: LATAbits.LATA6 = 1;
  1850  00FCC2  8C89               	bsf	3977,6,c	;volatile
  1851  00FCC4                     l78:
  1852                           
  1853                           ;main.c: 175: }
  1854                           ;main.c: 176: if (led_green_delay > 0) {
  1855  00FCC4  5043               	movf	_led_green_delay,w,c
  1856  00FCC6  1044               	iorwf	_led_green_delay+1,w,c
  1857  00FCC8  B4D8               	btfsc	status,2,c
  1858  00FCCA  D006               	goto	l79
  1859                           
  1860                           ;main.c: 177: TRISAbits.TRISA7 = 0;
  1861  00FCCC  9E92               	bcf	3986,7,c	;volatile
  1862                           
  1863                           ;main.c: 178: LATAbits.LATA7 = 0;
  1864  00FCCE  9E89               	bcf	3977,7,c	;volatile
  1865                           
  1866                           ;main.c: 179: led_green_delay--;
  1867  00FCD0  0643               	decf	_led_green_delay,f,c
  1868  00FCD2  A0D8               	btfss	status,0,c
  1869  00FCD4  0644               	decf	_led_green_delay+1,f,c
  1870                           
  1871                           ;main.c: 180: } else {
  1872  00FCD6  D001               	goto	l80
  1873  00FCD8                     l79:
  1874                           
  1875                           ;main.c: 181: TRISAbits.TRISA7 = 1;
  1876  00FCD8  8E92               	bsf	3986,7,c	;volatile
  1877  00FCDA                     l80:
  1878                           
  1879                           ;main.c: 182: }
  1880                           ;main.c: 184: if (l == 300000) {
  1881  00FCDA  0EE0               	movlw	224
  1882  00FCDC  182F               	xorwf	main@l,w,c
  1883  00FCDE  E108               	bnz	u2181
  1884  00FCE0  0E93               	movlw	147
  1885  00FCE2  1830               	xorwf	main@l+1,w,c
  1886  00FCE4  E105               	bnz	u2181
  1887  00FCE6  0E04               	movlw	4
  1888  00FCE8  1831               	xorwf	main@l+2,w,c
  1889  00FCEA  1032               	iorwf	main@l+3,w,c
  1890  00FCEC  B4D8               	btfsc	status,2,c
  1891  00FCEE  D003               	goto	l82
  1892  00FCF0                     u2181:
  1893  00FCF0  D07F               	goto	l81
  1894  00FCF2                     
  1895                           ;main.c: 186: TinyDelay();
  1896  00FCF2  EC54  F077         	call	_TinyDelay	;wreg free
  1897  00FCF6                     l82:
  1898  00FCF6  0E25               	movlw	low (_buffers+68)
  1899  00FCF8  6E01               	movwf	IsFifoEmpty@buffer,c
  1900  00FCFA  0E01               	movlw	high (_buffers+68)
  1901  00FCFC  6E02               	movwf	IsFifoEmpty@buffer+1,c
  1902  00FCFE  EC67  F075         	call	_IsFifoEmpty	;wreg free
  1903  00FD02  0900               	iorlw	0
  1904  00FD04  B4D8               	btfsc	status,2,c
  1905  00FD06  D7F5               	goto	l83
  1906                           
  1907                           ;main.c: 187: }
  1908                           ;main.c: 189: for (unsigned char k=0; k < galaxyCommands[commandNumber].word_count; k++)
      +                           {
  1909  00FD08  0E00               	movlw	0
  1910  00FD0A  6E33               	movwf	main@k,c
  1911  00FD0C  D021               	goto	l85
  1912  00FD0E                     
  1913                           ;main.c: 190: led_red_delay = 5000;
  1914  00FD0E  0E13               	movlw	19
  1915  00FD10  6E42               	movwf	_led_red_delay+1,c
  1916  00FD12  0E88               	movlw	136
  1917  00FD14  6E41               	movwf	_led_red_delay,c
  1918                           
  1919                           ;main.c: 191: FifoEnqueue(&buffers[1], galaxyCommands[commandNumber].buffer[k]);
  1920  00FD16  0E25               	movlw	low (_buffers+68)
  1921  00FD18  6E05               	movwf	FifoEnqueue@buffer,c
  1922  00FD1A  0E01               	movlw	high (_buffers+68)
  1923  00FD1C  6E06               	movwf	FifoEnqueue@buffer+1,c
  1924  00FD1E  5037               	movf	main@commandNumber,w,c
  1925  00FD20  0D2B               	mullw	43
  1926  00FD22  0E60               	movlw	low _galaxyCommands
  1927  00FD24  6E21               	movwf	??_main& (0+255),c
  1928  00FD26  0E00               	movlw	high _galaxyCommands
  1929  00FD28  6E22               	movwf	(??_main+1)& (0+255),c
  1930  00FD2A  50F3               	movf	prodl,w,c
  1931  00FD2C  2621               	addwf	??_main,f,c
  1932  00FD2E  50F4               	movf	prodh,w,c
  1933  00FD30  2222               	addwfc	??_main+1,f,c
  1934  00FD32  5033               	movf	main@k,w,c
  1935  00FD34  0D02               	mullw	2
  1936  00FD36  50F3               	movf	prodl,w,c
  1937  00FD38  2421               	addwf	??_main,w,c
  1938  00FD3A  6ED9               	movwf	fsr2l,c
  1939  00FD3C  50F4               	movf	prodh,w,c
  1940  00FD3E  2022               	addwfc	??_main+1,w,c
  1941  00FD40  6EDA               	movwf	fsr2h,c
  1942  00FD42  CFDE F007          	movff	postinc2,FifoEnqueue@data
  1943  00FD46  CFDD F008          	movff	postdec2,FifoEnqueue@data+1
  1944  00FD4A  EC40  F076         	call	_FifoEnqueue	;wreg free
  1945  00FD4E  2A33               	incf	main@k,f,c
  1946  00FD50                     l85:
  1947  00FD50  5037               	movf	main@commandNumber,w,c
  1948  00FD52  0D2B               	mullw	43
  1949  00FD54  0E28               	movlw	40
  1950  00FD56  26F3               	addwf	prodl,f,c
  1951  00FD58  0E00               	movlw	0
  1952  00FD5A  22F4               	addwfc	prodh,f,c
  1953  00FD5C  0E60               	movlw	low _galaxyCommands
  1954  00FD5E  24F3               	addwf	prodl,w,c
  1955  00FD60  6ED9               	movwf	fsr2l,c
  1956  00FD62  0E00               	movlw	high _galaxyCommands
  1957  00FD64  20F4               	addwfc	prodh,w,c
  1958  00FD66  6EDA               	movwf	fsr2h,c
  1959  00FD68  50DE               	movf	postinc2,w,c
  1960  00FD6A  5C33               	subwf	main@k,w,c
  1961  00FD6C  A0D8               	btfss	status,0,c
  1962  00FD6E  D7CF               	goto	l86
  1963                           
  1964                           ;main.c: 192: }
  1965                           ;main.c: 193: FifoEnqueue(&buffers[1], galaxyCommands[commandNumber].crc >> 8);
  1966  00FD70  0E25               	movlw	low (_buffers+68)
  1967  00FD72  6E05               	movwf	FifoEnqueue@buffer,c
  1968  00FD74  0E01               	movlw	high (_buffers+68)
  1969  00FD76  6E06               	movwf	FifoEnqueue@buffer+1,c
  1970  00FD78  5037               	movf	main@commandNumber,w,c
  1971  00FD7A  0D2B               	mullw	43
  1972  00FD7C  0E29               	movlw	41
  1973  00FD7E  26F3               	addwf	prodl,f,c
  1974  00FD80  0E00               	movlw	0
  1975  00FD82  22F4               	addwfc	prodh,f,c
  1976  00FD84  0E60               	movlw	low _galaxyCommands
  1977  00FD86  24F3               	addwf	prodl,w,c
  1978  00FD88  6ED9               	movwf	fsr2l,c
  1979  00FD8A  0E00               	movlw	high _galaxyCommands
  1980  00FD8C  20F4               	addwfc	prodh,w,c
  1981  00FD8E  6EDA               	movwf	fsr2h,c
  1982  00FD90  CFDE F021          	movff	postinc2,??_main
  1983  00FD94  CFDD F022          	movff	postdec2,??_main+1
  1984  00FD98  5022               	movf	??_main+1,w,c
  1985  00FD9A  6E07               	movwf	FifoEnqueue@data,c
  1986  00FD9C  6A08               	clrf	FifoEnqueue@data+1,c
  1987  00FD9E  EC40  F076         	call	_FifoEnqueue	;wreg free
  1988                           
  1989                           ;main.c: 194: FifoEnqueue(&buffers[1], galaxyCommands[commandNumber].crc & 0xFF);
  1990  00FDA2  0E25               	movlw	low (_buffers+68)
  1991  00FDA4  6E05               	movwf	FifoEnqueue@buffer,c
  1992  00FDA6  0E01               	movlw	high (_buffers+68)
  1993  00FDA8  6E06               	movwf	FifoEnqueue@buffer+1,c
  1994  00FDAA  5037               	movf	main@commandNumber,w,c
  1995  00FDAC  0D2B               	mullw	43
  1996  00FDAE  0E29               	movlw	41
  1997  00FDB0  26F3               	addwf	prodl,f,c
  1998  00FDB2  0E00               	movlw	0
  1999  00FDB4  22F4               	addwfc	prodh,f,c
  2000  00FDB6  0E60               	movlw	low _galaxyCommands
  2001  00FDB8  24F3               	addwf	prodl,w,c
  2002  00FDBA  6ED9               	movwf	fsr2l,c
  2003  00FDBC  0E00               	movlw	high _galaxyCommands
  2004  00FDBE  20F4               	addwfc	prodh,w,c
  2005  00FDC0  6EDA               	movwf	fsr2h,c
  2006  00FDC2  CFDE F021          	movff	postinc2,??_main
  2007  00FDC6  CFDD F022          	movff	postdec2,??_main+1
  2008  00FDCA  5021               	movf	??_main,w,c
  2009  00FDCC  6E07               	movwf	FifoEnqueue@data,c
  2010  00FDCE  6A08               	clrf	FifoEnqueue@data+1,c
  2011  00FDD0  EC40  F076         	call	_FifoEnqueue	;wreg free
  2012                           
  2013                           ;main.c: 196: commandNumber++;
  2014  00FDD4  2A37               	incf	main@commandNumber,f,c
  2015                           
  2016                           ;main.c: 197: if (commandNumber >= (1 + 2)) {
  2017  00FDD6  0E02               	movlw	2
  2018  00FDD8  6437               	cpfsgt	main@commandNumber,c
  2019  00FDDA  D002               	goto	l88
  2020                           
  2021                           ;main.c: 198: commandNumber = 2;
  2022  00FDDC  0E02               	movlw	2
  2023  00FDDE  6E37               	movwf	main@commandNumber,c
  2024  00FDE0                     l88:
  2025                           
  2026                           ;main.c: 199: }
  2027                           ;main.c: 201: l = 0;
  2028  00FDE0  0E00               	movlw	0
  2029  00FDE2  6E2F               	movwf	main@l,c
  2030  00FDE4  0E00               	movlw	0
  2031  00FDE6  6E30               	movwf	main@l+1,c
  2032  00FDE8  0E00               	movlw	0
  2033  00FDEA  6E31               	movwf	main@l+2,c
  2034  00FDEC  0E00               	movlw	0
  2035  00FDEE  6E32               	movwf	main@l+3,c
  2036  00FDF0                     l81:
  2037                           
  2038                           ;main.c: 202: }
  2039                           ;main.c: 204: l++;
  2040  00FDF0  0E01               	movlw	1
  2041  00FDF2  262F               	addwf	main@l,f,c
  2042  00FDF4  0E00               	movlw	0
  2043  00FDF6  2230               	addwfc	main@l+1,f,c
  2044  00FDF8  2231               	addwfc	main@l+2,f,c
  2045  00FDFA  2232               	addwfc	main@l+3,f,c
  2046  00FDFC  D73E               	goto	u2130
  2047  00FDFE                     __end_of_main:
  2048                           	opt stack 0
  2049                           tblptru	equ	0xFF8
  2050                           prodh	equ	0xFF4
  2051                           prodl	equ	0xFF3
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postdec1	equ	0xFE5
  2055                           fsr1h	equ	0xFE2
  2056                           fsr1l	equ	0xFE1
  2057                           indf2	equ	0xFDF
  2058                           postinc2	equ	0xFDE
  2059                           postdec2	equ	0xFDD
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           status	equ	0xFD8
  2063                           
  2064 ;; *************** function _compute_crc *****************
  2065 ;; Defined at:
  2066 ;;		line 5 in file "galaxy.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  ptr_msg_body    2    0[COMRAM] PTR unsigned int 
  2069 ;;		 -> galaxyCommands.buffer(40), galaxyCommands(129), 
  2070 ;;  len_body        2    2[COMRAM] int 
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;  crc             2   14[COMRAM] unsigned short 
  2073 ;;  i               2   12[COMRAM] int 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  2    0[COMRAM] unsigned short 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2083 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;Total ram usage:       16 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; This function calls:
  2090 ;;		Nothing
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text1
  2097  00EE0C                     __ptext1:
  2098                           	opt stack 0
  2099  00EE0C                     _compute_crc:
  2100                           	opt stack 30
  2101                           
  2102                           ;galaxy.c: 6: int i;
  2103                           ;galaxy.c: 7: unsigned short crc = 0xffff;
  2104                           
  2105                           ;incstack = 0
  2106  00EE0C  680F               	setf	compute_crc@crc,c
  2107  00EE0E  6810               	setf	compute_crc@crc+1,c
  2108                           
  2109                           ;galaxy.c: 8: for (i = 0; i < len_body; i ++)
  2110  00EE10  0E00               	movlw	0
  2111  00EE12  6E0E               	movwf	compute_crc@i+1,c
  2112  00EE14  0E00               	movlw	0
  2113  00EE16  6E0D               	movwf	compute_crc@i,c
  2114  00EE18  D038               	goto	l395
  2115  00EE1A                     
  2116                           ;galaxy.c: 9: crc = ((crc >> 8) & 0xFF) ^ table_crc[(crc ^ (*ptr_msg_body++ & 0xFF)) & 0
      +                          xFF];
  2117  00EE1A  C001  FFD9         	movff	compute_crc@ptr_msg_body,fsr2l
  2118  00EE1E  C002  FFDA         	movff	compute_crc@ptr_msg_body+1,fsr2h
  2119  00EE22  CFDE F005          	movff	postinc2,??_compute_crc
  2120  00EE26  CFDD F006          	movff	postdec2,??_compute_crc+1
  2121  00EE2A  5005               	movf	??_compute_crc,w,c
  2122  00EE2C  180F               	xorwf	compute_crc@crc,w,c
  2123  00EE2E  6E07               	movwf	(??_compute_crc+2)& (0+255),c
  2124  00EE30  0E00               	movlw	0
  2125  00EE32  1810               	xorwf	compute_crc@crc+1,w,c
  2126  00EE34  6E08               	movwf	(??_compute_crc+3)& (0+255),c
  2127  00EE36  0EFF               	movlw	255
  2128  00EE38  1607               	andwf	??_compute_crc+2,f,c
  2129  00EE3A  0E00               	movlw	0
  2130  00EE3C  1608               	andwf	??_compute_crc+3,f,c
  2131  00EE3E  90D8               	bcf	status,0,c
  2132  00EE40  3607               	rlcf	??_compute_crc+2,f,c
  2133  00EE42  3608               	rlcf	??_compute_crc+3,f,c
  2134  00EE44  0EFF               	movlw	low _table_crc
  2135  00EE46  2407               	addwf	??_compute_crc+2,w,c
  2136  00EE48  6EF6               	movwf	tblptrl,c
  2137  00EE4A  0EFD               	movlw	high _table_crc
  2138  00EE4C  2008               	addwfc	??_compute_crc+3,w,c
  2139  00EE4E  6EF7               	movwf	tblptrh,c
  2140  00EE50                     	if	0	;There are less than 3 active tblptr bytes
  2141  00EE50                     	endif
  2142  00EE50  0009               	tblrd		*+
  2143  00EE52  CFF5 F009          	movff	tablat,??_compute_crc+4
  2144  00EE56  0009               	tblrd		*+
  2145  00EE58  CFF5 F00A          	movff	tablat,??_compute_crc+5
  2146  00EE5C  C00F  F00B         	movff	compute_crc@crc,??_compute_crc+6
  2147  00EE60  C010  F00C         	movff	compute_crc@crc+1,??_compute_crc+7
  2148  00EE64  C00C  F00B         	movff	??_compute_crc+7,??_compute_crc+6
  2149  00EE68  6A0C               	clrf	??_compute_crc+7,c
  2150  00EE6A  0EFF               	movlw	255
  2151  00EE6C  160B               	andwf	??_compute_crc+6,f,c
  2152  00EE6E  0E00               	movlw	0
  2153  00EE70  160C               	andwf	??_compute_crc+7,f,c
  2154  00EE72  5009               	movf	??_compute_crc+4,w,c
  2155  00EE74  180B               	xorwf	??_compute_crc+6,w,c
  2156  00EE76  6E0F               	movwf	compute_crc@crc,c
  2157  00EE78  500A               	movf	??_compute_crc+5,w,c
  2158  00EE7A  180C               	xorwf	??_compute_crc+7,w,c
  2159  00EE7C  6E10               	movwf	compute_crc@crc+1,c
  2160  00EE7E  0E02               	movlw	2
  2161  00EE80  2601               	addwf	compute_crc@ptr_msg_body,f,c
  2162  00EE82  0E00               	movlw	0
  2163  00EE84  2202               	addwfc	compute_crc@ptr_msg_body+1,f,c
  2164  00EE86  4A0D               	infsnz	compute_crc@i,f,c
  2165  00EE88  2A0E               	incf	compute_crc@i+1,f,c
  2166  00EE8A                     l395:
  2167  00EE8A  5003               	movf	compute_crc@len_body,w,c
  2168  00EE8C  5C0D               	subwf	compute_crc@i,w,c
  2169  00EE8E  500E               	movf	compute_crc@i+1,w,c
  2170  00EE90  0A80               	xorlw	128
  2171  00EE92  6E05               	movwf	??_compute_crc& (0+255),c
  2172  00EE94  5004               	movf	compute_crc@len_body+1,w,c
  2173  00EE96  0A80               	xorlw	128
  2174  00EE98  5805               	subwfb	??_compute_crc& (0+255),w,c
  2175  00EE9A  A0D8               	btfss	status,0,c
  2176  00EE9C  D7BE               	goto	l396
  2177                           
  2178                           ;galaxy.c: 10: return crc;
  2179  00EE9E  C00F  F001         	movff	compute_crc@crc,?_compute_crc
  2180  00EEA2  C010  F002         	movff	compute_crc@crc+1,?_compute_crc+1
  2181  00EEA6  0012               	return		;funcret
  2182  00EEA8                     __end_of_compute_crc:
  2183                           	opt stack 0
  2184                           tblptru	equ	0xFF8
  2185                           tblptrh	equ	0xFF7
  2186                           tblptrl	equ	0xFF6
  2187                           tablat	equ	0xFF5
  2188                           prodh	equ	0xFF4
  2189                           prodl	equ	0xFF3
  2190                           postinc0	equ	0xFEE
  2191                           wreg	equ	0xFE8
  2192                           postdec1	equ	0xFE5
  2193                           fsr1h	equ	0xFE2
  2194                           fsr1l	equ	0xFE1
  2195                           indf2	equ	0xFDF
  2196                           postinc2	equ	0xFDE
  2197                           postdec2	equ	0xFDD
  2198                           fsr2h	equ	0xFDA
  2199                           fsr2l	equ	0xFD9
  2200                           status	equ	0xFD8
  2201                           
  2202 ;; *************** function _UART_Initialize *****************
  2203 ;; Defined at:
  2204 ;;		line 14 in file "uart.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  uart_index      1    wreg     unsigned char 
  2207 ;;  baud            4   13[COMRAM] unsigned long 
  2208 ;;  mode_9bit       1   17[COMRAM] unsigned char 
  2209 ;;  interrupt_co    1   18[COMRAM] unsigned char 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  uart_index      1   31[COMRAM] unsigned char 
  2212 ;;  temp            4   27[COMRAM] unsigned long 
  2213 ;;  clock_freq      4   23[COMRAM] unsigned long 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, status,2, status,0, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2223 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;Total ram usage:       19 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    1
  2230 ;; This function calls:
  2231 ;;		_EnableTransmitter
  2232 ;;		___lldiv
  2233 ;; This function is called by:
  2234 ;;		_main
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           	psect	text2
  2239  00F014                     __ptext2:
  2240                           	opt stack 0
  2241  00F014                     _UART_Initialize:
  2242                           	opt stack 29
  2243                           
  2244                           ;incstack = 0
  2245                           ;UART_Initialize@uart_index stored from wreg
  2246  00F014  6E20               	movwf	UART_Initialize@uart_index,c
  2247                           
  2248                           ;uart.c: 19: unsigned long temp = 0;
  2249  00F016  0E00               	movlw	0
  2250  00F018  6E1C               	movwf	UART_Initialize@temp,c
  2251  00F01A  0E00               	movlw	0
  2252  00F01C  6E1D               	movwf	UART_Initialize@temp+1,c
  2253  00F01E  0E00               	movlw	0
  2254  00F020  6E1E               	movwf	UART_Initialize@temp+2,c
  2255  00F022  0E00               	movlw	0
  2256  00F024  6E1F               	movwf	UART_Initialize@temp+3,c
  2257                           
  2258                           ;uart.c: 20: unsigned long clock_freq = 64000000;
  2259  00F026  0E00               	movlw	0
  2260  00F028  6E18               	movwf	UART_Initialize@clock_freq,c
  2261  00F02A  0E90               	movlw	144
  2262  00F02C  6E19               	movwf	UART_Initialize@clock_freq+1,c
  2263  00F02E  0ED0               	movlw	208
  2264  00F030  6E1A               	movwf	UART_Initialize@clock_freq+2,c
  2265  00F032  0E03               	movlw	3
  2266  00F034  6E1B               	movwf	UART_Initialize@clock_freq+3,c
  2267                           
  2268                           ;uart.c: 55: if (uart_index == 1) {
  2269  00F036  0420               	decf	UART_Initialize@uart_index,w,c
  2270  00F038  A4D8               	btfss	status,2,c
  2271  00F03A  D003               	goto	l213
  2272                           
  2273                           ;uart.c: 56: BAUDCON1bits.BRG16 = 1;
  2274  00F03C  86B8               	bsf	4024,3,c	;volatile
  2275                           
  2276                           ;uart.c: 57: TXSTA1bits.BRGH = 1;
  2277  00F03E  84AC               	bsf	4012,2,c	;volatile
  2278                           
  2279                           ;uart.c: 58: } else if (uart_index == 2) {
  2280  00F040  D006               	goto	l215
  2281  00F042                     l213:
  2282  00F042  0E02               	movlw	2
  2283  00F044  1820               	xorwf	UART_Initialize@uart_index,w,c
  2284  00F046  A4D8               	btfss	status,2,c
  2285  00F048  D002               	goto	l215
  2286                           
  2287                           ;uart.c: 59: BAUDCON2bits.BRG16 = 1;
  2288  00F04A  8670               	bsf	3952,3,c	;volatile
  2289                           
  2290                           ;uart.c: 60: TXSTA2bits.BRGH = 1;
  2291  00F04C  8472               	bsf	3954,2,c	;volatile
  2292  00F04E                     l215:
  2293                           
  2294                           ;uart.c: 61: }
  2295                           ;uart.c: 64: temp = clock_freq / baud;
  2296  00F04E  C018  F001         	movff	UART_Initialize@clock_freq,___lldiv@dividend
  2297  00F052  C019  F002         	movff	UART_Initialize@clock_freq+1,___lldiv@dividend+1
  2298  00F056  C01A  F003         	movff	UART_Initialize@clock_freq+2,___lldiv@dividend+2
  2299  00F05A  C01B  F004         	movff	UART_Initialize@clock_freq+3,___lldiv@dividend+3
  2300  00F05E  C00E  F005         	movff	UART_Initialize@baud,___lldiv@divisor
  2301  00F062  C00F  F006         	movff	UART_Initialize@baud+1,___lldiv@divisor+1
  2302  00F066  C010  F007         	movff	UART_Initialize@baud+2,___lldiv@divisor+2
  2303  00F06A  C011  F008         	movff	UART_Initialize@baud+3,___lldiv@divisor+3
  2304  00F06E  EC7E  F076         	call	___lldiv	;wreg free
  2305  00F072  C001  F01C         	movff	?___lldiv,UART_Initialize@temp
  2306  00F076  C002  F01D         	movff	?___lldiv+1,UART_Initialize@temp+1
  2307  00F07A  C003  F01E         	movff	?___lldiv+2,UART_Initialize@temp+2
  2308  00F07E  C004  F01F         	movff	?___lldiv+3,UART_Initialize@temp+3
  2309                           
  2310                           ;uart.c: 65: temp = (temp / 4);
  2311  00F082  C01C  F014         	movff	UART_Initialize@temp,??_UART_Initialize
  2312  00F086  C01D  F015         	movff	UART_Initialize@temp+1,??_UART_Initialize+1
  2313  00F08A  C01E  F016         	movff	UART_Initialize@temp+2,??_UART_Initialize+2
  2314  00F08E  C01F  F017         	movff	UART_Initialize@temp+3,??_UART_Initialize+3
  2315  00F092  0E03               	movlw	3
  2316  00F094  D005               	goto	u1740
  2317  00F096                     u1745:
  2318  00F096  90D8               	bcf	status,0,c
  2319  00F098  3217               	rrcf	??_UART_Initialize+3,f,c
  2320  00F09A  3216               	rrcf	??_UART_Initialize+2,f,c
  2321  00F09C  3215               	rrcf	??_UART_Initialize+1,f,c
  2322  00F09E  3214               	rrcf	??_UART_Initialize,f,c
  2323  00F0A0                     u1740:
  2324  00F0A0  2EE8               	decfsz	wreg,f,c
  2325  00F0A2  D7F9               	goto	u1745
  2326  00F0A4  C014  F01C         	movff	??_UART_Initialize,UART_Initialize@temp
  2327  00F0A8  C015  F01D         	movff	??_UART_Initialize+1,UART_Initialize@temp+1
  2328  00F0AC  C016  F01E         	movff	??_UART_Initialize+2,UART_Initialize@temp+2
  2329  00F0B0  C017  F01F         	movff	??_UART_Initialize+3,UART_Initialize@temp+3
  2330                           
  2331                           ;uart.c: 66: temp = temp - 1;
  2332  00F0B4  0EFF               	movlw	255
  2333  00F0B6  241C               	addwf	UART_Initialize@temp,w,c
  2334  00F0B8  6E1C               	movwf	UART_Initialize@temp,c
  2335  00F0BA  0EFF               	movlw	255
  2336  00F0BC  201D               	addwfc	UART_Initialize@temp+1,w,c
  2337  00F0BE  6E1D               	movwf	UART_Initialize@temp+1,c
  2338  00F0C0  0EFF               	movlw	255
  2339  00F0C2  201E               	addwfc	UART_Initialize@temp+2,w,c
  2340  00F0C4  6E1E               	movwf	UART_Initialize@temp+2,c
  2341  00F0C6  0EFF               	movlw	255
  2342  00F0C8  201F               	addwfc	UART_Initialize@temp+3,w,c
  2343  00F0CA  6E1F               	movwf	UART_Initialize@temp+3,c
  2344                           
  2345                           ;uart.c: 67: if (uart_index == 1) {
  2346  00F0CC  0420               	decf	UART_Initialize@uart_index,w,c
  2347  00F0CE  A4D8               	btfss	status,2,c
  2348  00F0D0  D005               	goto	l216
  2349                           
  2350                           ;uart.c: 68: SPBRGH1 = temp >> 8;
  2351  00F0D2  C01D  FFB0         	movff	UART_Initialize@temp+1,4016	;volatile
  2352                           
  2353                           ;uart.c: 69: SPBRG1 = (char)temp;
  2354  00F0D6  C01C  FFAF         	movff	UART_Initialize@temp,4015	;volatile
  2355                           
  2356                           ;uart.c: 70: } else if (uart_index == 2) {
  2357  00F0DA  D008               	goto	l218
  2358  00F0DC                     l216:
  2359  00F0DC  0E02               	movlw	2
  2360  00F0DE  1820               	xorwf	UART_Initialize@uart_index,w,c
  2361  00F0E0  A4D8               	btfss	status,2,c
  2362  00F0E2  D004               	goto	l218
  2363                           
  2364                           ;uart.c: 71: SPBRGH2 = temp >> 8;
  2365  00F0E4  C01D  FF76         	movff	UART_Initialize@temp+1,3958	;volatile
  2366                           
  2367                           ;uart.c: 72: SPBRG2 = (char)temp;
  2368  00F0E8  C01C  FF75         	movff	UART_Initialize@temp,3957	;volatile
  2369  00F0EC                     l218:
  2370                           
  2371                           ;uart.c: 73: }
  2372                           ;uart.c: 76: if (uart_index == 1) {
  2373  00F0EC  0420               	decf	UART_Initialize@uart_index,w,c
  2374  00F0EE  A4D8               	btfss	status,2,c
  2375  00F0F0  D004               	goto	l219
  2376                           
  2377                           ;uart.c: 77: TRISCbits.TRISC6 = 1;
  2378  00F0F2  8C94               	bsf	3988,6,c	;volatile
  2379                           
  2380                           ;uart.c: 78: TRISCbits.TRISC7 = 1;
  2381  00F0F4  8E94               	bsf	3988,7,c	;volatile
  2382                           
  2383                           ;uart.c: 79: TXSTA1bits.SYNC = 0;
  2384  00F0F6  98AC               	bcf	4012,4,c	;volatile
  2385                           
  2386                           ;uart.c: 80: } else if (uart_index == 2) {
  2387  00F0F8  D007               	goto	l221
  2388  00F0FA                     l219:
  2389  00F0FA  0E02               	movlw	2
  2390  00F0FC  1820               	xorwf	UART_Initialize@uart_index,w,c
  2391  00F0FE  A4D8               	btfss	status,2,c
  2392  00F100  D003               	goto	l221
  2393                           
  2394                           ;uart.c: 81: TRISBbits.TRISB6 = 1;
  2395  00F102  8C93               	bsf	3987,6,c	;volatile
  2396                           
  2397                           ;uart.c: 82: TRISBbits.TRISB7 = 1;
  2398  00F104  8E93               	bsf	3987,7,c	;volatile
  2399                           
  2400                           ;uart.c: 83: TXSTA2bits.SYNC = 0;
  2401  00F106  9872               	bcf	3954,4,c	;volatile
  2402  00F108                     l221:
  2403                           
  2404                           ;uart.c: 84: }
  2405                           ;uart.c: 87: if (mode_9bit == 1)
  2406  00F108  0412               	decf	UART_Initialize@mode_9bit,w,c
  2407  00F10A  A4D8               	btfss	status,2,c
  2408  00F10C  D00D               	goto	l222
  2409                           
  2410                           ;uart.c: 88: {
  2411                           ;uart.c: 89: if (uart_index == 1) {
  2412  00F10E  0420               	decf	UART_Initialize@uart_index,w,c
  2413  00F110  A4D8               	btfss	status,2,c
  2414  00F112  D003               	goto	l223
  2415                           
  2416                           ;uart.c: 90: RCSTA1bits.RX9 = 1;
  2417  00F114  8CAB               	bsf	4011,6,c	;volatile
  2418                           
  2419                           ;uart.c: 91: TXSTA1bits.TX9 = 1;
  2420  00F116  8CAC               	bsf	4012,6,c	;volatile
  2421                           
  2422                           ;uart.c: 92: } else if (uart_index == 2) {
  2423  00F118  D013               	goto	l229
  2424  00F11A                     l223:
  2425  00F11A  0E02               	movlw	2
  2426  00F11C  1820               	xorwf	UART_Initialize@uart_index,w,c
  2427  00F11E  A4D8               	btfss	status,2,c
  2428  00F120  D00F               	goto	l229
  2429                           
  2430                           ;uart.c: 93: RCSTA2bits.RX9 = 1;
  2431  00F122  8C71               	bsf	3953,6,c	;volatile
  2432                           
  2433                           ;uart.c: 94: TXSTA2bits.TX9 = 1;
  2434  00F124  8C72               	bsf	3954,6,c	;volatile
  2435                           
  2436                           ;uart.c: 95: }
  2437                           ;uart.c: 96: }
  2438  00F126  D00C               	goto	l229
  2439  00F128                     l222:
  2440                           
  2441                           ;uart.c: 97: else
  2442                           ;uart.c: 98: {
  2443                           ;uart.c: 99: if (uart_index == 1) {
  2444  00F128  0420               	decf	UART_Initialize@uart_index,w,c
  2445  00F12A  A4D8               	btfss	status,2,c
  2446  00F12C  D003               	goto	l227
  2447                           
  2448                           ;uart.c: 100: RCSTA1bits.RX9 = 0;
  2449  00F12E  9CAB               	bcf	4011,6,c	;volatile
  2450                           
  2451                           ;uart.c: 101: TXSTA1bits.TX9 = 0;
  2452  00F130  9CAC               	bcf	4012,6,c	;volatile
  2453                           
  2454                           ;uart.c: 102: } else if (uart_index == 2) {
  2455  00F132  D006               	goto	l229
  2456  00F134                     l227:
  2457  00F134  0E02               	movlw	2
  2458  00F136  1820               	xorwf	UART_Initialize@uart_index,w,c
  2459  00F138  A4D8               	btfss	status,2,c
  2460  00F13A  D002               	goto	l229
  2461                           
  2462                           ;uart.c: 103: RCSTA2bits.RX9 = 0;
  2463  00F13C  9C71               	bcf	3953,6,c	;volatile
  2464                           
  2465                           ;uart.c: 104: TXSTA2bits.TX9 = 0;
  2466  00F13E  9C72               	bcf	3954,6,c	;volatile
  2467  00F140                     l229:
  2468                           
  2469                           ;uart.c: 105: }
  2470                           ;uart.c: 106: }
  2471                           ;uart.c: 111: if (uart_index == 1) {
  2472  00F140  0420               	decf	UART_Initialize@uart_index,w,c
  2473  00F142  A4D8               	btfss	status,2,c
  2474  00F144  D002               	goto	l230
  2475                           
  2476                           ;uart.c: 112: RCSTA1bits.CREN = 1;
  2477  00F146  88AB               	bsf	4011,4,c	;volatile
  2478                           
  2479                           ;uart.c: 113: } else if (uart_index == 2) {
  2480  00F148  D004               	goto	l232
  2481  00F14A                     l230:
  2482  00F14A  0E02               	movlw	2
  2483  00F14C  1820               	xorwf	UART_Initialize@uart_index,w,c
  2484  00F14E  B4D8               	btfsc	status,2,c
  2485                           
  2486                           ;uart.c: 114: RCSTA2bits.CREN = 1;
  2487  00F150  8871               	bsf	3953,4,c	;volatile
  2488  00F152                     l232:
  2489                           
  2490                           ;uart.c: 115: }
  2491                           ;uart.c: 118: if (uart_index == 1) {
  2492  00F152  0420               	decf	UART_Initialize@uart_index,w,c
  2493  00F154  A4D8               	btfss	status,2,c
  2494  00F156  D002               	goto	l233
  2495                           
  2496                           ;uart.c: 119: RCSTA1bits.SPEN = 1;
  2497  00F158  8EAB               	bsf	4011,7,c	;volatile
  2498                           
  2499                           ;uart.c: 120: } else if (uart_index == 2) {
  2500  00F15A  D004               	goto	l235
  2501  00F15C                     l233:
  2502  00F15C  0E02               	movlw	2
  2503  00F15E  1820               	xorwf	UART_Initialize@uart_index,w,c
  2504  00F160  B4D8               	btfsc	status,2,c
  2505                           
  2506                           ;uart.c: 121: RCSTA2bits.SPEN = 1;
  2507  00F162  8E71               	bsf	3953,7,c	;volatile
  2508  00F164                     l235:
  2509                           
  2510                           ;uart.c: 122: }
  2511                           ;uart.c: 125: if (uart_index == 1) {
  2512  00F164  0420               	decf	UART_Initialize@uart_index,w,c
  2513  00F166  A4D8               	btfss	status,2,c
  2514  00F168  D008               	goto	l236
  2515                           
  2516                           ;uart.c: 126: if (PIR1bits.RC1IF)
  2517  00F16A  AA9E               	btfss	3998,5,c	;volatile
  2518  00F16C  D010               	goto	l240
  2519                           
  2520                           ;uart.c: 127: temp = RC1REG;
  2521  00F16E  50AE               	movf	4014,w,c	;volatile
  2522  00F170  6E1C               	movwf	UART_Initialize@temp,c
  2523  00F172  6A1D               	clrf	UART_Initialize@temp+1,c
  2524  00F174  6A1E               	clrf	UART_Initialize@temp+2,c
  2525  00F176  6A1F               	clrf	UART_Initialize@temp+3,c
  2526                           
  2527                           ;uart.c: 128: } else if (uart_index == 2) {
  2528  00F178  D00A               	goto	l240
  2529  00F17A                     l236:
  2530  00F17A  0E02               	movlw	2
  2531  00F17C  1820               	xorwf	UART_Initialize@uart_index,w,c
  2532  00F17E  B4D8               	btfsc	status,2,c
  2533                           
  2534                           ;uart.c: 129: if (PIR3bits.RC2IF)
  2535  00F180  AAA4               	btfss	4004,5,c	;volatile
  2536  00F182  D005               	goto	l240
  2537                           
  2538                           ;uart.c: 130: temp = RC1REG;
  2539  00F184  50AE               	movf	4014,w,c	;volatile
  2540  00F186  6E1C               	movwf	UART_Initialize@temp,c
  2541  00F188  6A1D               	clrf	UART_Initialize@temp+1,c
  2542  00F18A  6A1E               	clrf	UART_Initialize@temp+2,c
  2543  00F18C  6A1F               	clrf	UART_Initialize@temp+3,c
  2544  00F18E                     l240:
  2545                           
  2546                           ;uart.c: 131: }
  2547                           ;uart.c: 134: if (interrupt_control == 1 || interrupt_control == 2)
  2548  00F18E  0413               	decf	UART_Initialize@interrupt_control,w,c
  2549  00F190  B4D8               	btfsc	status,2,c
  2550  00F192  D004               	goto	u1930
  2551  00F194  0E02               	movlw	2
  2552  00F196  1813               	xorwf	UART_Initialize@interrupt_control,w,c
  2553  00F198  A4D8               	btfss	status,2,c
  2554  00F19A  D024               	goto	l241
  2555  00F19C                     u1930:
  2556                           
  2557                           ;uart.c: 135: {
  2558                           ;uart.c: 137: if (interrupt_control == 1)
  2559  00F19C  0413               	decf	UART_Initialize@interrupt_control,w,c
  2560  00F19E  A4D8               	btfss	status,2,c
  2561  00F1A0  D00D               	goto	l244
  2562                           
  2563                           ;uart.c: 138: {
  2564                           ;uart.c: 139: if (uart_index == 1) {
  2565  00F1A2  0420               	decf	UART_Initialize@uart_index,w,c
  2566  00F1A4  A4D8               	btfss	status,2,c
  2567  00F1A6  D003               	goto	l245
  2568                           
  2569                           ;uart.c: 140: IPR1bits.RC1IP = 0;
  2570  00F1A8  9A9F               	bcf	3999,5,c	;volatile
  2571                           
  2572                           ;uart.c: 141: IPR1bits.TX1IP = 0;
  2573  00F1AA  989F               	bcf	3999,4,c	;volatile
  2574                           
  2575                           ;uart.c: 142: } else if (uart_index == 2) {
  2576  00F1AC  D017               	goto	l252
  2577  00F1AE                     l245:
  2578  00F1AE  0E02               	movlw	2
  2579  00F1B0  1820               	xorwf	UART_Initialize@uart_index,w,c
  2580  00F1B2  A4D8               	btfss	status,2,c
  2581  00F1B4  D013               	goto	l252
  2582                           
  2583                           ;uart.c: 143: IPR3bits.RC2IP = 0;
  2584  00F1B6  9AA5               	bcf	4005,5,c	;volatile
  2585                           
  2586                           ;uart.c: 144: IPR3bits.TX2IP = 0;
  2587  00F1B8  98A5               	bcf	4005,4,c	;volatile
  2588                           
  2589                           ;uart.c: 145: }
  2590                           ;uart.c: 146: }
  2591  00F1BA  D010               	goto	l252
  2592  00F1BC                     l244:
  2593                           
  2594                           ;uart.c: 147: else if (interrupt_control == 2)
  2595  00F1BC  0E02               	movlw	2
  2596  00F1BE  1813               	xorwf	UART_Initialize@interrupt_control,w,c
  2597  00F1C0  A4D8               	btfss	status,2,c
  2598  00F1C2  D00C               	goto	l252
  2599                           
  2600                           ;uart.c: 148: {
  2601                           ;uart.c: 149: if (uart_index == 1) {
  2602  00F1C4  0420               	decf	UART_Initialize@uart_index,w,c
  2603  00F1C6  A4D8               	btfss	status,2,c
  2604  00F1C8  D003               	goto	l250
  2605                           
  2606                           ;uart.c: 150: IPR1bits.RC1IP = 1;
  2607  00F1CA  8A9F               	bsf	3999,5,c	;volatile
  2608                           
  2609                           ;uart.c: 151: IPR1bits.TX1IP = 1;
  2610  00F1CC  889F               	bsf	3999,4,c	;volatile
  2611                           
  2612                           ;uart.c: 152: } else if (uart_index == 2) {
  2613  00F1CE  D006               	goto	l252
  2614  00F1D0                     l250:
  2615  00F1D0  0E02               	movlw	2
  2616  00F1D2  1820               	xorwf	UART_Initialize@uart_index,w,c
  2617  00F1D4  A4D8               	btfss	status,2,c
  2618  00F1D6  D002               	goto	l252
  2619                           
  2620                           ;uart.c: 153: IPR3bits.RC2IP = 1;
  2621  00F1D8  8AA5               	bsf	4005,5,c	;volatile
  2622                           
  2623                           ;uart.c: 154: IPR3bits.TX2IP = 1;
  2624  00F1DA  88A5               	bsf	4005,4,c	;volatile
  2625  00F1DC                     l252:
  2626                           
  2627                           ;uart.c: 155: }
  2628                           ;uart.c: 156: }
  2629                           ;uart.c: 159: PIE1bits.RC1IE = 1;
  2630  00F1DC  8A9D               	bsf	3997,5,c	;volatile
  2631                           
  2632                           ;uart.c: 163: INTCONbits.PEIE = 1;
  2633  00F1DE  8CF2               	bsf	intcon,6,c	;volatile
  2634                           
  2635                           ;uart.c: 166: INTCONbits.GIE = 1;
  2636  00F1E0  8EF2               	bsf	intcon,7,c	;volatile
  2637                           
  2638                           ;uart.c: 167: }
  2639  00F1E2  0012               	return	
  2640  00F1E4                     l241:
  2641                           
  2642                           ;uart.c: 169: else
  2643                           ;uart.c: 170: {
  2644                           ;uart.c: 172: if (uart_index == 1) {
  2645  00F1E4  0420               	decf	UART_Initialize@uart_index,w,c
  2646  00F1E6  A4D8               	btfss	status,2,c
  2647  00F1E8  D003               	goto	l254
  2648                           
  2649                           ;uart.c: 173: PIE1bits.RC1IE = 0;
  2650  00F1EA  9A9D               	bcf	3997,5,c	;volatile
  2651                           
  2652                           ;uart.c: 174: PIE1bits.TX1IE = 0;
  2653  00F1EC  989D               	bcf	3997,4,c	;volatile
  2654                           
  2655                           ;uart.c: 175: } else if (uart_index == 2) {
  2656  00F1EE  D006               	goto	l256
  2657  00F1F0                     l254:
  2658  00F1F0  0E02               	movlw	2
  2659  00F1F2  1820               	xorwf	UART_Initialize@uart_index,w,c
  2660  00F1F4  A4D8               	btfss	status,2,c
  2661  00F1F6  D002               	goto	l256
  2662                           
  2663                           ;uart.c: 176: PIE3bits.RC2IE = 0;
  2664  00F1F8  9AA3               	bcf	4003,5,c	;volatile
  2665                           
  2666                           ;uart.c: 177: PIE3bits.TX2IE = 0;
  2667  00F1FA  98A3               	bcf	4003,4,c	;volatile
  2668  00F1FC                     l256:
  2669                           
  2670                           ;uart.c: 178: }
  2671                           ;uart.c: 180: EnableTransmitter(uart_index);
  2672  00F1FC  5020               	movf	UART_Initialize@uart_index,w,c
  2673  00F1FE  EC5B  F075         	call	_EnableTransmitter
  2674  00F202  0012               	return	
  2675  00F204                     __end_of_UART_Initialize:
  2676                           	opt stack 0
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           intcon	equ	0xFF2
  2684                           postinc0	equ	0xFEE
  2685                           wreg	equ	0xFE8
  2686                           postdec1	equ	0xFE5
  2687                           fsr1h	equ	0xFE2
  2688                           fsr1l	equ	0xFE1
  2689                           indf2	equ	0xFDF
  2690                           postinc2	equ	0xFDE
  2691                           postdec2	equ	0xFDD
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function ___lldiv *****************
  2697 ;; Defined at:
  2698 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  dividend        4    0[COMRAM] unsigned long 
  2701 ;;  divisor         4    4[COMRAM] unsigned long 
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  quotient        4    8[COMRAM] unsigned long 
  2704 ;;  counter         1   12[COMRAM] unsigned char 
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  4    0[COMRAM] unsigned long 
  2707 ;; Registers used:
  2708 ;;		wreg, status,2, status,0
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2714 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;Total ram usage:       13 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; This function calls:
  2721 ;;		Nothing
  2722 ;; This function is called by:
  2723 ;;		_UART_Initialize
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text3
  2728  00ECFC                     __ptext3:
  2729                           	opt stack 0
  2730  00ECFC                     ___lldiv:
  2731                           	opt stack 29
  2732                           
  2733                           ;incstack = 0
  2734  00ECFC  0E00               	movlw	0
  2735  00ECFE  6E09               	movwf	___lldiv@quotient,c
  2736  00ED00  0E00               	movlw	0
  2737  00ED02  6E0A               	movwf	___lldiv@quotient+1,c
  2738  00ED04  0E00               	movlw	0
  2739  00ED06  6E0B               	movwf	___lldiv@quotient+2,c
  2740  00ED08  0E00               	movlw	0
  2741  00ED0A  6E0C               	movwf	___lldiv@quotient+3,c
  2742  00ED0C  5005               	movf	___lldiv@divisor,w,c
  2743  00ED0E  1006               	iorwf	___lldiv@divisor+1,w,c
  2744  00ED10  1007               	iorwf	___lldiv@divisor+2,w,c
  2745  00ED12  1008               	iorwf	___lldiv@divisor+3,w,c
  2746  00ED14  B4D8               	btfsc	status,2,c
  2747  00ED16  D02A               	goto	l754
  2748  00ED18  0E01               	movlw	1
  2749  00ED1A  6E0D               	movwf	___lldiv@counter,c
  2750  00ED1C  D006               	goto	l749
  2751  00ED1E  90D8               	bcf	status,0,c
  2752  00ED20  3605               	rlcf	___lldiv@divisor,f,c
  2753  00ED22  3606               	rlcf	___lldiv@divisor+1,f,c
  2754  00ED24  3607               	rlcf	___lldiv@divisor+2,f,c
  2755  00ED26  3608               	rlcf	___lldiv@divisor+3,f,c
  2756  00ED28  2A0D               	incf	___lldiv@counter,f,c
  2757  00ED2A                     l749:
  2758  00ED2A  AE08               	btfss	___lldiv@divisor+3,7,c
  2759  00ED2C  D7F8               	goto	l750
  2760  00ED2E                     u1700:
  2761  00ED2E  90D8               	bcf	status,0,c
  2762  00ED30  3609               	rlcf	___lldiv@quotient,f,c
  2763  00ED32  360A               	rlcf	___lldiv@quotient+1,f,c
  2764  00ED34  360B               	rlcf	___lldiv@quotient+2,f,c
  2765  00ED36  360C               	rlcf	___lldiv@quotient+3,f,c
  2766  00ED38  5005               	movf	___lldiv@divisor,w,c
  2767  00ED3A  5C01               	subwf	___lldiv@dividend,w,c
  2768  00ED3C  5006               	movf	___lldiv@divisor+1,w,c
  2769  00ED3E  5802               	subwfb	___lldiv@dividend+1,w,c
  2770  00ED40  5007               	movf	___lldiv@divisor+2,w,c
  2771  00ED42  5803               	subwfb	___lldiv@dividend+2,w,c
  2772  00ED44  5008               	movf	___lldiv@divisor+3,w,c
  2773  00ED46  5804               	subwfb	___lldiv@dividend+3,w,c
  2774  00ED48  A0D8               	btfss	status,0,c
  2775  00ED4A  D009               	goto	l753
  2776  00ED4C  5005               	movf	___lldiv@divisor,w,c
  2777  00ED4E  5E01               	subwf	___lldiv@dividend,f,c
  2778  00ED50  5006               	movf	___lldiv@divisor+1,w,c
  2779  00ED52  5A02               	subwfb	___lldiv@dividend+1,f,c
  2780  00ED54  5007               	movf	___lldiv@divisor+2,w,c
  2781  00ED56  5A03               	subwfb	___lldiv@dividend+2,f,c
  2782  00ED58  5008               	movf	___lldiv@divisor+3,w,c
  2783  00ED5A  5A04               	subwfb	___lldiv@dividend+3,f,c
  2784  00ED5C  8009               	bsf	___lldiv@quotient,0,c
  2785  00ED5E                     l753:
  2786  00ED5E  90D8               	bcf	status,0,c
  2787  00ED60  3208               	rrcf	___lldiv@divisor+3,f,c
  2788  00ED62  3207               	rrcf	___lldiv@divisor+2,f,c
  2789  00ED64  3206               	rrcf	___lldiv@divisor+1,f,c
  2790  00ED66  3205               	rrcf	___lldiv@divisor,f,c
  2791  00ED68  2E0D               	decfsz	___lldiv@counter,f,c
  2792  00ED6A  D7E1               	goto	u1700
  2793  00ED6C                     l754:
  2794  00ED6C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2795  00ED70  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2796  00ED74  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2797  00ED78  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2798  00ED7C  0012               	return		;funcret
  2799  00ED7E                     __end_of___lldiv:
  2800                           	opt stack 0
  2801                           tblptru	equ	0xFF8
  2802                           tblptrh	equ	0xFF7
  2803                           tblptrl	equ	0xFF6
  2804                           tablat	equ	0xFF5
  2805                           prodh	equ	0xFF4
  2806                           prodl	equ	0xFF3
  2807                           intcon	equ	0xFF2
  2808                           postinc0	equ	0xFEE
  2809                           wreg	equ	0xFE8
  2810                           postdec1	equ	0xFE5
  2811                           fsr1h	equ	0xFE2
  2812                           fsr1l	equ	0xFE1
  2813                           indf2	equ	0xFDF
  2814                           postinc2	equ	0xFDE
  2815                           postdec2	equ	0xFDD
  2816                           fsr2h	equ	0xFDA
  2817                           fsr2l	equ	0xFD9
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _EnableTransmitter *****************
  2821 ;; Defined at:
  2822 ;;		line 185 in file "uart.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;  uart_index      1    wreg     unsigned char 
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  uart_index      1    0[COMRAM] unsigned char 
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, status,2, status,0
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;Total ram usage:        1 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; This function calls:
  2843 ;;		Nothing
  2844 ;; This function is called by:
  2845 ;;		_UART_Initialize
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           	psect	text4
  2850  00EAB6                     __ptext4:
  2851                           	opt stack 0
  2852  00EAB6                     _EnableTransmitter:
  2853                           	opt stack 29
  2854                           
  2855                           ;incstack = 0
  2856                           ;EnableTransmitter@uart_index stored from wreg
  2857  00EAB6  6E01               	movwf	EnableTransmitter@uart_index,c
  2858                           
  2859                           ;uart.c: 186: if (uart_index == 1) {
  2860  00EAB8  0401               	decf	EnableTransmitter@uart_index,w,c
  2861  00EABA  A4D8               	btfss	status,2,c
  2862  00EABC  D002               	goto	l260
  2863                           
  2864                           ;uart.c: 187: TXSTA1bits.TXEN1 = 1;
  2865  00EABE  8AAC               	bsf	4012,5,c	;volatile
  2866                           
  2867                           ;uart.c: 188: } else if (uart_index == 2) {
  2868  00EAC0  0012               	return	
  2869  00EAC2                     l260:
  2870  00EAC2  0E02               	movlw	2
  2871  00EAC4  1801               	xorwf	EnableTransmitter@uart_index,w,c
  2872  00EAC6  A4D8               	btfss	status,2,c
  2873  00EAC8  0012               	return	
  2874                           
  2875                           ;uart.c: 189: TXSTA2bits.TXEN2 = 1;
  2876  00EACA  8A72               	bsf	3954,5,c	;volatile
  2877  00EACC  0012               	return	
  2878  00EACE                     __end_of_EnableTransmitter:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           prodh	equ	0xFF4
  2885                           prodl	equ	0xFF3
  2886                           intcon	equ	0xFF2
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           postdec1	equ	0xFE5
  2890                           fsr1h	equ	0xFE2
  2891                           fsr1l	equ	0xFE1
  2892                           indf2	equ	0xFDF
  2893                           postinc2	equ	0xFDE
  2894                           postdec2	equ	0xFDD
  2895                           fsr2h	equ	0xFDA
  2896                           fsr2l	equ	0xFD9
  2897                           status	equ	0xFD8
  2898                           
  2899 ;; *************** function _TinyDelay *****************
  2900 ;; Defined at:
  2901 ;;		line 209 in file "main.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  data            2   16[COMRAM] unsigned int 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;Total ram usage:        2 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    3
  2922 ;; This function calls:
  2923 ;;		_DigitalBreakout
  2924 ;;		_FifoDequeue
  2925 ;;		_FifoEnqueue
  2926 ;;		_GetChar9
  2927 ;;		_IsFifoEmpty
  2928 ;;		_IsFifoFull
  2929 ;;		_IsRxDataAvailable
  2930 ;;		_IsTransmitterReady
  2931 ;;		_PutChar9Default
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text5
  2938  00EEA8                     __ptext5:
  2939                           	opt stack 0
  2940  00EEA8                     _TinyDelay:
  2941                           	opt stack 27
  2942                           
  2943                           ;main.c: 211: if (IsRxDataAvailable(1)) {
  2944                           
  2945                           ;incstack = 0
  2946  00EEA8  0E01               	movlw	1
  2947  00EEAA  ECB7  F075         	call	_IsRxDataAvailable
  2948  00EEAE  0900               	iorlw	0
  2949  00EEB0  B4D8               	btfsc	status,2,c
  2950  00EEB2  D01A               	goto	l95
  2951                           
  2952                           ;main.c: 212: if (!IsFifoFull(&buffers[2])) {
  2953  00EEB4  0E69               	movlw	low (_buffers+136)
  2954  00EEB6  6E01               	movwf	IsFifoFull@buffer,c
  2955  00EEB8  0E01               	movlw	high (_buffers+136)
  2956  00EEBA  6E02               	movwf	IsFifoFull@buffer+1,c
  2957  00EEBC  ECA3  F075         	call	_IsFifoFull	;wreg free
  2958  00EEC0  0900               	iorlw	0
  2959  00EEC2  A4D8               	btfss	status,2,c
  2960  00EEC4  D011               	goto	l95
  2961                           
  2962                           ;main.c: 213: unsigned int data = GetChar9(1);
  2963  00EEC6  0E01               	movlw	1
  2964  00EEC8  ECA9  F077         	call	_GetChar9
  2965  00EECC  C002  F011         	movff	?_GetChar9,TinyDelay@data
  2966  00EED0  C003  F012         	movff	?_GetChar9+1,TinyDelay@data+1
  2967                           
  2968                           ;main.c: 214: FifoEnqueue(&buffers[2], data);
  2969  00EED4  0E69               	movlw	low (_buffers+136)
  2970  00EED6  6E05               	movwf	FifoEnqueue@buffer,c
  2971  00EED8  0E01               	movlw	high (_buffers+136)
  2972  00EEDA  6E06               	movwf	FifoEnqueue@buffer+1,c
  2973  00EEDC  C011  F007         	movff	TinyDelay@data,FifoEnqueue@data
  2974  00EEE0  C012  F008         	movff	TinyDelay@data+1,FifoEnqueue@data+1
  2975  00EEE4  EC40  F076         	call	_FifoEnqueue	;wreg free
  2976  00EEE8                     l95:
  2977                           
  2978                           ;main.c: 215: }
  2979                           ;main.c: 216: }
  2980                           ;main.c: 218: if (!IsFifoEmpty(&buffers[2])) {
  2981  00EEE8  0E69               	movlw	low (_buffers+136)
  2982  00EEEA  6E01               	movwf	IsFifoEmpty@buffer,c
  2983  00EEEC  0E01               	movlw	high (_buffers+136)
  2984  00EEEE  6E02               	movwf	IsFifoEmpty@buffer+1,c
  2985  00EEF0  EC67  F075         	call	_IsFifoEmpty	;wreg free
  2986  00EEF4  0900               	iorlw	0
  2987  00EEF6  A4D8               	btfss	status,2,c
  2988  00EEF8  D010               	goto	l96
  2989                           
  2990                           ;main.c: 219: led_green_delay = 10000;
  2991  00EEFA  0E27               	movlw	39
  2992  00EEFC  6E44               	movwf	_led_green_delay+1,c
  2993  00EEFE  0E10               	movlw	16
  2994  00EF00  6E43               	movwf	_led_green_delay,c
  2995                           
  2996                           ;main.c: 220: DigitalBreakout(FifoDequeue(&buffers[2]));
  2997  00EF02  0E69               	movlw	low (_buffers+136)
  2998  00EF04  6E03               	movwf	FifoDequeue@buffer,c
  2999  00EF06  0E01               	movlw	high (_buffers+136)
  3000  00EF08  6E04               	movwf	FifoDequeue@buffer+1,c
  3001  00EF0A  ECBF  F076         	call	_FifoDequeue	;wreg free
  3002  00EF0E  C003  F008         	movff	?_FifoDequeue,DigitalBreakout@newData
  3003  00EF12  C004  F009         	movff	?_FifoDequeue+1,DigitalBreakout@newData+1
  3004  00EF16  EC02  F079         	call	_DigitalBreakout	;wreg free
  3005  00EF1A                     l96:
  3006                           
  3007                           ;main.c: 221: }
  3008                           ;main.c: 224: if (IsTransmitterReady(1) && !IsFifoEmpty(&buffers[1])) {
  3009  00EF1A  0E01               	movlw	1
  3010  00EF1C  EC74  F075         	call	_IsTransmitterReady
  3011  00EF20  0900               	iorlw	0
  3012  00EF22  B4D8               	btfsc	status,2,c
  3013  00EF24  0012               	return	
  3014  00EF26  0E25               	movlw	low (_buffers+68)
  3015  00EF28  6E01               	movwf	IsFifoEmpty@buffer,c
  3016  00EF2A  0E01               	movlw	high (_buffers+68)
  3017  00EF2C  6E02               	movwf	IsFifoEmpty@buffer+1,c
  3018  00EF2E  EC67  F075         	call	_IsFifoEmpty	;wreg free
  3019  00EF32  0900               	iorlw	0
  3020  00EF34  A4D8               	btfss	status,2,c
  3021  00EF36  0012               	return	
  3022                           
  3023                           ;main.c: 225: PutChar9Default(FifoDequeue(&buffers[1]));
  3024  00EF38  0E25               	movlw	low (_buffers+68)
  3025  00EF3A  6E03               	movwf	FifoDequeue@buffer,c
  3026  00EF3C  0E01               	movlw	high (_buffers+68)
  3027  00EF3E  6E04               	movwf	FifoDequeue@buffer+1,c
  3028  00EF40  ECBF  F076         	call	_FifoDequeue	;wreg free
  3029  00EF44  C003  F008         	movff	?_FifoDequeue,PutChar9Default@data
  3030  00EF48  C004  F009         	movff	?_FifoDequeue+1,PutChar9Default@data+1
  3031  00EF4C  EC4A  F075         	call	_PutChar9Default	;wreg free
  3032  00EF50  0012               	return	
  3033  00EF52                     __end_of_TinyDelay:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           intcon	equ	0xFF2
  3042                           postinc0	equ	0xFEE
  3043                           wreg	equ	0xFE8
  3044                           postdec1	equ	0xFE5
  3045                           fsr1h	equ	0xFE2
  3046                           fsr1l	equ	0xFE1
  3047                           indf2	equ	0xFDF
  3048                           postinc2	equ	0xFDE
  3049                           postdec2	equ	0xFDD
  3050                           fsr2h	equ	0xFDA
  3051                           fsr2l	equ	0xFD9
  3052                           status	equ	0xFD8
  3053                           
  3054 ;; *************** function _PutChar9Default *****************
  3055 ;; Defined at:
  3056 ;;		line 259 in file "uart.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;  data            2    7[COMRAM] unsigned int 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      void 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3070 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;Total ram usage:        2 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    2
  3077 ;; This function calls:
  3078 ;;		_PutChar9
  3079 ;; This function is called by:
  3080 ;;		_TinyDelay
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text6
  3085  00EA94                     __ptext6:
  3086                           	opt stack 0
  3087  00EA94                     _PutChar9Default:
  3088                           	opt stack 27
  3089                           
  3090                           ;uart.c: 260: PutChar9(1, data);
  3091                           
  3092                           ;incstack = 0
  3093  00EA94  C008  F002         	movff	PutChar9Default@data,PutChar9@data
  3094  00EA98  C009  F003         	movff	PutChar9Default@data+1,PutChar9@data+1
  3095  00EA9C  0E01               	movlw	1
  3096  00EA9E  EC07  F076         	call	_PutChar9
  3097  00EAA2  0012               	return		;funcret
  3098  00EAA4                     __end_of_PutChar9Default:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           prodh	equ	0xFF4
  3105                           prodl	equ	0xFF3
  3106                           intcon	equ	0xFF2
  3107                           postinc0	equ	0xFEE
  3108                           wreg	equ	0xFE8
  3109                           postdec1	equ	0xFE5
  3110                           fsr1h	equ	0xFE2
  3111                           fsr1l	equ	0xFE1
  3112                           indf2	equ	0xFDF
  3113                           postinc2	equ	0xFDE
  3114                           postdec2	equ	0xFDD
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _PutChar9 *****************
  3120 ;; Defined at:
  3121 ;;		line 222 in file "uart.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  uart_index      1    wreg     unsigned char 
  3124 ;;  data            2    1[COMRAM] unsigned int 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  uart_index      1    3[COMRAM] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;Total ram usage:        3 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    1
  3143 ;; This function calls:
  3144 ;;		_DisableTransceiverTX
  3145 ;;		_EnableTransceiverTX
  3146 ;;		__GetTxInterruptFlag
  3147 ;; This function is called by:
  3148 ;;		_PutChar9Default
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text7
  3153  00EC0E                     __ptext7:
  3154                           	opt stack 0
  3155  00EC0E                     _PutChar9:
  3156                           	opt stack 27
  3157                           
  3158                           ;incstack = 0
  3159                           ;PutChar9@uart_index stored from wreg
  3160  00EC0E  6E04               	movwf	PutChar9@uart_index,c
  3161                           
  3162                           ;uart.c: 224: EnableTransceiverTX(uart_index);
  3163  00EC10  5004               	movf	PutChar9@uart_index,w,c
  3164  00EC12  EC43  F075         	call	_EnableTransceiverTX
  3165  00EC16  5004               	movf	PutChar9@uart_index,w,c
  3166  00EC18  EC92  F075         	call	__GetTxInterruptFlag
  3167  00EC1C  0900               	iorlw	0
  3168  00EC1E  B4D8               	btfsc	status,2,c
  3169  00EC20  D7FA               	goto	l285
  3170                           
  3171                           ;uart.c: 230: if (data > 0x00FF) {
  3172  00EC22  0403               	decf	PutChar9@data+1,w,c
  3173  00EC24  A0D8               	btfss	status,0,c
  3174  00EC26  D00B               	goto	l287
  3175                           
  3176                           ;uart.c: 231: if (uart_index == 1) {
  3177  00EC28  0404               	decf	PutChar9@uart_index,w,c
  3178  00EC2A  A4D8               	btfss	status,2,c
  3179  00EC2C  D002               	goto	l288
  3180                           
  3181                           ;uart.c: 232: TXSTA1bits.TX9 = 1;
  3182  00EC2E  8CAC               	bsf	4012,6,c	;volatile
  3183                           
  3184                           ;uart.c: 233: } else if (uart_index == 2) {
  3185  00EC30  D00F               	goto	l294
  3186  00EC32                     l288:
  3187  00EC32  0E02               	movlw	2
  3188  00EC34  1804               	xorwf	PutChar9@uart_index,w,c
  3189  00EC36  A4D8               	btfss	status,2,c
  3190  00EC38  D00B               	goto	l294
  3191                           
  3192                           ;uart.c: 234: TXSTA2bits.TX9 = 1;
  3193  00EC3A  8C72               	bsf	3954,6,c	;volatile
  3194                           
  3195                           ;uart.c: 235: }
  3196                           ;uart.c: 236: } else {
  3197  00EC3C  D009               	goto	l294
  3198  00EC3E                     l287:
  3199                           
  3200                           ;uart.c: 237: if (uart_index == 1) {
  3201  00EC3E  0404               	decf	PutChar9@uart_index,w,c
  3202  00EC40  A4D8               	btfss	status,2,c
  3203  00EC42  D002               	goto	l292
  3204                           
  3205                           ;uart.c: 238: TXSTA1bits.TX9 = 0;
  3206  00EC44  9CAC               	bcf	4012,6,c	;volatile
  3207                           
  3208                           ;uart.c: 239: } else if (uart_index == 2) {
  3209  00EC46  D004               	goto	l294
  3210  00EC48                     l292:
  3211  00EC48  0E02               	movlw	2
  3212  00EC4A  1804               	xorwf	PutChar9@uart_index,w,c
  3213  00EC4C  B4D8               	btfsc	status,2,c
  3214                           
  3215                           ;uart.c: 240: TXSTA2bits.TX9 = 0;
  3216  00EC4E  9C72               	bcf	3954,6,c	;volatile
  3217  00EC50                     l294:
  3218                           
  3219                           ;uart.c: 241: }
  3220                           ;uart.c: 242: }
  3221                           ;uart.c: 244: if (uart_index == 1) {
  3222  00EC50  0404               	decf	PutChar9@uart_index,w,c
  3223  00EC52  A4D8               	btfss	status,2,c
  3224  00EC54  D007               	goto	l295
  3225                           
  3226                           ;uart.c: 245: TXREG1 = (unsigned char)(data & 0x00FF);
  3227  00EC56  C002  FFAD         	movff	PutChar9@data,4013	;volatile
  3228  00EC5A  A2AC               	btfss	4012,1,c	;volatile
  3229  00EC5C  D7FE               	goto	l297
  3230  00EC5E                     u1340:
  3231                           
  3232                           ;uart.c: 248: while (!TXSTA1bits.TRMT);
  3233  00EC5E  B2AC               	btfsc	4012,1,c	;volatile
  3234  00EC60  D00B               	goto	u1380
  3235  00EC62  D7FD               	goto	u1340
  3236  00EC64                     l295:
  3237  00EC64  0E02               	movlw	2
  3238  00EC66  1804               	xorwf	PutChar9@uart_index,w,c
  3239  00EC68  A4D8               	btfss	status,2,c
  3240  00EC6A  D006               	goto	u1380
  3241                           
  3242                           ;uart.c: 250: TXREG2 = (unsigned char)(data & 0x00FF);
  3243  00EC6C  C002  FF73         	movff	PutChar9@data,3955	;volatile
  3244  00EC70  A272               	btfss	3954,1,c	;volatile
  3245  00EC72  D7FE               	goto	l305
  3246  00EC74                     u1370:
  3247                           
  3248                           ;uart.c: 253: while (!TXSTA2bits.TRMT);
  3249  00EC74  A272               	btfss	3954,1,c	;volatile
  3250  00EC76  D7FE               	goto	u1370
  3251  00EC78                     u1380:
  3252                           
  3253                           ;uart.c: 254: }
  3254                           ;uart.c: 256: DisableTransceiverTX(uart_index);
  3255  00EC78  5004               	movf	PutChar9@uart_index,w,c
  3256  00EC7A  EC3C  F075         	call	_DisableTransceiverTX
  3257  00EC7E  0012               	return		;funcret
  3258  00EC80                     __end_of_PutChar9:
  3259                           	opt stack 0
  3260                           tblptru	equ	0xFF8
  3261                           tblptrh	equ	0xFF7
  3262                           tblptrl	equ	0xFF6
  3263                           tablat	equ	0xFF5
  3264                           prodh	equ	0xFF4
  3265                           prodl	equ	0xFF3
  3266                           intcon	equ	0xFF2
  3267                           postinc0	equ	0xFEE
  3268                           wreg	equ	0xFE8
  3269                           postdec1	equ	0xFE5
  3270                           fsr1h	equ	0xFE2
  3271                           fsr1l	equ	0xFE1
  3272                           indf2	equ	0xFDF
  3273                           postinc2	equ	0xFDE
  3274                           postdec2	equ	0xFDD
  3275                           fsr2h	equ	0xFDA
  3276                           fsr2l	equ	0xFD9
  3277                           status	equ	0xFD8
  3278                           
  3279 ;; *************** function _EnableTransceiverTX *****************
  3280 ;; Defined at:
  3281 ;;		line 263 in file "uart.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  uart_index      1    wreg     unsigned char 
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;  uart_index      1    0[COMRAM] unsigned char 
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		wreg, status,2, status,0
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;Total ram usage:        1 bytes
  3300 ;; Hardware stack levels used:    1
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		_PutChar9
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text8
  3309  00EA86                     __ptext8:
  3310                           	opt stack 0
  3311  00EA86                     _EnableTransceiverTX:
  3312                           	opt stack 27
  3313                           
  3314                           ;incstack = 0
  3315                           ;EnableTransceiverTX@uart_index stored from wreg
  3316  00EA86  6E01               	movwf	EnableTransceiverTX@uart_index,c
  3317                           
  3318                           ;uart.c: 264: if (uart_index == 1) {
  3319  00EA88  0401               	decf	EnableTransceiverTX@uart_index,w,c
  3320  00EA8A  A4D8               	btfss	status,2,c
  3321  00EA8C  0012               	return	
  3322                           
  3323                           ;uart.c: 265: TRISAbits.TRISA5 = 0;
  3324  00EA8E  9A92               	bcf	3986,5,c	;volatile
  3325                           
  3326                           ;uart.c: 266: LATAbits.LATA5 = 1;
  3327  00EA90  8A89               	bsf	3977,5,c	;volatile
  3328  00EA92  0012               	return	
  3329  00EA94                     __end_of_EnableTransceiverTX:
  3330                           	opt stack 0
  3331                           tblptru	equ	0xFF8
  3332                           tblptrh	equ	0xFF7
  3333                           tblptrl	equ	0xFF6
  3334                           tablat	equ	0xFF5
  3335                           prodh	equ	0xFF4
  3336                           prodl	equ	0xFF3
  3337                           intcon	equ	0xFF2
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           postdec1	equ	0xFE5
  3341                           fsr1h	equ	0xFE2
  3342                           fsr1l	equ	0xFE1
  3343                           indf2	equ	0xFDF
  3344                           postinc2	equ	0xFDE
  3345                           postdec2	equ	0xFDD
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _DisableTransceiverTX *****************
  3351 ;; Defined at:
  3352 ;;		line 273 in file "uart.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  uart_index      1    wreg     unsigned char 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;  uart_index      1    0[COMRAM] unsigned char 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, status,2, status,0
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;Total ram usage:        1 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; This function calls:
  3373 ;;		Nothing
  3374 ;; This function is called by:
  3375 ;;		_PutChar9
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text9
  3380  00EA78                     __ptext9:
  3381                           	opt stack 0
  3382  00EA78                     _DisableTransceiverTX:
  3383                           	opt stack 27
  3384                           
  3385                           ;incstack = 0
  3386                           ;DisableTransceiverTX@uart_index stored from wreg
  3387  00EA78  6E01               	movwf	DisableTransceiverTX@uart_index,c
  3388                           
  3389                           ;uart.c: 274: if (uart_index == 1) {
  3390  00EA7A  0401               	decf	DisableTransceiverTX@uart_index,w,c
  3391  00EA7C  A4D8               	btfss	status,2,c
  3392  00EA7E  0012               	return	
  3393                           
  3394                           ;uart.c: 275: TRISAbits.TRISA5 = 0;
  3395  00EA80  9A92               	bcf	3986,5,c	;volatile
  3396                           
  3397                           ;uart.c: 276: LATAbits.LATA5 = 0;
  3398  00EA82  9A89               	bcf	3977,5,c	;volatile
  3399  00EA84  0012               	return	
  3400  00EA86                     __end_of_DisableTransceiverTX:
  3401                           	opt stack 0
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           intcon	equ	0xFF2
  3409                           postinc0	equ	0xFEE
  3410                           wreg	equ	0xFE8
  3411                           postdec1	equ	0xFE5
  3412                           fsr1h	equ	0xFE2
  3413                           fsr1l	equ	0xFE1
  3414                           indf2	equ	0xFDF
  3415                           postinc2	equ	0xFDE
  3416                           postdec2	equ	0xFDD
  3417                           fsr2h	equ	0xFDA
  3418                           fsr2l	equ	0xFD9
  3419                           status	equ	0xFD8
  3420                           
  3421 ;; *************** function _IsTransmitterReady *****************
  3422 ;; Defined at:
  3423 ;;		line 215 in file "uart.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  uart_index      1    wreg     unsigned char 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;  uart_index      1    1[COMRAM] unsigned char 
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      unsigned char 
  3430 ;; Registers used:
  3431 ;;		wreg, status,2, status,0, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;Total ram usage:        1 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    1
  3444 ;; This function calls:
  3445 ;;		_IsTransmitterEnabled
  3446 ;;		__GetTxInterruptFlag
  3447 ;; This function is called by:
  3448 ;;		_TinyDelay
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           	psect	text10
  3453  00EAE8                     __ptext10:
  3454                           	opt stack 0
  3455  00EAE8                     _IsTransmitterReady:
  3456                           	opt stack 28
  3457                           
  3458                           ;incstack = 0
  3459                           ;IsTransmitterReady@uart_index stored from wreg
  3460  00EAE8  6E02               	movwf	IsTransmitterReady@uart_index,c
  3461                           
  3462                           ;uart.c: 216: if (IsTransmitterEnabled(uart_index)) {
  3463  00EAEA  5002               	movf	IsTransmitterReady@uart_index,w,c
  3464  00EAEC  EC81  F075         	call	_IsTransmitterEnabled
  3465  00EAF0  0900               	iorlw	0
  3466  00EAF2  B4D8               	btfsc	status,2,c
  3467  00EAF4  D004               	goto	l280
  3468                           
  3469                           ;uart.c: 217: return _GetTxInterruptFlag(uart_index);
  3470  00EAF6  5002               	movf	IsTransmitterReady@uart_index,w,c
  3471  00EAF8  EC92  F075         	call	__GetTxInterruptFlag
  3472  00EAFC  0012               	return	
  3473  00EAFE                     l280:
  3474                           
  3475                           ;uart.c: 218: }
  3476                           ;uart.c: 219: return 0;
  3477  00EAFE  0E00               	movlw	0
  3478  00EB00  0012               	return	
  3479  00EB02                     __end_of_IsTransmitterReady:
  3480                           	opt stack 0
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           intcon	equ	0xFF2
  3488                           postinc0	equ	0xFEE
  3489                           wreg	equ	0xFE8
  3490                           postdec1	equ	0xFE5
  3491                           fsr1h	equ	0xFE2
  3492                           fsr1l	equ	0xFE1
  3493                           indf2	equ	0xFDF
  3494                           postinc2	equ	0xFDE
  3495                           postdec2	equ	0xFDD
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function __GetTxInterruptFlag *****************
  3501 ;; Defined at:
  3502 ;;		line 303 in file "uart.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;  uart_index      1    wreg     unsigned char 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  uart_index      1    0[COMRAM] unsigned char 
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  1    wreg      unsigned char 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;Total ram usage:        1 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		_IsTransmitterReady
  3526 ;;		_PutChar9
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text11
  3531  00EB24                     __ptext11:
  3532                           	opt stack 0
  3533  00EB24                     __GetTxInterruptFlag:
  3534                           	opt stack 27
  3535                           
  3536                           ;incstack = 0
  3537                           ;__GetTxInterruptFlag@uart_index stored from wreg
  3538  00EB24  6E01               	movwf	__GetTxInterruptFlag@uart_index,c
  3539                           
  3540                           ;uart.c: 304: if (uart_index == 1) {
  3541  00EB26  0401               	decf	__GetTxInterruptFlag@uart_index,w,c
  3542  00EB28  A4D8               	btfss	status,2,c
  3543  00EB2A  D004               	goto	l332
  3544                           
  3545                           ;uart.c: 305: if (PIR1bits.TX1IF)
  3546  00EB2C  A89E               	btfss	3998,4,c	;volatile
  3547  00EB2E  D009               	goto	l337
  3548                           
  3549                           ;uart.c: 306: return 1;
  3550  00EB30  0E01               	movlw	1
  3551  00EB32  0012               	return	
  3552  00EB34                     l332:
  3553  00EB34  0E02               	movlw	2
  3554  00EB36  1801               	xorwf	__GetTxInterruptFlag@uart_index,w,c
  3555  00EB38  B4D8               	btfsc	status,2,c
  3556                           
  3557                           ;uart.c: 308: if (PIR3bits.TX2IF)
  3558  00EB3A  A8A4               	btfss	4004,4,c	;volatile
  3559  00EB3C  D002               	goto	l337
  3560                           
  3561                           ;uart.c: 309: return 1;
  3562  00EB3E  0E01               	movlw	1
  3563  00EB40  0012               	return	
  3564  00EB42                     l337:
  3565                           
  3566                           ;uart.c: 310: }
  3567                           ;uart.c: 311: return 0;
  3568  00EB42  0E00               	movlw	0
  3569  00EB44  0012               	return	
  3570  00EB46                     __end_of__GetTxInterruptFlag:
  3571                           	opt stack 0
  3572                           tblptru	equ	0xFF8
  3573                           tblptrh	equ	0xFF7
  3574                           tblptrl	equ	0xFF6
  3575                           tablat	equ	0xFF5
  3576                           prodh	equ	0xFF4
  3577                           prodl	equ	0xFF3
  3578                           intcon	equ	0xFF2
  3579                           postinc0	equ	0xFEE
  3580                           wreg	equ	0xFE8
  3581                           postdec1	equ	0xFE5
  3582                           fsr1h	equ	0xFE2
  3583                           fsr1l	equ	0xFE1
  3584                           indf2	equ	0xFDF
  3585                           postinc2	equ	0xFDE
  3586                           postdec2	equ	0xFDD
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591 ;; *************** function _IsTransmitterEnabled *****************
  3592 ;; Defined at:
  3593 ;;		line 201 in file "uart.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;  uart_index      1    wreg     unsigned char 
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;  uart_index      1    0[COMRAM] unsigned char 
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      unsigned char 
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3608 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;Total ram usage:        1 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; This function calls:
  3614 ;;		Nothing
  3615 ;; This function is called by:
  3616 ;;		_IsTransmitterReady
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text12
  3621  00EB02                     __ptext12:
  3622                           	opt stack 0
  3623  00EB02                     _IsTransmitterEnabled:
  3624                           	opt stack 28
  3625                           
  3626                           ;incstack = 0
  3627                           ;IsTransmitterEnabled@uart_index stored from wreg
  3628  00EB02  6E01               	movwf	IsTransmitterEnabled@uart_index,c
  3629                           
  3630                           ;uart.c: 202: if (uart_index == 1) {
  3631  00EB04  0401               	decf	IsTransmitterEnabled@uart_index,w,c
  3632  00EB06  A4D8               	btfss	status,2,c
  3633  00EB08  D004               	goto	l272
  3634                           
  3635                           ;uart.c: 203: if (TXSTA1bits.TXEN1) {
  3636  00EB0A  AAAC               	btfss	4012,5,c	;volatile
  3637  00EB0C  D009               	goto	l277
  3638                           
  3639                           ;uart.c: 204: return 1;
  3640  00EB0E  0E01               	movlw	1
  3641  00EB10  0012               	return	
  3642  00EB12                     l272:
  3643  00EB12  0E02               	movlw	2
  3644  00EB14  1801               	xorwf	IsTransmitterEnabled@uart_index,w,c
  3645  00EB16  B4D8               	btfsc	status,2,c
  3646                           
  3647                           ;uart.c: 207: if (TXSTA2bits.TXEN2) {
  3648  00EB18  AA72               	btfss	3954,5,c	;volatile
  3649  00EB1A  D002               	goto	l277
  3650                           
  3651                           ;uart.c: 208: return 1;
  3652  00EB1C  0E01               	movlw	1
  3653  00EB1E  0012               	return	
  3654  00EB20                     l277:
  3655                           
  3656                           ;uart.c: 209: }
  3657                           ;uart.c: 210: }
  3658                           ;uart.c: 212: return 0;
  3659  00EB20  0E00               	movlw	0
  3660  00EB22  0012               	return	
  3661  00EB24                     __end_of_IsTransmitterEnabled:
  3662                           	opt stack 0
  3663                           tblptru	equ	0xFF8
  3664                           tblptrh	equ	0xFF7
  3665                           tblptrl	equ	0xFF6
  3666                           tablat	equ	0xFF5
  3667                           prodh	equ	0xFF4
  3668                           prodl	equ	0xFF3
  3669                           intcon	equ	0xFF2
  3670                           postinc0	equ	0xFEE
  3671                           wreg	equ	0xFE8
  3672                           postdec1	equ	0xFE5
  3673                           fsr1h	equ	0xFE2
  3674                           fsr1l	equ	0xFE1
  3675                           indf2	equ	0xFDF
  3676                           postinc2	equ	0xFDE
  3677                           postdec2	equ	0xFDD
  3678                           fsr2h	equ	0xFDA
  3679                           fsr2l	equ	0xFD9
  3680                           status	equ	0xFD8
  3681                           
  3682 ;; *************** function _GetChar9 *****************
  3683 ;; Defined at:
  3684 ;;		line 336 in file "uart.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;  uart_index      1    wreg     unsigned char 
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;  uart_index      1    3[COMRAM] unsigned char 
  3689 ;;  data            2    4[COMRAM] unsigned int 
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  2    1[COMRAM] unsigned int 
  3692 ;; Registers used:
  3693 ;;		wreg, status,2, status,0, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3699 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;Total ram usage:        5 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:    1
  3706 ;; This function calls:
  3707 ;;		_IsRxDataAvailable
  3708 ;; This function is called by:
  3709 ;;		_TinyDelay
  3710 ;;		_GetChar9Default
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text13
  3715  00EF52                     __ptext13:
  3716                           	opt stack 0
  3717  00EF52                     _GetChar9:
  3718                           	opt stack 28
  3719                           
  3720                           ;incstack = 0
  3721                           ;GetChar9@uart_index stored from wreg
  3722  00EF52  6E04               	movwf	GetChar9@uart_index,c
  3723                           
  3724                           ;uart.c: 337: if (IsRxDataAvailable(uart_index)) {
  3725  00EF54  5004               	movf	GetChar9@uart_index,w,c
  3726  00EF56  ECB7  F075         	call	_IsRxDataAvailable
  3727  00EF5A  0900               	iorlw	0
  3728  00EF5C  B4D8               	btfsc	status,2,c
  3729  00EF5E  D055               	goto	l363
  3730                           
  3731                           ;uart.c: 338: unsigned int data = 0x0000;
  3732  00EF60  0E00               	movlw	0
  3733  00EF62  6E06               	movwf	GetChar9@data+1,c
  3734  00EF64  0E00               	movlw	0
  3735  00EF66  6E05               	movwf	GetChar9@data,c
  3736                           
  3737                           ;uart.c: 340: if (uart_index == 1) {
  3738  00EF68  0404               	decf	GetChar9@uart_index,w,c
  3739  00EF6A  A4D8               	btfss	status,2,c
  3740  00EF6C  D025               	goto	l357
  3741                           
  3742                           ;uart.c: 342: if (RCSTA1bits.FERR) {
  3743  00EF6E  A4AB               	btfss	4011,2,c	;volatile
  3744  00EF70  D008               	goto	l358
  3745                           
  3746                           ;uart.c: 343: RCSTA1bits.CREN = 0;
  3747  00EF72  98AB               	bcf	4011,4,c	;volatile
  3748                           
  3749                           ;uart.c: 344: RCSTA1bits.CREN = 1;
  3750  00EF74  88AB               	bsf	4011,4,c	;volatile
  3751                           
  3752                           ;uart.c: 345: data = data | 0x0200;
  3753  00EF76  0E00               	movlw	0
  3754  00EF78  1005               	iorwf	GetChar9@data,w,c
  3755  00EF7A  6E05               	movwf	GetChar9@data,c
  3756  00EF7C  0E02               	movlw	2
  3757  00EF7E  1006               	iorwf	GetChar9@data+1,w,c
  3758  00EF80  6E06               	movwf	GetChar9@data+1,c
  3759  00EF82                     l358:
  3760                           
  3761                           ;uart.c: 346: }
  3762                           ;uart.c: 347: if (RCSTA1bits.OERR) {
  3763  00EF82  A2AB               	btfss	4011,1,c	;volatile
  3764  00EF84  D008               	goto	l359
  3765                           
  3766                           ;uart.c: 348: RCSTA1bits.CREN = 0;
  3767  00EF86  98AB               	bcf	4011,4,c	;volatile
  3768                           
  3769                           ;uart.c: 349: RCSTA1bits.CREN = 1;
  3770  00EF88  88AB               	bsf	4011,4,c	;volatile
  3771                           
  3772                           ;uart.c: 350: data = data | 0x0400;
  3773  00EF8A  0E00               	movlw	0
  3774  00EF8C  1005               	iorwf	GetChar9@data,w,c
  3775  00EF8E  6E05               	movwf	GetChar9@data,c
  3776  00EF90  0E04               	movlw	4
  3777  00EF92  1006               	iorwf	GetChar9@data+1,w,c
  3778  00EF94  6E06               	movwf	GetChar9@data+1,c
  3779  00EF96                     l359:
  3780                           
  3781                           ;uart.c: 351: }
  3782                           ;uart.c: 354: if (RCSTA1bits.RX9D == 1) {
  3783  00EF96  A0AB               	btfss	4011,0,c	;volatile
  3784  00EF98  D006               	goto	l360
  3785                           
  3786                           ;uart.c: 355: data = data | 0x0100;
  3787  00EF9A  0E00               	movlw	0
  3788  00EF9C  1005               	iorwf	GetChar9@data,w,c
  3789  00EF9E  6E05               	movwf	GetChar9@data,c
  3790  00EFA0  0E01               	movlw	1
  3791  00EFA2  1006               	iorwf	GetChar9@data+1,w,c
  3792  00EFA4  6E06               	movwf	GetChar9@data+1,c
  3793  00EFA6                     l360:
  3794                           
  3795                           ;uart.c: 356: }
  3796                           ;uart.c: 358: data += RCREG1;
  3797  00EFA6  50AE               	movf	4014,w,c	;volatile
  3798  00EFA8  2605               	addwf	GetChar9@data,f,c
  3799  00EFAA  0E00               	movlw	0
  3800  00EFAC  2206               	addwfc	GetChar9@data+1,f,c
  3801                           
  3802                           ;uart.c: 359: return data;
  3803  00EFAE  C005  F002         	movff	GetChar9@data,?_GetChar9
  3804  00EFB2  C006  F003         	movff	GetChar9@data+1,?_GetChar9+1
  3805  00EFB6  0012               	return	
  3806  00EFB8                     l357:
  3807  00EFB8  0E02               	movlw	2
  3808  00EFBA  1804               	xorwf	GetChar9@uart_index,w,c
  3809  00EFBC  A4D8               	btfss	status,2,c
  3810  00EFBE  D025               	goto	l363
  3811                           
  3812                           ;uart.c: 363: if (RCSTA2bits.FERR) {
  3813  00EFC0  A471               	btfss	3953,2,c	;volatile
  3814  00EFC2  D008               	goto	l364
  3815                           
  3816                           ;uart.c: 364: RCSTA2bits.CREN = 0;
  3817  00EFC4  9871               	bcf	3953,4,c	;volatile
  3818                           
  3819                           ;uart.c: 365: RCSTA2bits.CREN = 1;
  3820  00EFC6  8871               	bsf	3953,4,c	;volatile
  3821                           
  3822                           ;uart.c: 366: data = data | 0x0200;
  3823  00EFC8  0E00               	movlw	0
  3824  00EFCA  1005               	iorwf	GetChar9@data,w,c
  3825  00EFCC  6E05               	movwf	GetChar9@data,c
  3826  00EFCE  0E02               	movlw	2
  3827  00EFD0  1006               	iorwf	GetChar9@data+1,w,c
  3828  00EFD2  6E06               	movwf	GetChar9@data+1,c
  3829  00EFD4                     l364:
  3830                           
  3831                           ;uart.c: 367: }
  3832                           ;uart.c: 368: if (RCSTA2bits.OERR) {
  3833  00EFD4  A271               	btfss	3953,1,c	;volatile
  3834  00EFD6  D008               	goto	l365
  3835                           
  3836                           ;uart.c: 369: RCSTA2bits.CREN = 0;
  3837  00EFD8  9871               	bcf	3953,4,c	;volatile
  3838                           
  3839                           ;uart.c: 370: RCSTA2bits.CREN = 1;
  3840  00EFDA  8871               	bsf	3953,4,c	;volatile
  3841                           
  3842                           ;uart.c: 371: data = data | 0x0400;
  3843  00EFDC  0E00               	movlw	0
  3844  00EFDE  1005               	iorwf	GetChar9@data,w,c
  3845  00EFE0  6E05               	movwf	GetChar9@data,c
  3846  00EFE2  0E04               	movlw	4
  3847  00EFE4  1006               	iorwf	GetChar9@data+1,w,c
  3848  00EFE6  6E06               	movwf	GetChar9@data+1,c
  3849  00EFE8                     l365:
  3850                           
  3851                           ;uart.c: 372: }
  3852                           ;uart.c: 375: if (RCSTA2bits.RX9D == 1) {
  3853  00EFE8  A071               	btfss	3953,0,c	;volatile
  3854  00EFEA  D006               	goto	l366
  3855                           
  3856                           ;uart.c: 376: data = data | 0x0100;
  3857  00EFEC  0E00               	movlw	0
  3858  00EFEE  1005               	iorwf	GetChar9@data,w,c
  3859  00EFF0  6E05               	movwf	GetChar9@data,c
  3860  00EFF2  0E01               	movlw	1
  3861  00EFF4  1006               	iorwf	GetChar9@data+1,w,c
  3862  00EFF6  6E06               	movwf	GetChar9@data+1,c
  3863  00EFF8                     l366:
  3864                           
  3865                           ;uart.c: 377: }
  3866                           ;uart.c: 379: data += RCREG2;
  3867  00EFF8  5074               	movf	3956,w,c	;volatile
  3868  00EFFA  2605               	addwf	GetChar9@data,f,c
  3869  00EFFC  0E00               	movlw	0
  3870  00EFFE  2206               	addwfc	GetChar9@data+1,f,c
  3871                           
  3872                           ;uart.c: 380: return data;
  3873  00F000  C005  F002         	movff	GetChar9@data,?_GetChar9
  3874  00F004  C006  F003         	movff	GetChar9@data+1,?_GetChar9+1
  3875  00F008  0012               	return	
  3876  00F00A                     l363:
  3877                           
  3878                           ;uart.c: 381: }
  3879                           ;uart.c: 382: }
  3880                           ;uart.c: 383: return 0x0800;
  3881  00F00A  0E08               	movlw	8
  3882  00F00C  6E03               	movwf	?_GetChar9+1,c
  3883  00F00E  0E00               	movlw	0
  3884  00F010  6E02               	movwf	?_GetChar9,c
  3885  00F012  0012               	return	
  3886  00F014                     __end_of_GetChar9:
  3887                           	opt stack 0
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           postinc0	equ	0xFEE
  3896                           wreg	equ	0xFE8
  3897                           postdec1	equ	0xFE5
  3898                           fsr1h	equ	0xFE2
  3899                           fsr1l	equ	0xFE1
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8
  3906                           
  3907 ;; *************** function _IsRxDataAvailable *****************
  3908 ;; Defined at:
  3909 ;;		line 325 in file "uart.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  uart_index      1    wreg     unsigned char 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  uart_index      1    0[COMRAM] unsigned char 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  1    wreg      unsigned char 
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;Total ram usage:        1 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; This function calls:
  3930 ;;		Nothing
  3931 ;; This function is called by:
  3932 ;;		_TinyDelay
  3933 ;;		_GetChar9
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           	psect	text14
  3938  00EB6E                     __ptext14:
  3939                           	opt stack 0
  3940  00EB6E                     _IsRxDataAvailable:
  3941                           	opt stack 29
  3942                           
  3943                           ;incstack = 0
  3944                           ;IsRxDataAvailable@uart_index stored from wreg
  3945  00EB6E  6E01               	movwf	IsRxDataAvailable@uart_index,c
  3946                           
  3947                           ;uart.c: 326: if (uart_index == 1) {
  3948  00EB70  0401               	decf	IsRxDataAvailable@uart_index,w,c
  3949  00EB72  A4D8               	btfss	status,2,c
  3950  00EB74  D005               	goto	l348
  3951                           
  3952                           ;uart.c: 327: if (RCSTA1bits.SPEN1 && PIR1bits.RC1IF)
  3953  00EB76  BEAB               	btfsc	4011,7,c	;volatile
  3954  00EB78  AA9E               	btfss	3998,5,c	;volatile
  3955  00EB7A  D00B               	goto	l353
  3956                           
  3957                           ;uart.c: 328: return 1;
  3958  00EB7C  0E01               	movlw	1
  3959  00EB7E  0012               	return	
  3960  00EB80                     l348:
  3961  00EB80  0E02               	movlw	2
  3962  00EB82  1801               	xorwf	IsRxDataAvailable@uart_index,w,c
  3963  00EB84  B4D8               	btfsc	status,2,c
  3964                           
  3965                           ;uart.c: 330: if (RCSTA2bits.SPEN2 && PIR3bits.RC2IF)
  3966  00EB86  AE71               	btfss	3953,7,c	;volatile
  3967  00EB88  D004               	goto	l353
  3968  00EB8A  AAA4               	btfss	4004,5,c	;volatile
  3969  00EB8C  D002               	goto	l353
  3970                           
  3971                           ;uart.c: 331: return 1;
  3972  00EB8E  0E01               	movlw	1
  3973  00EB90  0012               	return	
  3974  00EB92                     l353:
  3975                           
  3976                           ;uart.c: 332: }
  3977                           ;uart.c: 333: return 0;
  3978  00EB92  0E00               	movlw	0
  3979  00EB94  0012               	return	
  3980  00EB96                     __end_of_IsRxDataAvailable:
  3981                           	opt stack 0
  3982                           tblptru	equ	0xFF8
  3983                           tblptrh	equ	0xFF7
  3984                           tblptrl	equ	0xFF6
  3985                           tablat	equ	0xFF5
  3986                           prodh	equ	0xFF4
  3987                           prodl	equ	0xFF3
  3988                           intcon	equ	0xFF2
  3989                           postinc0	equ	0xFEE
  3990                           wreg	equ	0xFE8
  3991                           postdec1	equ	0xFE5
  3992                           fsr1h	equ	0xFE2
  3993                           fsr1l	equ	0xFE1
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           postdec2	equ	0xFDD
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function _FifoEnqueue *****************
  4002 ;; Defined at:
  4003 ;;		line 25 in file "fifo.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  buffer          2    4[COMRAM] PTR struct .
  4006 ;;		 -> buffers(272), 
  4007 ;;  data            2    6[COMRAM] unsigned int 
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;		None
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      unsigned char 
  4012 ;; Registers used:
  4013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4019 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;Total ram usage:        5 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    1
  4026 ;; This function calls:
  4027 ;;		_IsFifoFull
  4028 ;; This function is called by:
  4029 ;;		_main
  4030 ;;		_TinyDelay
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text15
  4035  00EC80                     __ptext15:
  4036                           	opt stack 0
  4037  00EC80                     _FifoEnqueue:
  4038                           	opt stack 28
  4039                           
  4040                           ;fifo.c: 26: if (IsFifoFull(buffer)) {
  4041                           
  4042                           ;incstack = 0
  4043  00EC80  C005  F001         	movff	FifoEnqueue@buffer,IsFifoFull@buffer
  4044  00EC84  C006  F002         	movff	FifoEnqueue@buffer+1,IsFifoFull@buffer+1
  4045  00EC88  ECA3  F075         	call	_IsFifoFull	;wreg free
  4046  00EC8C  0900               	iorlw	0
  4047  00EC8E  A4D8               	btfss	status,2,c
  4048  00EC90  0012               	return	
  4049                           
  4050                           ;fifo.c: 28: }
  4051                           ;fifo.c: 29: buffer->buffer[buffer->write] = data;
  4052                           
  4053                           ;fifo.c: 27: return 0;
  4054                           ;	Return value of _FifoEnqueue is never used
  4055  00EC92  EE20 F041          	lfsr	2,65
  4056  00EC96  5005               	movf	FifoEnqueue@buffer,w,c
  4057  00EC98  26D9               	addwf	fsr2l,f,c
  4058  00EC9A  5006               	movf	FifoEnqueue@buffer+1,w,c
  4059  00EC9C  22DA               	addwfc	fsr2h,f,c
  4060  00EC9E  50DF               	movf	indf2,w,c
  4061  00ECA0  6E09               	movwf	??_FifoEnqueue& (0+255),c
  4062  00ECA2  5009               	movf	??_FifoEnqueue,w,c
  4063  00ECA4  0D02               	mullw	2
  4064  00ECA6  50F3               	movf	prodl,w,c
  4065  00ECA8  2405               	addwf	FifoEnqueue@buffer,w,c
  4066  00ECAA  6ED9               	movwf	fsr2l,c
  4067  00ECAC  50F4               	movf	prodh,w,c
  4068  00ECAE  2006               	addwfc	FifoEnqueue@buffer+1,w,c
  4069  00ECB0  6EDA               	movwf	fsr2h,c
  4070  00ECB2  C007  FFDE         	movff	FifoEnqueue@data,postinc2
  4071  00ECB6  C008  FFDD         	movff	FifoEnqueue@data+1,postdec2
  4072                           
  4073                           ;fifo.c: 30: buffer->write++;
  4074  00ECBA  EE20 F041          	lfsr	2,65
  4075  00ECBE  5005               	movf	FifoEnqueue@buffer,w,c
  4076  00ECC0  26D9               	addwf	fsr2l,f,c
  4077  00ECC2  5006               	movf	FifoEnqueue@buffer+1,w,c
  4078  00ECC4  22DA               	addwfc	fsr2h,f,c
  4079  00ECC6  2ADF               	incf	indf2,f,c
  4080                           
  4081                           ;fifo.c: 31: if (buffer->write == 32)
  4082  00ECC8  EE20 F041          	lfsr	2,65
  4083  00ECCC  5005               	movf	FifoEnqueue@buffer,w,c
  4084  00ECCE  26D9               	addwf	fsr2l,f,c
  4085  00ECD0  5006               	movf	FifoEnqueue@buffer+1,w,c
  4086  00ECD2  22DA               	addwfc	fsr2h,f,c
  4087  00ECD4  0E20               	movlw	32
  4088  00ECD6  18DE               	xorwf	postinc2,w,c
  4089  00ECD8  A4D8               	btfss	status,2,c
  4090  00ECDA  D008               	goto	l385
  4091                           
  4092                           ;fifo.c: 32: buffer->write = 0;
  4093  00ECDC  EE20 F041          	lfsr	2,65
  4094  00ECE0  5005               	movf	FifoEnqueue@buffer,w,c
  4095  00ECE2  26D9               	addwf	fsr2l,f,c
  4096  00ECE4  5006               	movf	FifoEnqueue@buffer+1,w,c
  4097  00ECE6  22DA               	addwfc	fsr2h,f,c
  4098  00ECE8  0E00               	movlw	0
  4099  00ECEA  6EDF               	movwf	indf2,c
  4100  00ECEC                     l385:
  4101                           
  4102                           ;fifo.c: 33: buffer->currentCount++;
  4103  00ECEC  EE20 F042          	lfsr	2,66
  4104  00ECF0  5005               	movf	FifoEnqueue@buffer,w,c
  4105  00ECF2  26D9               	addwf	fsr2l,f,c
  4106  00ECF4  5006               	movf	FifoEnqueue@buffer+1,w,c
  4107  00ECF6  22DA               	addwfc	fsr2h,f,c
  4108  00ECF8  2ADF               	incf	indf2,f,c
  4109  00ECFA  0012               	return	
  4110  00ECFC                     __end_of_FifoEnqueue:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           postinc0	equ	0xFEE
  4120                           wreg	equ	0xFE8
  4121                           postdec1	equ	0xFE5
  4122                           fsr1h	equ	0xFE2
  4123                           fsr1l	equ	0xFE1
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _IsFifoFull *****************
  4132 ;; Defined at:
  4133 ;;		line 11 in file "fifo.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  buffer          2    0[COMRAM] PTR struct .
  4136 ;;		 -> buffers(272), 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      unsigned char 
  4141 ;; Registers used:
  4142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4148 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;Total ram usage:        4 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; This function calls:
  4155 ;;		Nothing
  4156 ;; This function is called by:
  4157 ;;		_TinyDelay
  4158 ;;		_FifoEnqueue
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text16
  4163  00EB46                     __ptext16:
  4164                           	opt stack 0
  4165  00EB46                     _IsFifoFull:
  4166                           	opt stack 29
  4167                           
  4168                           ;fifo.c: 12: if (buffer->currentCount == buffer->capacity) {
  4169                           
  4170                           ;incstack = 0
  4171  00EB46  EE20 F043          	lfsr	2,67
  4172  00EB4A  5001               	movf	IsFifoFull@buffer,w,c
  4173  00EB4C  26D9               	addwf	fsr2l,f,c
  4174  00EB4E  5002               	movf	IsFifoFull@buffer+1,w,c
  4175  00EB50  22DA               	addwfc	fsr2h,f,c
  4176  00EB52  EE10 F042          	lfsr	1,66
  4177  00EB56  5001               	movf	IsFifoFull@buffer,w,c
  4178  00EB58  26E1               	addwf	fsr1l,f,c
  4179  00EB5A  5002               	movf	IsFifoFull@buffer+1,w,c
  4180  00EB5C  22E2               	addwfc	fsr1h,f,c
  4181  00EB5E  50DE               	movf	postinc2,w,c
  4182  00EB60  18E6               	xorwf	postinc1,w,c
  4183  00EB62  A4D8               	btfss	status,2,c
  4184  00EB64  D002               	goto	l375
  4185                           
  4186                           ;fifo.c: 13: return 1;
  4187  00EB66  0E01               	movlw	1
  4188  00EB68  0012               	return	
  4189  00EB6A                     l375:
  4190                           
  4191                           ;fifo.c: 14: }
  4192                           ;fifo.c: 15: return 0;
  4193  00EB6A  0E00               	movlw	0
  4194  00EB6C  0012               	return	
  4195  00EB6E                     __end_of_IsFifoFull:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           postinc0	equ	0xFEE
  4205                           wreg	equ	0xFE8
  4206                           postinc1	equ	0xFE6
  4207                           postdec1	equ	0xFE5
  4208                           fsr1h	equ	0xFE2
  4209                           fsr1l	equ	0xFE1
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           postdec2	equ	0xFDD
  4213                           fsr2h	equ	0xFDA
  4214                           fsr2l	equ	0xFD9
  4215                           status	equ	0xFD8
  4216                           
  4217 ;; *************** function _FifoDequeue *****************
  4218 ;; Defined at:
  4219 ;;		line 37 in file "fifo.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  buffer          2    2[COMRAM] PTR struct .
  4222 ;;		 -> buffers(272), 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  data            2    5[COMRAM] unsigned int 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  2    2[COMRAM] unsigned int 
  4227 ;; Registers used:
  4228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4234 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;Total ram usage:        5 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    1
  4241 ;; This function calls:
  4242 ;;		_IsFifoEmpty
  4243 ;; This function is called by:
  4244 ;;		_TinyDelay
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text17
  4249  00ED7E                     __ptext17:
  4250                           	opt stack 0
  4251  00ED7E                     _FifoDequeue:
  4252                           	opt stack 28
  4253                           
  4254                           ;fifo.c: 38: unsigned int data;
  4255                           ;fifo.c: 39: if (IsFifoEmpty(buffer)) {
  4256                           
  4257                           ;incstack = 0
  4258  00ED7E  C003  F001         	movff	FifoDequeue@buffer,IsFifoEmpty@buffer
  4259  00ED82  C004  F002         	movff	FifoDequeue@buffer+1,IsFifoEmpty@buffer+1
  4260  00ED86  EC67  F075         	call	_IsFifoEmpty	;wreg free
  4261  00ED8A  0900               	iorlw	0
  4262  00ED8C  B4D8               	btfsc	status,2,c
  4263  00ED8E  D005               	goto	l388
  4264                           
  4265                           ;fifo.c: 40: return 0;
  4266  00ED90  0E00               	movlw	0
  4267  00ED92  6E04               	movwf	?_FifoDequeue+1,c
  4268  00ED94  0E00               	movlw	0
  4269  00ED96  6E03               	movwf	?_FifoDequeue,c
  4270  00ED98  0012               	return	
  4271  00ED9A                     l388:
  4272                           
  4273                           ;fifo.c: 41: }
  4274                           ;fifo.c: 42: data = buffer->buffer[buffer->read];
  4275  00ED9A  EE20 F040          	lfsr	2,64
  4276  00ED9E  5003               	movf	FifoDequeue@buffer,w,c
  4277  00EDA0  26D9               	addwf	fsr2l,f,c
  4278  00EDA2  5004               	movf	FifoDequeue@buffer+1,w,c
  4279  00EDA4  22DA               	addwfc	fsr2h,f,c
  4280  00EDA6  50DF               	movf	indf2,w,c
  4281  00EDA8  6E05               	movwf	??_FifoDequeue& (0+255),c
  4282  00EDAA  5005               	movf	??_FifoDequeue,w,c
  4283  00EDAC  0D02               	mullw	2
  4284  00EDAE  50F3               	movf	prodl,w,c
  4285  00EDB0  2403               	addwf	FifoDequeue@buffer,w,c
  4286  00EDB2  6ED9               	movwf	fsr2l,c
  4287  00EDB4  50F4               	movf	prodh,w,c
  4288  00EDB6  2004               	addwfc	FifoDequeue@buffer+1,w,c
  4289  00EDB8  6EDA               	movwf	fsr2h,c
  4290  00EDBA  CFDE F006          	movff	postinc2,FifoDequeue@data
  4291  00EDBE  CFDD F007          	movff	postdec2,FifoDequeue@data+1
  4292                           
  4293                           ;fifo.c: 43: buffer->read++;
  4294  00EDC2  EE20 F040          	lfsr	2,64
  4295  00EDC6  5003               	movf	FifoDequeue@buffer,w,c
  4296  00EDC8  26D9               	addwf	fsr2l,f,c
  4297  00EDCA  5004               	movf	FifoDequeue@buffer+1,w,c
  4298  00EDCC  22DA               	addwfc	fsr2h,f,c
  4299  00EDCE  2ADF               	incf	indf2,f,c
  4300                           
  4301                           ;fifo.c: 44: if (buffer->read == 32)
  4302  00EDD0  EE20 F040          	lfsr	2,64
  4303  00EDD4  5003               	movf	FifoDequeue@buffer,w,c
  4304  00EDD6  26D9               	addwf	fsr2l,f,c
  4305  00EDD8  5004               	movf	FifoDequeue@buffer+1,w,c
  4306  00EDDA  22DA               	addwfc	fsr2h,f,c
  4307  00EDDC  0E20               	movlw	32
  4308  00EDDE  18DE               	xorwf	postinc2,w,c
  4309  00EDE0  A4D8               	btfss	status,2,c
  4310  00EDE2  D008               	goto	l390
  4311                           
  4312                           ;fifo.c: 45: buffer->read = 0;
  4313  00EDE4  EE20 F040          	lfsr	2,64
  4314  00EDE8  5003               	movf	FifoDequeue@buffer,w,c
  4315  00EDEA  26D9               	addwf	fsr2l,f,c
  4316  00EDEC  5004               	movf	FifoDequeue@buffer+1,w,c
  4317  00EDEE  22DA               	addwfc	fsr2h,f,c
  4318  00EDF0  0E00               	movlw	0
  4319  00EDF2  6EDF               	movwf	indf2,c
  4320  00EDF4                     l390:
  4321                           
  4322                           ;fifo.c: 46: buffer->currentCount--;
  4323  00EDF4  EE20 F042          	lfsr	2,66
  4324  00EDF8  5003               	movf	FifoDequeue@buffer,w,c
  4325  00EDFA  26D9               	addwf	fsr2l,f,c
  4326  00EDFC  5004               	movf	FifoDequeue@buffer+1,w,c
  4327  00EDFE  22DA               	addwfc	fsr2h,f,c
  4328  00EE00  06DF               	decf	indf2,f,c
  4329                           
  4330                           ;fifo.c: 47: return data;
  4331  00EE02  C006  F003         	movff	FifoDequeue@data,?_FifoDequeue
  4332  00EE06  C007  F004         	movff	FifoDequeue@data+1,?_FifoDequeue+1
  4333  00EE0A  0012               	return	
  4334  00EE0C                     __end_of_FifoDequeue:
  4335                           	opt stack 0
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           intcon	equ	0xFF2
  4343                           postinc0	equ	0xFEE
  4344                           wreg	equ	0xFE8
  4345                           postinc1	equ	0xFE6
  4346                           postdec1	equ	0xFE5
  4347                           fsr1h	equ	0xFE2
  4348                           fsr1l	equ	0xFE1
  4349                           indf2	equ	0xFDF
  4350                           postinc2	equ	0xFDE
  4351                           postdec2	equ	0xFDD
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _IsFifoEmpty *****************
  4357 ;; Defined at:
  4358 ;;		line 18 in file "fifo.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  buffer          2    0[COMRAM] PTR struct .
  4361 ;;		 -> buffers(272), 
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;		None
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  1    wreg      unsigned char 
  4366 ;; Registers used:
  4367 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4373 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;Total ram usage:        2 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_main
  4383 ;;		_TinyDelay
  4384 ;;		_FifoDequeue
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text18
  4389  00EACE                     __ptext18:
  4390                           	opt stack 0
  4391  00EACE                     _IsFifoEmpty:
  4392                           	opt stack 29
  4393                           
  4394                           ;fifo.c: 19: if (buffer->currentCount == 0) {
  4395                           
  4396                           ;incstack = 0
  4397  00EACE  EE20 F042          	lfsr	2,66
  4398  00EAD2  5001               	movf	IsFifoEmpty@buffer,w,c
  4399  00EAD4  26D9               	addwf	fsr2l,f,c
  4400  00EAD6  5002               	movf	IsFifoEmpty@buffer+1,w,c
  4401  00EAD8  22DA               	addwfc	fsr2h,f,c
  4402  00EADA  50DF               	movf	indf2,w,c
  4403  00EADC  A4D8               	btfss	status,2,c
  4404  00EADE  D002               	goto	l379
  4405                           
  4406                           ;fifo.c: 20: return 1;
  4407  00EAE0  0E01               	movlw	1
  4408  00EAE2  0012               	return	
  4409  00EAE4                     l379:
  4410                           
  4411                           ;fifo.c: 21: }
  4412                           ;fifo.c: 22: return 0;
  4413  00EAE4  0E00               	movlw	0
  4414  00EAE6  0012               	return	
  4415  00EAE8                     __end_of_IsFifoEmpty:
  4416                           	opt stack 0
  4417                           tblptru	equ	0xFF8
  4418                           tblptrh	equ	0xFF7
  4419                           tblptrl	equ	0xFF6
  4420                           tablat	equ	0xFF5
  4421                           prodh	equ	0xFF4
  4422                           prodl	equ	0xFF3
  4423                           intcon	equ	0xFF2
  4424                           postinc0	equ	0xFEE
  4425                           wreg	equ	0xFE8
  4426                           postinc1	equ	0xFE6
  4427                           postdec1	equ	0xFE5
  4428                           fsr1h	equ	0xFE2
  4429                           fsr1l	equ	0xFE1
  4430                           indf2	equ	0xFDF
  4431                           postinc2	equ	0xFDE
  4432                           postdec2	equ	0xFDD
  4433                           fsr2h	equ	0xFDA
  4434                           fsr2l	equ	0xFD9
  4435                           status	equ	0xFD8
  4436                           
  4437 ;; *************** function _DigitalBreakout *****************
  4438 ;; Defined at:
  4439 ;;		line 229 in file "main.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  newData         2    7[COMRAM] unsigned int 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  x               1   11[COMRAM] unsigned char 
  4444 ;;  mask            2   14[COMRAM] unsigned int 
  4445 ;;  output          2   12[COMRAM] unsigned int 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4455 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;Total ram usage:        9 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_TinyDelay
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text19
  4469  00F204                     __ptext19:
  4470                           	opt stack 0
  4471  00F204                     _DigitalBreakout:
  4472                           	opt stack 29
  4473                           
  4474                           ;main.c: 231: for (unsigned char x=0; x < (4 - 1); x++) {
  4475                           
  4476                           ;incstack = 0
  4477  00F204  0E00               	movlw	0
  4478  00F206  6E0C               	movwf	DigitalBreakout@x,c
  4479  00F208                     l1858:
  4480  00F208  0E02               	movlw	2
  4481  00F20A  640C               	cpfsgt	DigitalBreakout@x,c
  4482  00F20C  D001               	goto	l101
  4483  00F20E  D01E               	goto	u1530
  4484  00F210                     l101:
  4485                           
  4486                           ;main.c: 232: digitalOutHyst[x] = digitalOutHyst[x+1];
  4487  00F210  500C               	movf	DigitalBreakout@x,w,c
  4488  00F212  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4489  00F214  6A0B               	clrf	(??_DigitalBreakout+1)& (0+255),c
  4490  00F216  90D8               	bcf	status,0,c
  4491  00F218  360A               	rlcf	??_DigitalBreakout,f,c
  4492  00F21A  360B               	rlcf	??_DigitalBreakout+1,f,c
  4493  00F21C  0E02               	movlw	2
  4494  00F21E  260A               	addwf	??_DigitalBreakout,f,c
  4495  00F220  0E00               	movlw	0
  4496  00F222  220B               	addwfc	??_DigitalBreakout+1,f,c
  4497  00F224  0E39               	movlw	low _digitalOutHyst
  4498  00F226  240A               	addwf	??_DigitalBreakout,w,c
  4499  00F228  6ED9               	movwf	fsr2l,c
  4500  00F22A  0E00               	movlw	high _digitalOutHyst
  4501  00F22C  200B               	addwfc	??_DigitalBreakout+1,w,c
  4502  00F22E  6EDA               	movwf	fsr2h,c
  4503  00F230  500C               	movf	DigitalBreakout@x,w,c
  4504  00F232  0D02               	mullw	2
  4505  00F234  0E39               	movlw	low _digitalOutHyst
  4506  00F236  24F3               	addwf	prodl,w,c
  4507  00F238  6EE1               	movwf	fsr1l,c
  4508  00F23A  0E00               	movlw	high _digitalOutHyst
  4509  00F23C  20F4               	addwfc	prodh,w,c
  4510  00F23E  6EE2               	movwf	fsr1h,c
  4511  00F240  CFDE FFE6          	movff	postinc2,postinc1
  4512  00F244  CFDD FFE5          	movff	postdec2,postdec1
  4513  00F248  2A0C               	incf	DigitalBreakout@x,f,c
  4514  00F24A  D7DE               	goto	l1858
  4515  00F24C                     u1530:
  4516                           
  4517                           ;main.c: 233: }
  4518                           ;main.c: 235: digitalOutHyst[4 - 1] = newData;
  4519  00F24C  C008  F03F         	movff	DigitalBreakout@newData,_digitalOutHyst+6
  4520  00F250  C009  F040         	movff	DigitalBreakout@newData+1,_digitalOutHyst+7
  4521                           
  4522                           ;main.c: 247: unsigned int output = newData;
  4523  00F254  C008  F00D         	movff	DigitalBreakout@newData,DigitalBreakout@output
  4524  00F258  C009  F00E         	movff	DigitalBreakout@newData+1,DigitalBreakout@output+1
  4525                           
  4526                           ;main.c: 249: unsigned int mask = 0x4000;
  4527  00F25C  0E40               	movlw	64
  4528  00F25E  6E10               	movwf	DigitalBreakout@mask+1,c
  4529  00F260  0E00               	movlw	0
  4530  00F262  6E0F               	movwf	DigitalBreakout@mask,c
  4531                           
  4532                           ;main.c: 250: TRISBbits.TRISB4 = 0;
  4533  00F264  9893               	bcf	3987,4,c	;volatile
  4534                           
  4535                           ;main.c: 251: if ((output & mask) == mask) {
  4536  00F266  500F               	movf	DigitalBreakout@mask,w,c
  4537  00F268  140D               	andwf	DigitalBreakout@output,w,c
  4538  00F26A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4539  00F26C  5010               	movf	DigitalBreakout@mask+1,w,c
  4540  00F26E  140E               	andwf	DigitalBreakout@output+1,w,c
  4541  00F270  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4542  00F272  500F               	movf	DigitalBreakout@mask,w,c
  4543  00F274  180A               	xorwf	??_DigitalBreakout,w,c
  4544  00F276  E106               	bnz	l103
  4545  00F278  5010               	movf	DigitalBreakout@mask+1,w,c
  4546  00F27A  180B               	xorwf	??_DigitalBreakout+1,w,c
  4547  00F27C  A4D8               	btfss	status,2,c
  4548  00F27E  D002               	goto	l103
  4549                           
  4550                           ;main.c: 252: LATBbits.LATB4 = 1;
  4551  00F280  888A               	bsf	3978,4,c	;volatile
  4552                           
  4553                           ;main.c: 253: } else {
  4554  00F282  D001               	goto	l104
  4555  00F284                     l103:
  4556                           
  4557                           ;main.c: 254: LATBbits.LATB4 = 0;
  4558  00F284  988A               	bcf	3978,4,c	;volatile
  4559  00F286                     l104:
  4560                           
  4561                           ;main.c: 255: }
  4562                           ;main.c: 257: mask = mask >> 1;
  4563  00F286  90D8               	bcf	status,0,c
  4564  00F288  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4565  00F28A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4566  00F28C  300F               	rrcf	DigitalBreakout@mask,w,c
  4567  00F28E  6E0F               	movwf	DigitalBreakout@mask,c
  4568  00F290  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4569                           
  4570                           ;main.c: 258: TRISBbits.TRISB3 = 0;
  4571  00F294  9693               	bcf	3987,3,c	;volatile
  4572                           
  4573                           ;main.c: 259: if ((output & mask) == mask) {
  4574  00F296  500F               	movf	DigitalBreakout@mask,w,c
  4575  00F298  140D               	andwf	DigitalBreakout@output,w,c
  4576  00F29A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4577  00F29C  5010               	movf	DigitalBreakout@mask+1,w,c
  4578  00F29E  140E               	andwf	DigitalBreakout@output+1,w,c
  4579  00F2A0  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4580  00F2A2  500F               	movf	DigitalBreakout@mask,w,c
  4581  00F2A4  180A               	xorwf	??_DigitalBreakout,w,c
  4582  00F2A6  E106               	bnz	l105
  4583  00F2A8  5010               	movf	DigitalBreakout@mask+1,w,c
  4584  00F2AA  180B               	xorwf	??_DigitalBreakout+1,w,c
  4585  00F2AC  A4D8               	btfss	status,2,c
  4586  00F2AE  D002               	goto	l105
  4587                           
  4588                           ;main.c: 260: LATBbits.LATB3 = 1;
  4589  00F2B0  868A               	bsf	3978,3,c	;volatile
  4590                           
  4591                           ;main.c: 261: } else {
  4592  00F2B2  D001               	goto	l106
  4593  00F2B4                     l105:
  4594                           
  4595                           ;main.c: 262: LATBbits.LATB3 = 0;
  4596  00F2B4  968A               	bcf	3978,3,c	;volatile
  4597  00F2B6                     l106:
  4598                           
  4599                           ;main.c: 263: }
  4600                           ;main.c: 265: mask = mask >> 1;
  4601  00F2B6  90D8               	bcf	status,0,c
  4602  00F2B8  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4603  00F2BA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4604  00F2BC  300F               	rrcf	DigitalBreakout@mask,w,c
  4605  00F2BE  6E0F               	movwf	DigitalBreakout@mask,c
  4606  00F2C0  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4607                           
  4608                           ;main.c: 266: TRISBbits.TRISB2 = 0;
  4609  00F2C4  9493               	bcf	3987,2,c	;volatile
  4610                           
  4611                           ;main.c: 267: if ((output & mask) == mask) {
  4612  00F2C6  500F               	movf	DigitalBreakout@mask,w,c
  4613  00F2C8  140D               	andwf	DigitalBreakout@output,w,c
  4614  00F2CA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4615  00F2CC  5010               	movf	DigitalBreakout@mask+1,w,c
  4616  00F2CE  140E               	andwf	DigitalBreakout@output+1,w,c
  4617  00F2D0  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4618  00F2D2  500F               	movf	DigitalBreakout@mask,w,c
  4619  00F2D4  180A               	xorwf	??_DigitalBreakout,w,c
  4620  00F2D6  E106               	bnz	l107
  4621  00F2D8  5010               	movf	DigitalBreakout@mask+1,w,c
  4622  00F2DA  180B               	xorwf	??_DigitalBreakout+1,w,c
  4623  00F2DC  A4D8               	btfss	status,2,c
  4624  00F2DE  D002               	goto	l107
  4625                           
  4626                           ;main.c: 268: LATBbits.LATB2 = 1;
  4627  00F2E0  848A               	bsf	3978,2,c	;volatile
  4628                           
  4629                           ;main.c: 269: } else {
  4630  00F2E2  D001               	goto	l108
  4631  00F2E4                     l107:
  4632                           
  4633                           ;main.c: 270: LATBbits.LATB2 = 0;
  4634  00F2E4  948A               	bcf	3978,2,c	;volatile
  4635  00F2E6                     l108:
  4636                           
  4637                           ;main.c: 271: }
  4638                           ;main.c: 273: mask = mask >> 1;
  4639  00F2E6  90D8               	bcf	status,0,c
  4640  00F2E8  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4641  00F2EA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4642  00F2EC  300F               	rrcf	DigitalBreakout@mask,w,c
  4643  00F2EE  6E0F               	movwf	DigitalBreakout@mask,c
  4644  00F2F0  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4645                           
  4646                           ;main.c: 274: TRISBbits.TRISB1 = 0;
  4647  00F2F4  9293               	bcf	3987,1,c	;volatile
  4648                           
  4649                           ;main.c: 275: if ((output & mask) == mask) {
  4650  00F2F6  500F               	movf	DigitalBreakout@mask,w,c
  4651  00F2F8  140D               	andwf	DigitalBreakout@output,w,c
  4652  00F2FA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4653  00F2FC  5010               	movf	DigitalBreakout@mask+1,w,c
  4654  00F2FE  140E               	andwf	DigitalBreakout@output+1,w,c
  4655  00F300  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4656  00F302  500F               	movf	DigitalBreakout@mask,w,c
  4657  00F304  180A               	xorwf	??_DigitalBreakout,w,c
  4658  00F306  E106               	bnz	l109
  4659  00F308  5010               	movf	DigitalBreakout@mask+1,w,c
  4660  00F30A  180B               	xorwf	??_DigitalBreakout+1,w,c
  4661  00F30C  A4D8               	btfss	status,2,c
  4662  00F30E  D002               	goto	l109
  4663                           
  4664                           ;main.c: 276: LATBbits.LATB1 = 1;
  4665  00F310  828A               	bsf	3978,1,c	;volatile
  4666                           
  4667                           ;main.c: 277: } else {
  4668  00F312  D001               	goto	l110
  4669  00F314                     l109:
  4670                           
  4671                           ;main.c: 278: LATBbits.LATB1 = 0;
  4672  00F314  928A               	bcf	3978,1,c	;volatile
  4673  00F316                     l110:
  4674                           
  4675                           ;main.c: 279: }
  4676                           ;main.c: 281: mask = mask >> 1;
  4677  00F316  90D8               	bcf	status,0,c
  4678  00F318  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4679  00F31A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4680  00F31C  300F               	rrcf	DigitalBreakout@mask,w,c
  4681  00F31E  6E0F               	movwf	DigitalBreakout@mask,c
  4682  00F320  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4683                           
  4684                           ;main.c: 282: TRISBbits.TRISB0 = 0;
  4685  00F324  9093               	bcf	3987,0,c	;volatile
  4686                           
  4687                           ;main.c: 283: if ((output & mask) == mask) {
  4688  00F326  500F               	movf	DigitalBreakout@mask,w,c
  4689  00F328  140D               	andwf	DigitalBreakout@output,w,c
  4690  00F32A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4691  00F32C  5010               	movf	DigitalBreakout@mask+1,w,c
  4692  00F32E  140E               	andwf	DigitalBreakout@output+1,w,c
  4693  00F330  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4694  00F332  500F               	movf	DigitalBreakout@mask,w,c
  4695  00F334  180A               	xorwf	??_DigitalBreakout,w,c
  4696  00F336  E106               	bnz	l111
  4697  00F338  5010               	movf	DigitalBreakout@mask+1,w,c
  4698  00F33A  180B               	xorwf	??_DigitalBreakout+1,w,c
  4699  00F33C  A4D8               	btfss	status,2,c
  4700  00F33E  D002               	goto	l111
  4701                           
  4702                           ;main.c: 284: LATBbits.LATB0 = 1;
  4703  00F340  808A               	bsf	3978,0,c	;volatile
  4704                           
  4705                           ;main.c: 285: } else {
  4706  00F342  D001               	goto	l112
  4707  00F344                     l111:
  4708                           
  4709                           ;main.c: 286: LATBbits.LATB0 = 0;
  4710  00F344  908A               	bcf	3978,0,c	;volatile
  4711  00F346                     l112:
  4712                           
  4713                           ;main.c: 287: }
  4714                           ;main.c: 289: mask = mask >> 1;
  4715  00F346  90D8               	bcf	status,0,c
  4716  00F348  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4717  00F34A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4718  00F34C  300F               	rrcf	DigitalBreakout@mask,w,c
  4719  00F34E  6E0F               	movwf	DigitalBreakout@mask,c
  4720  00F350  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4721                           
  4722                           ;main.c: 290: TRISCbits.TRISC5 = 0;
  4723  00F354  9A94               	bcf	3988,5,c	;volatile
  4724                           
  4725                           ;main.c: 291: if ((output & mask) == mask) {
  4726  00F356  500F               	movf	DigitalBreakout@mask,w,c
  4727  00F358  140D               	andwf	DigitalBreakout@output,w,c
  4728  00F35A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4729  00F35C  5010               	movf	DigitalBreakout@mask+1,w,c
  4730  00F35E  140E               	andwf	DigitalBreakout@output+1,w,c
  4731  00F360  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4732  00F362  500F               	movf	DigitalBreakout@mask,w,c
  4733  00F364  180A               	xorwf	??_DigitalBreakout,w,c
  4734  00F366  E106               	bnz	l113
  4735  00F368  5010               	movf	DigitalBreakout@mask+1,w,c
  4736  00F36A  180B               	xorwf	??_DigitalBreakout+1,w,c
  4737  00F36C  A4D8               	btfss	status,2,c
  4738  00F36E  D002               	goto	l113
  4739                           
  4740                           ;main.c: 292: LATCbits.LATC5 = 1;
  4741  00F370  8A8B               	bsf	3979,5,c	;volatile
  4742                           
  4743                           ;main.c: 293: } else {
  4744  00F372  D001               	goto	l114
  4745  00F374                     l113:
  4746                           
  4747                           ;main.c: 294: LATCbits.LATC5 = 0;
  4748  00F374  9A8B               	bcf	3979,5,c	;volatile
  4749  00F376                     l114:
  4750                           
  4751                           ;main.c: 295: }
  4752                           ;main.c: 297: mask = mask >> 1;
  4753  00F376  90D8               	bcf	status,0,c
  4754  00F378  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4755  00F37A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4756  00F37C  300F               	rrcf	DigitalBreakout@mask,w,c
  4757  00F37E  6E0F               	movwf	DigitalBreakout@mask,c
  4758  00F380  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4759                           
  4760                           ;main.c: 298: TRISCbits.TRISC4 = 0;
  4761  00F384  9894               	bcf	3988,4,c	;volatile
  4762                           
  4763                           ;main.c: 299: if ((output & mask) == mask) {
  4764  00F386  500F               	movf	DigitalBreakout@mask,w,c
  4765  00F388  140D               	andwf	DigitalBreakout@output,w,c
  4766  00F38A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4767  00F38C  5010               	movf	DigitalBreakout@mask+1,w,c
  4768  00F38E  140E               	andwf	DigitalBreakout@output+1,w,c
  4769  00F390  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4770  00F392  500F               	movf	DigitalBreakout@mask,w,c
  4771  00F394  180A               	xorwf	??_DigitalBreakout,w,c
  4772  00F396  E106               	bnz	l115
  4773  00F398  5010               	movf	DigitalBreakout@mask+1,w,c
  4774  00F39A  180B               	xorwf	??_DigitalBreakout+1,w,c
  4775  00F39C  A4D8               	btfss	status,2,c
  4776  00F39E  D002               	goto	l115
  4777                           
  4778                           ;main.c: 300: LATCbits.LATC4 = 1;
  4779  00F3A0  888B               	bsf	3979,4,c	;volatile
  4780                           
  4781                           ;main.c: 301: } else {
  4782  00F3A2  D001               	goto	l116
  4783  00F3A4                     l115:
  4784                           
  4785                           ;main.c: 302: LATCbits.LATC4 = 0;
  4786  00F3A4  988B               	bcf	3979,4,c	;volatile
  4787  00F3A6                     l116:
  4788                           
  4789                           ;main.c: 303: }
  4790                           ;main.c: 305: mask = mask >> 1;
  4791  00F3A6  90D8               	bcf	status,0,c
  4792  00F3A8  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4793  00F3AA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4794  00F3AC  300F               	rrcf	DigitalBreakout@mask,w,c
  4795  00F3AE  6E0F               	movwf	DigitalBreakout@mask,c
  4796  00F3B0  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4797                           
  4798                           ;main.c: 306: TRISCbits.TRISC3 = 0;
  4799  00F3B4  9694               	bcf	3988,3,c	;volatile
  4800                           
  4801                           ;main.c: 307: if ((output & mask) == mask) {
  4802  00F3B6  500F               	movf	DigitalBreakout@mask,w,c
  4803  00F3B8  140D               	andwf	DigitalBreakout@output,w,c
  4804  00F3BA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4805  00F3BC  5010               	movf	DigitalBreakout@mask+1,w,c
  4806  00F3BE  140E               	andwf	DigitalBreakout@output+1,w,c
  4807  00F3C0  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4808  00F3C2  500F               	movf	DigitalBreakout@mask,w,c
  4809  00F3C4  180A               	xorwf	??_DigitalBreakout,w,c
  4810  00F3C6  E106               	bnz	l117
  4811  00F3C8  5010               	movf	DigitalBreakout@mask+1,w,c
  4812  00F3CA  180B               	xorwf	??_DigitalBreakout+1,w,c
  4813  00F3CC  A4D8               	btfss	status,2,c
  4814  00F3CE  D002               	goto	l117
  4815                           
  4816                           ;main.c: 308: LATCbits.LATC3 = 1;
  4817  00F3D0  868B               	bsf	3979,3,c	;volatile
  4818                           
  4819                           ;main.c: 309: } else {
  4820  00F3D2  D001               	goto	l118
  4821  00F3D4                     l117:
  4822                           
  4823                           ;main.c: 310: LATCbits.LATC3 = 0;
  4824  00F3D4  968B               	bcf	3979,3,c	;volatile
  4825  00F3D6                     l118:
  4826                           
  4827                           ;main.c: 311: }
  4828                           ;main.c: 313: mask = mask >> 1;
  4829  00F3D6  90D8               	bcf	status,0,c
  4830  00F3D8  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4831  00F3DA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4832  00F3DC  300F               	rrcf	DigitalBreakout@mask,w,c
  4833  00F3DE  6E0F               	movwf	DigitalBreakout@mask,c
  4834  00F3E0  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4835                           
  4836                           ;main.c: 314: TRISCbits.TRISC2 = 0;
  4837  00F3E4  9494               	bcf	3988,2,c	;volatile
  4838                           
  4839                           ;main.c: 315: if ((output & mask) == mask) {
  4840  00F3E6  500F               	movf	DigitalBreakout@mask,w,c
  4841  00F3E8  140D               	andwf	DigitalBreakout@output,w,c
  4842  00F3EA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4843  00F3EC  5010               	movf	DigitalBreakout@mask+1,w,c
  4844  00F3EE  140E               	andwf	DigitalBreakout@output+1,w,c
  4845  00F3F0  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4846  00F3F2  500F               	movf	DigitalBreakout@mask,w,c
  4847  00F3F4  180A               	xorwf	??_DigitalBreakout,w,c
  4848  00F3F6  E106               	bnz	l119
  4849  00F3F8  5010               	movf	DigitalBreakout@mask+1,w,c
  4850  00F3FA  180B               	xorwf	??_DigitalBreakout+1,w,c
  4851  00F3FC  A4D8               	btfss	status,2,c
  4852  00F3FE  D002               	goto	l119
  4853                           
  4854                           ;main.c: 316: LATCbits.LATC2 = 1;
  4855  00F400  848B               	bsf	3979,2,c	;volatile
  4856                           
  4857                           ;main.c: 317: } else {
  4858  00F402  D001               	goto	l120
  4859  00F404                     l119:
  4860                           
  4861                           ;main.c: 318: LATCbits.LATC2 = 0;
  4862  00F404  948B               	bcf	3979,2,c	;volatile
  4863  00F406                     l120:
  4864                           
  4865                           ;main.c: 319: }
  4866                           ;main.c: 321: mask = mask >> 1;
  4867  00F406  90D8               	bcf	status,0,c
  4868  00F408  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4869  00F40A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4870  00F40C  300F               	rrcf	DigitalBreakout@mask,w,c
  4871  00F40E  6E0F               	movwf	DigitalBreakout@mask,c
  4872  00F410  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4873                           
  4874                           ;main.c: 322: TRISCbits.TRISC1 = 0;
  4875  00F414  9294               	bcf	3988,1,c	;volatile
  4876                           
  4877                           ;main.c: 323: if ((output & mask) == mask) {
  4878  00F416  500F               	movf	DigitalBreakout@mask,w,c
  4879  00F418  140D               	andwf	DigitalBreakout@output,w,c
  4880  00F41A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4881  00F41C  5010               	movf	DigitalBreakout@mask+1,w,c
  4882  00F41E  140E               	andwf	DigitalBreakout@output+1,w,c
  4883  00F420  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4884  00F422  500F               	movf	DigitalBreakout@mask,w,c
  4885  00F424  180A               	xorwf	??_DigitalBreakout,w,c
  4886  00F426  E106               	bnz	l121
  4887  00F428  5010               	movf	DigitalBreakout@mask+1,w,c
  4888  00F42A  180B               	xorwf	??_DigitalBreakout+1,w,c
  4889  00F42C  A4D8               	btfss	status,2,c
  4890  00F42E  D002               	goto	l121
  4891                           
  4892                           ;main.c: 324: LATCbits.LATC1 = 1;
  4893  00F430  828B               	bsf	3979,1,c	;volatile
  4894                           
  4895                           ;main.c: 325: } else {
  4896  00F432  D001               	goto	l122
  4897  00F434                     l121:
  4898                           
  4899                           ;main.c: 326: LATCbits.LATC1 = 0;
  4900  00F434  928B               	bcf	3979,1,c	;volatile
  4901  00F436                     l122:
  4902                           
  4903                           ;main.c: 327: }
  4904                           ;main.c: 329: mask = mask >> 1;
  4905  00F436  90D8               	bcf	status,0,c
  4906  00F438  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4907  00F43A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4908  00F43C  300F               	rrcf	DigitalBreakout@mask,w,c
  4909  00F43E  6E0F               	movwf	DigitalBreakout@mask,c
  4910  00F440  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4911                           
  4912                           ;main.c: 330: TRISCbits.TRISC0 = 0;
  4913  00F444  9094               	bcf	3988,0,c	;volatile
  4914                           
  4915                           ;main.c: 331: if ((output & mask) == mask) {
  4916  00F446  500F               	movf	DigitalBreakout@mask,w,c
  4917  00F448  140D               	andwf	DigitalBreakout@output,w,c
  4918  00F44A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4919  00F44C  5010               	movf	DigitalBreakout@mask+1,w,c
  4920  00F44E  140E               	andwf	DigitalBreakout@output+1,w,c
  4921  00F450  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4922  00F452  500F               	movf	DigitalBreakout@mask,w,c
  4923  00F454  180A               	xorwf	??_DigitalBreakout,w,c
  4924  00F456  E106               	bnz	l123
  4925  00F458  5010               	movf	DigitalBreakout@mask+1,w,c
  4926  00F45A  180B               	xorwf	??_DigitalBreakout+1,w,c
  4927  00F45C  A4D8               	btfss	status,2,c
  4928  00F45E  D002               	goto	l123
  4929                           
  4930                           ;main.c: 332: LATCbits.LATC0 = 1;
  4931  00F460  808B               	bsf	3979,0,c	;volatile
  4932                           
  4933                           ;main.c: 333: } else {
  4934  00F462  D001               	goto	l124
  4935  00F464                     l123:
  4936                           
  4937                           ;main.c: 334: LATCbits.LATC0 = 0;
  4938  00F464  908B               	bcf	3979,0,c	;volatile
  4939  00F466                     l124:
  4940                           
  4941                           ;main.c: 335: }
  4942                           ;main.c: 337: mask = mask >> 1;
  4943  00F466  90D8               	bcf	status,0,c
  4944  00F468  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4945  00F46A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4946  00F46C  300F               	rrcf	DigitalBreakout@mask,w,c
  4947  00F46E  6E0F               	movwf	DigitalBreakout@mask,c
  4948  00F470  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4949                           
  4950                           ;main.c: 338: TRISAbits.TRISA3 = 0;
  4951  00F474  9692               	bcf	3986,3,c	;volatile
  4952                           
  4953                           ;main.c: 339: if ((output & mask) == mask) {
  4954  00F476  500F               	movf	DigitalBreakout@mask,w,c
  4955  00F478  140D               	andwf	DigitalBreakout@output,w,c
  4956  00F47A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4957  00F47C  5010               	movf	DigitalBreakout@mask+1,w,c
  4958  00F47E  140E               	andwf	DigitalBreakout@output+1,w,c
  4959  00F480  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4960  00F482  500F               	movf	DigitalBreakout@mask,w,c
  4961  00F484  180A               	xorwf	??_DigitalBreakout,w,c
  4962  00F486  E106               	bnz	l125
  4963  00F488  5010               	movf	DigitalBreakout@mask+1,w,c
  4964  00F48A  180B               	xorwf	??_DigitalBreakout+1,w,c
  4965  00F48C  A4D8               	btfss	status,2,c
  4966  00F48E  D002               	goto	l125
  4967                           
  4968                           ;main.c: 340: LATAbits.LATA3 = 1;
  4969  00F490  8689               	bsf	3977,3,c	;volatile
  4970                           
  4971                           ;main.c: 341: } else {
  4972  00F492  D001               	goto	l126
  4973  00F494                     l125:
  4974                           
  4975                           ;main.c: 342: LATAbits.LATA3 = 0;
  4976  00F494  9689               	bcf	3977,3,c	;volatile
  4977  00F496                     l126:
  4978                           
  4979                           ;main.c: 343: }
  4980                           ;main.c: 345: mask = mask >> 1;
  4981  00F496  90D8               	bcf	status,0,c
  4982  00F498  3010               	rrcf	DigitalBreakout@mask+1,w,c
  4983  00F49A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4984  00F49C  300F               	rrcf	DigitalBreakout@mask,w,c
  4985  00F49E  6E0F               	movwf	DigitalBreakout@mask,c
  4986  00F4A0  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  4987                           
  4988                           ;main.c: 346: TRISAbits.TRISA2 = 0;
  4989  00F4A4  9492               	bcf	3986,2,c	;volatile
  4990                           
  4991                           ;main.c: 347: if ((output & mask) == mask) {
  4992  00F4A6  500F               	movf	DigitalBreakout@mask,w,c
  4993  00F4A8  140D               	andwf	DigitalBreakout@output,w,c
  4994  00F4AA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  4995  00F4AC  5010               	movf	DigitalBreakout@mask+1,w,c
  4996  00F4AE  140E               	andwf	DigitalBreakout@output+1,w,c
  4997  00F4B0  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  4998  00F4B2  500F               	movf	DigitalBreakout@mask,w,c
  4999  00F4B4  180A               	xorwf	??_DigitalBreakout,w,c
  5000  00F4B6  E106               	bnz	l127
  5001  00F4B8  5010               	movf	DigitalBreakout@mask+1,w,c
  5002  00F4BA  180B               	xorwf	??_DigitalBreakout+1,w,c
  5003  00F4BC  A4D8               	btfss	status,2,c
  5004  00F4BE  D002               	goto	l127
  5005                           
  5006                           ;main.c: 348: LATAbits.LATA2 = 1;
  5007  00F4C0  8489               	bsf	3977,2,c	;volatile
  5008                           
  5009                           ;main.c: 349: } else {
  5010  00F4C2  D001               	goto	l128
  5011  00F4C4                     l127:
  5012                           
  5013                           ;main.c: 350: LATAbits.LATA2 = 0;
  5014  00F4C4  9489               	bcf	3977,2,c	;volatile
  5015  00F4C6                     l128:
  5016                           
  5017                           ;main.c: 351: }
  5018                           ;main.c: 353: mask = mask >> 1;
  5019  00F4C6  90D8               	bcf	status,0,c
  5020  00F4C8  3010               	rrcf	DigitalBreakout@mask+1,w,c
  5021  00F4CA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  5022  00F4CC  300F               	rrcf	DigitalBreakout@mask,w,c
  5023  00F4CE  6E0F               	movwf	DigitalBreakout@mask,c
  5024  00F4D0  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  5025                           
  5026                           ;main.c: 354: TRISAbits.TRISA1 = 0;
  5027  00F4D4  9292               	bcf	3986,1,c	;volatile
  5028                           
  5029                           ;main.c: 355: if ((output & mask) == mask) {
  5030  00F4D6  500F               	movf	DigitalBreakout@mask,w,c
  5031  00F4D8  140D               	andwf	DigitalBreakout@output,w,c
  5032  00F4DA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  5033  00F4DC  5010               	movf	DigitalBreakout@mask+1,w,c
  5034  00F4DE  140E               	andwf	DigitalBreakout@output+1,w,c
  5035  00F4E0  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  5036  00F4E2  500F               	movf	DigitalBreakout@mask,w,c
  5037  00F4E4  180A               	xorwf	??_DigitalBreakout,w,c
  5038  00F4E6  E106               	bnz	l129
  5039  00F4E8  5010               	movf	DigitalBreakout@mask+1,w,c
  5040  00F4EA  180B               	xorwf	??_DigitalBreakout+1,w,c
  5041  00F4EC  A4D8               	btfss	status,2,c
  5042  00F4EE  D002               	goto	l129
  5043                           
  5044                           ;main.c: 356: LATAbits.LATA1 = 1;
  5045  00F4F0  8289               	bsf	3977,1,c	;volatile
  5046                           
  5047                           ;main.c: 357: } else {
  5048  00F4F2  D001               	goto	l130
  5049  00F4F4                     l129:
  5050                           
  5051                           ;main.c: 358: LATAbits.LATA1 = 0;
  5052  00F4F4  9289               	bcf	3977,1,c	;volatile
  5053  00F4F6                     l130:
  5054                           
  5055                           ;main.c: 359: }
  5056                           ;main.c: 361: mask = mask >> 1;
  5057  00F4F6  90D8               	bcf	status,0,c
  5058  00F4F8  3010               	rrcf	DigitalBreakout@mask+1,w,c
  5059  00F4FA  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  5060  00F4FC  300F               	rrcf	DigitalBreakout@mask,w,c
  5061  00F4FE  6E0F               	movwf	DigitalBreakout@mask,c
  5062  00F500  C00A  F010         	movff	??_DigitalBreakout,DigitalBreakout@mask+1
  5063                           
  5064                           ;main.c: 362: TRISAbits.TRISA0 = 0;
  5065  00F504  9092               	bcf	3986,0,c	;volatile
  5066                           
  5067                           ;main.c: 363: if ((output & mask) == mask) {
  5068  00F506  500F               	movf	DigitalBreakout@mask,w,c
  5069  00F508  140D               	andwf	DigitalBreakout@output,w,c
  5070  00F50A  6E0A               	movwf	??_DigitalBreakout& (0+255),c
  5071  00F50C  5010               	movf	DigitalBreakout@mask+1,w,c
  5072  00F50E  140E               	andwf	DigitalBreakout@output+1,w,c
  5073  00F510  6E0B               	movwf	(??_DigitalBreakout+1)& (0+255),c
  5074  00F512  500F               	movf	DigitalBreakout@mask,w,c
  5075  00F514  180A               	xorwf	??_DigitalBreakout,w,c
  5076  00F516  E106               	bnz	l131
  5077  00F518  5010               	movf	DigitalBreakout@mask+1,w,c
  5078  00F51A  180B               	xorwf	??_DigitalBreakout+1,w,c
  5079  00F51C  A4D8               	btfss	status,2,c
  5080  00F51E  D002               	goto	l131
  5081                           
  5082                           ;main.c: 364: LATAbits.LATA0 = 1;
  5083  00F520  8089               	bsf	3977,0,c	;volatile
  5084                           
  5085                           ;main.c: 365: } else {
  5086  00F522  0012               	return	
  5087  00F524                     l131:
  5088                           
  5089                           ;main.c: 366: LATAbits.LATA0 = 0;
  5090  00F524  9089               	bcf	3977,0,c	;volatile
  5091  00F526  0012               	return	
  5092  00F528                     __end_of_DigitalBreakout:
  5093                           	opt stack 0
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           prodh	equ	0xFF4
  5099                           prodl	equ	0xFF3
  5100                           intcon	equ	0xFF2
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           postinc1	equ	0xFE6
  5104                           postdec1	equ	0xFE5
  5105                           fsr1h	equ	0xFE2
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _FifoInitialize *****************
  5115 ;; Defined at:
  5116 ;;		line 4 in file "fifo.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  buffer          2    0[COMRAM] PTR struct .
  5119 ;;		 -> buffers(272), 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;		None
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5131 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;Total ram usage:        2 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_main
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text20
  5145  00EBCC                     __ptext20:
  5146                           	opt stack 0
  5147  00EBCC                     _FifoInitialize:
  5148                           	opt stack 30
  5149                           
  5150                           ;fifo.c: 5: buffer->read = 0;
  5151                           
  5152                           ;incstack = 0
  5153  00EBCC  EE20 F040          	lfsr	2,64
  5154  00EBD0  5001               	movf	FifoInitialize@buffer,w,c
  5155  00EBD2  26D9               	addwf	fsr2l,f,c
  5156  00EBD4  5002               	movf	FifoInitialize@buffer+1,w,c
  5157  00EBD6  22DA               	addwfc	fsr2h,f,c
  5158  00EBD8  0E00               	movlw	0
  5159  00EBDA  6EDF               	movwf	indf2,c
  5160                           
  5161                           ;fifo.c: 6: buffer->write = 0;
  5162  00EBDC  EE20 F041          	lfsr	2,65
  5163  00EBE0  5001               	movf	FifoInitialize@buffer,w,c
  5164  00EBE2  26D9               	addwf	fsr2l,f,c
  5165  00EBE4  5002               	movf	FifoInitialize@buffer+1,w,c
  5166  00EBE6  22DA               	addwfc	fsr2h,f,c
  5167  00EBE8  0E00               	movlw	0
  5168  00EBEA  6EDF               	movwf	indf2,c
  5169                           
  5170                           ;fifo.c: 7: buffer->capacity = sizeof(buffer->buffer) / sizeof(buffer->buffer[0]);
  5171  00EBEC  EE20 F043          	lfsr	2,67
  5172  00EBF0  5001               	movf	FifoInitialize@buffer,w,c
  5173  00EBF2  26D9               	addwf	fsr2l,f,c
  5174  00EBF4  5002               	movf	FifoInitialize@buffer+1,w,c
  5175  00EBF6  22DA               	addwfc	fsr2h,f,c
  5176  00EBF8  0E20               	movlw	32
  5177  00EBFA  6EDF               	movwf	indf2,c
  5178                           
  5179                           ;fifo.c: 8: buffer->currentCount = 0;
  5180  00EBFC  EE20 F042          	lfsr	2,66
  5181  00EC00  5001               	movf	FifoInitialize@buffer,w,c
  5182  00EC02  26D9               	addwf	fsr2l,f,c
  5183  00EC04  5002               	movf	FifoInitialize@buffer+1,w,c
  5184  00EC06  22DA               	addwfc	fsr2h,f,c
  5185  00EC08  0E00               	movlw	0
  5186  00EC0A  6EDF               	movwf	indf2,c
  5187  00EC0C  0012               	return		;funcret
  5188  00EC0E                     __end_of_FifoInitialize:
  5189                           	opt stack 0
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           intcon	equ	0xFF2
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           postinc1	equ	0xFE6
  5200                           postdec1	equ	0xFE5
  5201                           fsr1h	equ	0xFE2
  5202                           fsr1l	equ	0xFE1
  5203                           indf2	equ	0xFDF
  5204                           postinc2	equ	0xFDE
  5205                           postdec2	equ	0xFDD
  5206                           fsr2h	equ	0xFDA
  5207                           fsr2l	equ	0xFD9
  5208                           status	equ	0xFD8
  5209                           
  5210 ;; *************** function _EnableTransceiverRX *****************
  5211 ;; Defined at:
  5212 ;;		line 283 in file "uart.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  uart_index      1    wreg     unsigned char 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  uart_index      1    0[COMRAM] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      void 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;Total ram usage:        1 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_main
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text21
  5240  00EA6A                     __ptext21:
  5241                           	opt stack 0
  5242  00EA6A                     _EnableTransceiverRX:
  5243                           	opt stack 30
  5244                           
  5245                           ;incstack = 0
  5246                           ;EnableTransceiverRX@uart_index stored from wreg
  5247  00EA6A  6E01               	movwf	EnableTransceiverRX@uart_index,c
  5248                           
  5249                           ;uart.c: 284: if (uart_index == 1) {
  5250  00EA6C  0401               	decf	EnableTransceiverRX@uart_index,w,c
  5251  00EA6E  A4D8               	btfss	status,2,c
  5252  00EA70  0012               	return	
  5253                           
  5254                           ;uart.c: 285: TRISAbits.TRISA4 = 0;
  5255  00EA72  9892               	bcf	3986,4,c	;volatile
  5256                           
  5257                           ;uart.c: 286: LATAbits.LATA4 = 0;
  5258  00EA74  9889               	bcf	3977,4,c	;volatile
  5259  00EA76  0012               	return	
  5260  00EA78                     __end_of_EnableTransceiverRX:
  5261                           	opt stack 0
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           postinc0	equ	0xFEE
  5270                           wreg	equ	0xFE8
  5271                           postinc1	equ	0xFE6
  5272                           postdec1	equ	0xFE5
  5273                           fsr1h	equ	0xFE2
  5274                           fsr1l	equ	0xFE1
  5275                           indf2	equ	0xFDF
  5276                           postinc2	equ	0xFDE
  5277                           postdec2	equ	0xFDD
  5278                           fsr2h	equ	0xFDA
  5279                           fsr2l	equ	0xFD9
  5280                           status	equ	0xFD8
  5281                           
  5282 ;; *************** function _ConfigureOscillator *****************
  5283 ;; Defined at:
  5284 ;;		line 5 in file "osc.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;		None
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      void 
  5291 ;; Registers used:
  5292 ;;		wreg, status,2, status,0
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;Total ram usage:        0 bytes
  5303 ;; Hardware stack levels used:    1
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		_main
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text22
  5312  00EAA4                     __ptext22:
  5313                           	opt stack 0
  5314  00EAA4                     _ConfigureOscillator:
  5315                           	opt stack 30
  5316                           
  5317                           ;osc.c: 8: OSCCON = (unsigned char)OSCCON | 0x70;
  5318                           
  5319                           ;incstack = 0
  5320  00EAA4  50D3               	movf	4051,w,c	;volatile
  5321  00EAA6  0970               	iorlw	112
  5322  00EAA8  6ED3               	movwf	4051,c	;volatile
  5323  00EAAA  A4D3               	btfss	4051,2,c	;volatile
  5324  00EAAC  D7FE               	goto	l145
  5325                           
  5326                           ;osc.c: 12: OSCTUNEbits.PLLEN = 1;
  5327  00EAAE  8C9B               	bsf	3995,6,c	;volatile
  5328  00EAB0  BED2               	btfsc	4050,7,c	;volatile
  5329  00EAB2  0012               	return	
  5330  00EAB4  D7FD               	goto	l148
  5331  00EAB6                     __end_of_ConfigureOscillator:
  5332                           	opt stack 0
  5333                           tblptru	equ	0xFF8
  5334                           tblptrh	equ	0xFF7
  5335                           tblptrl	equ	0xFF6
  5336                           tablat	equ	0xFF5
  5337                           prodh	equ	0xFF4
  5338                           prodl	equ	0xFF3
  5339                           intcon	equ	0xFF2
  5340                           postinc0	equ	0xFEE
  5341                           wreg	equ	0xFE8
  5342                           postinc1	equ	0xFE6
  5343                           postdec1	equ	0xFE5
  5344                           fsr1h	equ	0xFE2
  5345                           fsr1l	equ	0xFE1
  5346                           indf2	equ	0xFDF
  5347                           postinc2	equ	0xFDE
  5348                           postdec2	equ	0xFDD
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           prodh	equ	0xFF4
  5357                           prodl	equ	0xFF3
  5358                           intcon	equ	0xFF2
  5359                           postinc0	equ	0xFEE
  5360                           wreg	equ	0xFE8
  5361                           postinc1	equ	0xFE6
  5362                           postdec1	equ	0xFE5
  5363                           fsr1h	equ	0xFE2
  5364                           fsr1l	equ	0xFE1
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           postdec2	equ	0xFDD
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372                           	psect	rparam
  5373  0000                     tblptru	equ	0xFF8
  5374                           tblptrh	equ	0xFF7
  5375                           tblptrl	equ	0xFF6
  5376                           tablat	equ	0xFF5
  5377                           prodh	equ	0xFF4
  5378                           prodl	equ	0xFF3
  5379                           intcon	equ	0xFF2
  5380                           postinc0	equ	0xFEE
  5381                           wreg	equ	0xFE8
  5382                           postinc1	equ	0xFE6
  5383                           postdec1	equ	0xFE5
  5384                           fsr1h	equ	0xFE2
  5385                           fsr1l	equ	0xFE1
  5386                           indf2	equ	0xFDF
  5387                           postinc2	equ	0xFDE
  5388                           postdec2	equ	0xFDD
  5389                           fsr2h	equ	0xFDA
  5390                           fsr2l	equ	0xFD9
  5391                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    512
    Data        0
    BSS         414
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     56      69
    BANK0           160      0     129
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    compute_crc@ptr_msg_body	PTR unsigned int  size(2) Largest target is 129
		 -> galaxyCommands.buffer(BANK0[40]), galaxyCommands(BANK0[129]), 

    FifoDequeue@buffer	PTR struct . size(2) Largest target is 272
		 -> buffers(BIGRAM[272]), 

    FifoEnqueue@buffer	PTR struct . size(2) Largest target is 272
		 -> buffers(BIGRAM[272]), 

    IsFifoEmpty@buffer	PTR struct . size(2) Largest target is 272
		 -> buffers(BIGRAM[272]), 

    IsFifoFull@buffer	PTR struct . size(2) Largest target is 272
		 -> buffers(BIGRAM[272]), 

    FifoInitialize@buffer	PTR struct . size(2) Largest target is 272
		 -> buffers(BIGRAM[272]), 


Critical Paths under _main in COMRAM

    _main->_UART_Initialize
    _UART_Initialize->___lldiv
    _TinyDelay->_DigitalBreakout
    _PutChar9Default->_FifoDequeue
    _PutChar9->_DisableTransceiverTX
    _PutChar9->_EnableTransceiverTX
    _PutChar9->__GetTxInterruptFlag
    _IsTransmitterReady->_IsTransmitterEnabled
    _IsTransmitterReady->__GetTxInterruptFlag
    _GetChar9->_IsRxDataAvailable
    _FifoEnqueue->_IsFifoFull
    _FifoDequeue->_IsFifoEmpty
    _DigitalBreakout->_FifoDequeue

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0    9820
                                             32 COMRAM    24    24      0
                _ConfigureOscillator
                _EnableTransceiverRX
                        _FifoEnqueue
                     _FifoInitialize
                        _IsFifoEmpty
                          _TinyDelay
                    _UART_Initialize
                        _compute_crc
 ---------------------------------------------------------------------------------
 (1) _compute_crc                                         16    12      4     593
                                              0 COMRAM    16    12      4
 ---------------------------------------------------------------------------------
 (1) _UART_Initialize                                     19    13      6    1599
                                             13 COMRAM    19    13      6
                  _EnableTransmitter
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _EnableTransmitter                                    1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TinyDelay                                            2     2      0    4603
                                             16 COMRAM     2     2      0
                    _DigitalBreakout
                        _FifoDequeue
                        _FifoEnqueue
                           _GetChar9
                        _IsFifoEmpty
                         _IsFifoFull
                  _IsRxDataAvailable
                 _IsTransmitterReady
                    _PutChar9Default
 ---------------------------------------------------------------------------------
 (2) _PutChar9Default                                      2     0      2     498
                                              7 COMRAM     2     0      2
                        _FifoDequeue (ARG)
                           _PutChar9
 ---------------------------------------------------------------------------------
 (3) _PutChar9                                             3     1      2     400
                                              1 COMRAM     3     1      2
               _DisableTransceiverTX
                _EnableTransceiverTX
                __GetTxInterruptFlag
 ---------------------------------------------------------------------------------
 (4) _EnableTransceiverTX                                  1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _DisableTransceiverTX                                 1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _IsTransmitterReady                                   1     1      0      90
                                              1 COMRAM     1     1      0
               _IsTransmitterEnabled
                __GetTxInterruptFlag
 ---------------------------------------------------------------------------------
 (4) __GetTxInterruptFlag                                  1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _IsTransmitterEnabled                                 1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GetChar9                                             5     3      2     281
                                              1 COMRAM     5     3      2
                  _IsRxDataAvailable
 ---------------------------------------------------------------------------------
 (2) _IsRxDataAvailable                                    1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _FifoEnqueue                                          5     1      4     980
                                              4 COMRAM     5     1      4
                         _IsFifoFull
 ---------------------------------------------------------------------------------
 (2) _IsFifoFull                                           4     2      2     196
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _FifoDequeue                                          5     3      2     655
                                              2 COMRAM     5     3      2
                        _IsFifoEmpty
 ---------------------------------------------------------------------------------
 (2) _IsFifoEmpty                                          2     0      2     326
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DigitalBreakout                                      9     7      2    1524
                                              7 COMRAM     9     7      2
                        _FifoDequeue (ARG)
 ---------------------------------------------------------------------------------
 (1) _FifoInitialize                                       2     0      2     164
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EnableTransceiverRX                                  1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _EnableTransceiverRX
   _FifoEnqueue
     _IsFifoFull
   _FifoInitialize
   _IsFifoEmpty
   _TinyDelay
     _DigitalBreakout
       _FifoDequeue (ARG)
         _IsFifoEmpty
     _FifoDequeue
       _IsFifoEmpty
     _FifoEnqueue
       _IsFifoFull
     _GetChar9
       _IsRxDataAvailable
     _IsFifoEmpty
     _IsFifoFull
     _IsRxDataAvailable
     _IsTransmitterReady
       _IsTransmitterEnabled
       __GetTxInterruptFlag
     _PutChar9Default
       _FifoDequeue (ARG)
         _IsFifoEmpty
       _PutChar9 (ARG)
         _DisableTransceiverTX
         _EnableTransceiverTX
         __GetTxInterruptFlag
   _UART_Initialize
     _EnableTransmitter
     ___lldiv
   _compute_crc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     110      37        7.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      81       5       80.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     38      45       1       72.6%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C6      12        0.0%
DATA                 0      0     1D6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 12 14:50:41 2018

                              l71 FC62                                l80 FCDA  
                              l81 FDF0                                l82 FCF6  
                              l83 FCF2                                l75 FCAC  
                              l67 F5CA                                l76 FCAE  
                              l85 FD50                                l77 FCC2  
                              l69 FA50                                l86 FD0E  
                              l78 FCC4                                l95 EEE8  
                              l79 FCD8                                l96 EF1A  
                              l88 FDE0                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                       __CFG_LVP$ON 000000  
                             l101 F210                               l110 F316  
                             l111 F344                               l103 F284  
                             l120 F406                               l112 F346  
                             l104 F286                               l121 F434  
                             l113 F374                               l105 F2B4  
                             l130 F4F6                               l122 F436  
                             l114 F376                               l106 F2B6  
                             l131 F524                               l123 F464  
                             l115 F3A4                               l107 F2E4  
                             l124 F466                               l116 F3A6  
                             l108 F2E6                               l125 F494  
                             l117 F3D4                               l109 F314  
                             l221 F108                               l213 F042  
                             l126 F496                               l118 F3D6  
                             l230 F14A                               l222 F128  
                             l127 F4C4                               l119 F404  
                             l223 F11A                               l215 F04E  
                             l128 F4C6                               l240 F18E  
                             l232 F152                               l216 F0DC  
                             l145 EAAA                               l129 F4F4  
                             l305 EC70                               l241 F1E4  
                             l233 F15C                               l250 F1D0  
                             l218 F0EC                               l235 F164  
                             l227 F134                               l219 F0FA  
                             l148 EAB0                               l332 EB34  
                             l260 EAC2                               l252 F1DC  
                             l244 F1BC                               l236 F17A  
                             l245 F1AE                               l229 F140  
                             l254 F1F0                               l360 EFA6  
                             l272 EB12                               l280 EAFE  
                             l256 F1FC                               l353 EB92  
                             l337 EB42                               l363 F00A  
                             l348 EB80                               l364 EFD4  
                             l292 EC48                               l365 EFE8  
                             l357 EFB8                               l277 EB20  
                             l285 EC16                               l390 EDF4  
                             l366 EFF8                               l358 EF82  
                             l294 EC50                               l375 EB6A  
                             l359 EF96                               l295 EC64  
                             l287 EC3E                               l288 EC32  
                             l385 ECEC                               l297 EC5A  
                             l379 EAE4                               l395 EE8A  
                             l388 ED9A                               l396 EE1A  
                             l750 ED1E                               l753 ED5E  
                             l754 ED6C                               l749 ED2A  
                    __CFG_CPB$OFF 000000                      __CFG_CPD$OFF 000000  
             __end_of_FifoDequeue EE0C              ??_IsTransmitterReady 0002  
             __end_of_FifoEnqueue ECFC                               prod 000FF3  
                             wreg 000FE8                        _TXSTA1bits 000FAC  
                    __CFG_IESO$ON 000000                        _TXSTA2bits 000F72  
                    ?_compute_crc 0001               __end_of_IsFifoEmpty EAE8  
                            l2202 FA48                              l2144 F5C2  
                            l2234 FC5A                              l1858 F208  
                            u2110 FC56                              u2130 FC7A  
                            u1340 EC5E                              u1530 F24C  
                            u1370 EC74                              u2090 F5E6  
                            u1380 EC78                              u1700 ED2E  
                            u2181 FCF0                              u1740 F0A0  
                            u1745 F096                              u1930 F19C  
                            _main F528                PutChar9@uart_index 0004  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     __CFG_BORV$190 000000  
                            prodh 000FF4                              prodl 000FF3  
                            start 0002          __size_of_PutChar9Default 0010  
                    ___param_bank 000000                  ?_UART_Initialize 000E  
               FifoEnqueue@buffer 0005                        _IsFifoFull EB46  
                    _BAUDCON1bits 000FB8                      _BAUDCON2bits 000F70  
                           ?_main 0001           compute_crc@ptr_msg_body 0001  
                 __end_of___lldiv ED7E                 _IsRxDataAvailable EB6E  
          ??_IsTransmitterEnabled 0001               _ConfigureOscillator EAA4  
              ?_IsRxDataAvailable 0001                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                DigitalBreakout@x 000C                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000       EnableTransmitter@uart_index 0001  
              __CFG_MCLRE$EXTMCLR 000000                             main@c 0038  
                           main@i 002A                             main@j 002C  
                           main@k 0033                             main@l 002F  
                           main@m 0026                             main@x 0034  
             ??_IsRxDataAvailable 0001                             tablat 000FF5  
                           status 000FD8                    __CFG_HFOFST$ON 000000  
                __end_of_GetChar9 F014                    __CFG_PBADEN$ON 000000  
            ?_ConfigureOscillator 0001                   __initialization EB96  
                    __end_of_main FDFE                       _FifoDequeue ED7E  
                     _FifoEnqueue EC80         __end_of_IsRxDataAvailable EB96  
                          ??_main 0021                     __activetblptr 000002  
                     _IsFifoEmpty EACE                    __CFG_PLLCFG$ON 000000  
                __end_of_PutChar9 EC80                            _ANSELA 000F38  
                          _ANSELB 000F39                            _ANSELC 000F3A  
                          _RC1REG 000FAE                    __CFG_WDTEN$OFF 000000  
                          _RCREG1 000FAE                            _RCREG2 000F74  
                          _OSCCON 000FD3                            _SPBRG1 000FAF  
                          _SPBRG2 000F75                            _TXREG1 000FAD  
                          _TXREG2 000F73                    _FifoInitialize EBCC  
           ??_ConfigureOscillator 0001                    __CFG_XINST$OFF 000000  
                    compute_crc@i 000D             DigitalBreakout@output 000D  
                  __CFG_STVREN$ON 000000                         ??___lldiv 0009  
                     ?_IsFifoFull 0001                            clear_0 EB9E  
                          clear_1 EBB0                            clear_2 EBBC  
               ??_PutChar9Default 000A      __end_of_DisableTransceiverTX EA86  
                          main@tf 002E                __size_of_TinyDelay 00AA  
                    __mediumconst FDFE                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                 _DigitalBreakout F204              __size_of_compute_crc 009C  
          __end_of_FifoInitialize EC0E                        __accesstop 0060  
         __end_of__initialization EBC2       __end_of_EnableTransceiverRX EA78  
     __end_of_EnableTransceiverTX EA94                     ___rparam_used 000001  
                IsFifoFull@buffer 0001                    __pcstackCOMRAM 0001  
      __size_of_IsRxDataAvailable 0028               compute_crc@len_body 0003  
                       ?_GetChar9 0002                        __pbssBANK0 0060  
  IsTransmitterEnabled@uart_index 0001                   ?_FifoInitialize 0001  
             __size_of_IsFifoFull 0028                 __end_of_TinyDelay EF52  
              __CFG_CCP2MX$PORTC1 000000                         ?_PutChar9 0002  
               FifoDequeue@buffer 0003                __CFG_CCP3MX$PORTB5 000000  
    __size_of__GetTxInterruptFlag 0022           __end_of_DigitalBreakout F528  
     __size_of_IsTransmitterReady 001A                        ??_GetChar9 0004  
                         _SPBRGH1 000FB0                           _SPBRGH2 000F76  
              GetChar9@uart_index 0004              _DisableTransceiverTX EA78  
                 __CFG_PWRTEN$OFF 000000            DigitalBreakout@newData 0008  
                         __Hparam 0000                           __Lparam 0000  
                      ??_PutChar9 0004                      ?_FifoDequeue 0003  
                         ___lldiv ECFC                      ?_FifoEnqueue 0005  
                         __pcinit EB96                           __ramtop 1000  
    IsTransmitterReady@uart_index 0002                           __ptext0 F528  
                         __ptext1 EE0C                           __ptext2 F014  
                         __ptext3 ECFC                           __ptext4 EAB6  
                         __ptext5 EEA8                           __ptext6 EA94  
                         __ptext7 EC0E                           __ptext8 EA86  
                         __ptext9 EA78  UART_Initialize@interrupt_control 0013  
                         _buffers 00E1                      ?_IsFifoEmpty 0001  
        __size_of_UART_Initialize 01F0     __size_of_IsTransmitterEnabled 0022  
               __end_of_table_crc FFFF              end_of_initialization EBC2  
                  _galaxyCommands 0060                     __Lmediumconst FDFE  
           ?_DisableTransceiverTX 0001                   _PutChar9Default EA94  
                 ___lldiv@divisor 0005                   ___lldiv@counter 000D  
                  _digitalOutHyst 0039                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                    ??_IsFifoFull 0003                  ?_DigitalBreakout 0008  
               IsFifoEmpty@buffer 0001                         _TRISAbits 000F92  
                       _TRISBbits 000F93                         _TRISCbits 000F94  
     __end_of_ConfigureOscillator EAB6                __end_of_IsFifoFull EB6E  
             start_initialization EB96                     ??_compute_crc 0005  
                ??_FifoInitialize 0003                 __size_of_GetChar9 00C2  
         __end_of_PutChar9Default EAA4               __GetTxInterruptFlag EB24  
          ??_DisableTransceiverTX 0001                 ??_UART_Initialize 0014  
                 FifoDequeue@data 0006    DisableTransceiverTX@uart_index 0001  
                    GetChar9@data 0005                         _TinyDelay EEA8  
            ?__GetTxInterruptFlag 0001      __size_of_EnableTransceiverRX 000E  
    __size_of_EnableTransceiverTX 000E                 __size_of_PutChar9 0072  
            __size_of_FifoDequeue 008E              __size_of_FifoEnqueue 007C  
                     __pbssBIGRAM 00E1          UART_Initialize@mode_9bit 0012  
                     __pbssCOMRAM 0039              __size_of_IsFifoEmpty 001A  
             __end_of_compute_crc EEA8                     __pmediumconst FDFE  
           ??__GetTxInterruptFlag 0001                        ?_TinyDelay 0001  
               main@commandNumber 0037                          ?___lldiv 0001  
      __end_of_IsTransmitterReady EB02                  __CFG_PRICLKEN$ON 000000  
                   TinyDelay@data 0011               UART_Initialize@baud 000E  
             UART_Initialize@temp 001C                  ?_PutChar9Default 0008  
                       _table_crc FDFF       IsRxDataAvailable@uart_index 0001  
               _EnableTransmitter EAB6                          _LATAbits 000F89  
                        _LATBbits 000F8A                          _LATCbits 000F8B  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
              ?_EnableTransmitter 0001      __end_of_IsTransmitterEnabled EB24  
                        _PIR1bits 000F9E                          _PIR3bits 000FA4  
                __CFG_WDTPS$32768 000000               ??_EnableTransmitter 0001  
                    PutChar9@data 0002              FifoInitialize@buffer 0001  
                       main@x_378 0036                          _GetChar9 EF52  
                     _compute_crc EE0C                   FifoEnqueue@data 0007  
       __end_of_EnableTransmitter EACE         UART_Initialize@clock_freq 0018  
                        __Hrparam 0000               DigitalBreakout@mask 000F  
                        __Lrparam 0000                          _PutChar9 EC0E  
              __CFG_BOREN$SBORDIS 000000                 __CFG_P2BMX$PORTB5 000000  
                     ??_TinyDelay 0011                  __size_of___lldiv 0082  
                  compute_crc@crc 000F                   _UART_Initialize F014  
                        __ptext10 EAE8                          __ptext11 EB24  
                        __ptext20 EBCC                          __ptext12 EB02  
                        __ptext21 EA6A                          __ptext13 EF52  
                        __ptext22 EAA4                          __ptext14 EB6E  
                        __ptext15 EC80                          __ptext16 EB46  
                        __ptext17 ED7E                          __ptext18 EACE  
                        __ptext19 F204          __size_of_DigitalBreakout 0324  
             _EnableTransceiverRX EA6A               _EnableTransceiverTX EA86  
                     _OSCCON2bits 000FD2     EnableTransceiverRX@uart_index 0001  
                   __size_of_main 08D6      __size_of_ConfigureOscillator 0012  
            ?_EnableTransceiverRX 0001              ?_EnableTransceiverTX 0001  
                        main@slot 0035                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2              _IsTransmitterEnabled EB02  
      __size_of_EnableTransmitter 0018         UART_Initialize@uart_index 0020  
            _addressDatagramCount 0045                  ___lldiv@dividend 0001  
   __size_of_DisableTransceiverTX 000E                        _RCSTA1bits 000FAB  
                      _RCSTA2bits 000F71                        _OSCCONbits 000FD3  
                   ??_FifoDequeue 0005             ??_EnableTransceiverRX 0001  
           ??_EnableTransceiverTX 0001           __end_of_UART_Initialize F204  
                   ??_FifoEnqueue 0009                   _led_green_delay 0043  
             PutChar9Default@data 0008                     ??_IsFifoEmpty 0003  
                ___lldiv@quotient 0009             ?_IsTransmitterEnabled 0001  
               __CFG_T3CMX$PORTC0 000000                _IsTransmitterReady EAE8  
   EnableTransceiverTX@uart_index 0001                 __CFG_FOSC$INTIO67 000000  
     __end_of__GetTxInterruptFlag EB46                 ??_DigitalBreakout 000A  
         __size_of_FifoInitialize 0042               ?_IsTransmitterReady 0001  
  __GetTxInterruptFlag@uart_index 0001                     _led_red_delay 0041  
