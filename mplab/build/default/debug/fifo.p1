Version 3.2 HI-TECH Software Intermediate Code
"17 fifo.h
[s S1 `ui -> 32 `i `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S1 . buffer read write currentCount capacity ]
[; ;app.h: 25: void TinyDelay();
[; ;app.h: 26: void DigitalBreakout(unsigned int newData);
[; ;fifo.h: 17: typedef struct {
[; ;fifo.h: 18: unsigned int buffer[32];
[; ;fifo.h: 19: unsigned char read;
[; ;fifo.h: 20: unsigned char write;
[; ;fifo.h: 21: unsigned char currentCount;
[; ;fifo.h: 22: unsigned char capacity;
[; ;fifo.h: 23: } buffer16;
[; ;fifo.h: 25: void FifoInitialize(buffer16 * buffer);
[; ;fifo.h: 26: unsigned char IsFifoFull(buffer16 * buffer);
[; ;fifo.h: 27: unsigned char IsFifoEmpty(buffer16 * buffer);
[; ;fifo.h: 28: unsigned char FifoEnqueue(buffer16* buffer, unsigned int data);
[; ;fifo.h: 29: unsigned int FifoDequeue(buffer16* buffer);
"4 fifo.c
[v _FifoInitialize `(v ~T0 @X0 1 ef1`*S1 ]
{
[; ;fifo.c: 4: void FifoInitialize(buffer16* buffer) {
[e :U _FifoInitialize ]
[v _buffer `*S1 ~T0 @X0 1 r1 ]
[f ]
[; ;fifo.c: 5: buffer->read = 0;
"5
[e = . *U _buffer 1 -> -> 0 `i `uc ]
[; ;fifo.c: 6: buffer->write = 0;
"6
[e = . *U _buffer 2 -> -> 0 `i `uc ]
[; ;fifo.c: 7: buffer->capacity = sizeof(buffer->buffer) / sizeof(buffer->buffer[0]);
"7
[e = . *U _buffer 4 -> / * -> # *U &U . *U _buffer 0 `ui -> -> 32 `i `ui -> # *U + &U . *U _buffer 0 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _buffer 0 `ui `ux `ui `uc ]
[; ;fifo.c: 8: buffer->currentCount = 0;
"8
[e = . *U _buffer 3 -> -> 0 `i `uc ]
[; ;fifo.c: 9: }
"9
[e :UE 2 ]
}
"11
[v _IsFifoFull `(uc ~T0 @X0 1 ef1`*S1 ]
{
[; ;fifo.c: 11: unsigned char IsFifoFull(buffer16* buffer) {
[e :U _IsFifoFull ]
[v _buffer `*S1 ~T0 @X0 1 r1 ]
[f ]
[; ;fifo.c: 12: if (buffer->currentCount == buffer->capacity) {
"12
[e $ ! == -> . *U _buffer 3 `i -> . *U _buffer 4 `i 4  ]
{
[; ;fifo.c: 13: return 1;
"13
[e ) -> -> 1 `i `uc ]
[e $UE 3  ]
"14
}
[e :U 4 ]
[; ;fifo.c: 14: }
[; ;fifo.c: 15: return 0;
"15
[e ) -> -> 0 `i `uc ]
[e $UE 3  ]
[; ;fifo.c: 16: }
"16
[e :UE 3 ]
}
"18
[v _IsFifoEmpty `(uc ~T0 @X0 1 ef1`*S1 ]
{
[; ;fifo.c: 18: unsigned char IsFifoEmpty(buffer16* buffer) {
[e :U _IsFifoEmpty ]
[v _buffer `*S1 ~T0 @X0 1 r1 ]
[f ]
[; ;fifo.c: 19: if (buffer->currentCount == 0) {
"19
[e $ ! == -> . *U _buffer 3 `i -> 0 `i 6  ]
{
[; ;fifo.c: 20: return 1;
"20
[e ) -> -> 1 `i `uc ]
[e $UE 5  ]
"21
}
[e :U 6 ]
[; ;fifo.c: 21: }
[; ;fifo.c: 22: return 0;
"22
[e ) -> -> 0 `i `uc ]
[e $UE 5  ]
[; ;fifo.c: 23: }
"23
[e :UE 5 ]
}
"25
[v _FifoEnqueue `(uc ~T0 @X0 1 ef2`*S1`ui ]
{
[; ;fifo.c: 25: unsigned char FifoEnqueue(buffer16* buffer, unsigned int data) {
[e :U _FifoEnqueue ]
[v _buffer `*S1 ~T0 @X0 1 r1 ]
[v _data `ui ~T0 @X0 1 r2 ]
[f ]
[; ;fifo.c: 26: if (IsFifoFull(buffer)) {
"26
[e $ ! != -> ( _IsFifoFull (1 _buffer `i -> -> -> 0 `i `uc `i 8  ]
{
[; ;fifo.c: 27: return 0;
"27
[e ) -> -> 0 `i `uc ]
[e $UE 7  ]
"28
}
[e :U 8 ]
[; ;fifo.c: 28: }
[; ;fifo.c: 29: buffer->buffer[buffer->write] = data;
"29
[e = *U + &U . *U _buffer 0 * -> . *U _buffer 2 `ux -> -> # *U &U . *U _buffer 0 `ui `ux _data ]
[; ;fifo.c: 30: buffer->write++;
"30
[e ++ . *U _buffer 2 -> -> 1 `i `uc ]
[; ;fifo.c: 31: if (buffer->write == 32)
"31
[e $ ! == -> . *U _buffer 2 `i -> 32 `i 9  ]
[; ;fifo.c: 32: buffer->write = 0;
"32
[e = . *U _buffer 2 -> -> 0 `i `uc ]
[e :U 9 ]
[; ;fifo.c: 33: buffer->currentCount++;
"33
[e ++ . *U _buffer 3 -> -> 1 `i `uc ]
[; ;fifo.c: 34: return 1;
"34
[e ) -> -> 1 `i `uc ]
[e $UE 7  ]
[; ;fifo.c: 35: }
"35
[e :UE 7 ]
}
"37
[v _FifoDequeue `(ui ~T0 @X0 1 ef1`*S1 ]
{
[; ;fifo.c: 37: unsigned int FifoDequeue(buffer16* buffer) {
[e :U _FifoDequeue ]
[v _buffer `*S1 ~T0 @X0 1 r1 ]
[f ]
"38
[v _data `ui ~T0 @X0 1 a ]
[; ;fifo.c: 38: unsigned int data;
[; ;fifo.c: 39: if (IsFifoEmpty(buffer)) {
"39
[e $ ! != -> ( _IsFifoEmpty (1 _buffer `i -> -> -> 0 `i `uc `i 11  ]
{
[; ;fifo.c: 40: return 0;
"40
[e ) -> -> 0 `i `ui ]
[e $UE 10  ]
"41
}
[e :U 11 ]
[; ;fifo.c: 41: }
[; ;fifo.c: 42: data = buffer->buffer[buffer->read];
"42
[e = _data *U + &U . *U _buffer 0 * -> . *U _buffer 1 `ux -> -> # *U &U . *U _buffer 0 `ui `ux ]
[; ;fifo.c: 43: buffer->read++;
"43
[e ++ . *U _buffer 1 -> -> 1 `i `uc ]
[; ;fifo.c: 44: if (buffer->read == 32)
"44
[e $ ! == -> . *U _buffer 1 `i -> 32 `i 12  ]
[; ;fifo.c: 45: buffer->read = 0;
"45
[e = . *U _buffer 1 -> -> 0 `i `uc ]
[e :U 12 ]
[; ;fifo.c: 46: buffer->currentCount--;
"46
[e -- . *U _buffer 3 -> -> 1 `i `uc ]
[; ;fifo.c: 47: return data;
"47
[e ) _data ]
[e $UE 10  ]
[; ;fifo.c: 48: }
"48
[e :UE 10 ]
}
